<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-5-23</title>
    <url>/2022/05/23/2022-5-23/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="31897402ac373818f74e06a86a6b53636562bd57562cbff2f22a7cf5b762a119">3757591a001914bec15e16449f8d2836ad306fa6ae10bfbae735802ea5b3273b03aa6334ac34e4f05809381d8422efd0470102af2ad56309e46e7f2d9d90d246c15cd8e52e52fe48ee426bfe16633cd23ea096d1ab0d91941fd2a71eacb1d9b80752c4257bd31a1c3903c0522e6857774a9eb0c5de50e02076dec17fe1a9c9f2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-24</title>
    <url>/2022/05/24/2022-5-24/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-25</title>
    <url>/2022/05/25/2022-5-25/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-26</title>
    <url>/2022/05/26/2022-5-26/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9a231add4121fe45e58c286d9b5f98bfe409d41ebc2bd6867f0b8f9020c86574">3757591a001914bec15e16449f8d2836f4822ca5b19e9886f48e994b4612434e41f7f80c9a1e8cd259de2e327d9ea622199cb3fb1a3e8a8ef3571805012753811a3028a98ac8f3fd1da1048a04da0cb73eb8b353cd6c4e6f3aa51f782a0c37c430408b21bb27aa95f1a28cc7ce7ce7f8c648a3203b0b814fbae006bfd7b5bba831d233d1a690b7b1c1e76d78585f1bc4e908a111e313ee5d438c9044b1d7ff51670cd30124588ff3ba63b11a4e812fc7518a09813c142f047c9c63b07ab9c54264d85639f63c87fb48078488895d14a7b4ec05e16697e79c5d7d96531ae38b6322d28621c7096f3df2edfbb41f2003c417385b13847bc9f14f6d7fc4d2ab0afe8213d364777cca6b12ed30022bd71aa7d5a0e2ea732af5b907759a2e5ea643abd1fa6e9502ea08a2eb88b1c7149b30e735364c1b2afa4fec864e4c658b18acf79c80d4a6787a10b73b7afbbd92723827ea0b07ef49c4491d9a76452ae9434ab2d60f4f265a00ff301edb0db857aee991a297ad836cc8881b8c857d7896e35d4f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-27</title>
    <url>/2022/05/27/2022-5-27/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="af35117f0a99ccea0273436e4649dc37030526997c782d885d424bddb21936ce">3757591a001914bec15e16449f8d28361576f642c6a68b7322767586f720426f9c4e795fd77da699f45ceedc147e5ed5d9fa3080141ce7c70e7ce01ca42fe96e2374f0463d000f8895f89a13033780d1690fa2b724f58d9b7eb7a2fedee8f8515f1972581c339cbe196c41172d0ccb96</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-28</title>
    <url>/2022/05/28/2022-5-28/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="728184d559aaaabafeedda7f110d87f0b71124b5857330b549e28f8f2ad7e0d5">3757591a001914bec15e16449f8d2836f4822ca5b19e9886f48e994b4612434e7bb1aabe892d56b910ae3f6644f015a1de585022837092e4554a800b81e94c66b30669997a717d9816af297c750579402f470d12677e5a2440c47a430a585dea9d51b0f5e84c4b34e31299ef6edb25ad14aabadb8f0b6c9a62b52b18383d0b85cbe3abe7591ef8cc3f002eead5fbde8ac4114a3301aef4e960003071ccdc1d873ae9910998e6fe3b8c031cc270a8374aad73b666c3ce2c8ce1eb943b8baf0575b48a4d9de69d34bec3234c71324c4254e46c5fca8cb2d420dc32f5257525fe145496f169edc601e86560ca71de09dca6b40e9af7be6d81f04a84375316b54ba1bd0f22f4d4203dc29ead19cd9d8cf4302dfecb7ba1dd823a6f826f699c15051ad3116493cf4399c90ddf6ac5691d69b71bd669d3bbbc6a45ecbcae43645e039449c9096ccb73557548077a3e7334728f39e2da5f2edbd05df58ea5398c8b82d42c0051d544267772d0aa261513d155b9ec01298d130cac1b3c92d4d8769922b283fcb36f7886a51dfde706140387480c7a815c58a11f9d53b88cde9e347ad3807c96bf03f226dc8de847ce1d5b7e0ab6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-29</title>
    <url>/2022/05/29/2022-5-29/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="944577b346938d007189150e50df9c1b18145ffa4c232869e94274b811928d5a">3757591a001914bec15e16449f8d28369ec558cd2c573f032908e18f5e5f3c30c2744f19a262aaa966bb959973846d190d9ae9cda6f370c94e7a09b99bb8655027f54f5994d0be57802ea1062d37f9e0b23dabcd7f8a3563252649198bc18d1568e82de00f72e6081d89e4d6100701ad464e6752ec9c7af8e00b666e2a060ac1f45a6091c1c61c36ad0402d94c328e90728a72403d65fe1e951bda27bd0eb6cca083717a88f44b81d26f4757edf458c919b084d9885e8bd4d632849cfe8b69d5cbe463c3314761697e65f439b329c41a388f40ad25aff5ac72a3d2b379e4af438496991a53865713691545de2dd63cc3a976d9d48ab3285db1648710892a745714877d124f76035a635af30cb2a013b46a3cae0decf22f12f334d2316e44e245fa406928bd0bde205560f7dde1e6928548c0c2fb995de2331dfd53c9b1b76ab05d91a44c1ce3ce75a510459652c5e684ca6b2abcf4ae8fd4cb4c778523ed4835ab7dae3e71abddceb96d529afb07b527e02db7e4027e27de7c1d335b02e8ed79eda085e6a68f7b0027603e53e07337c0a756b83fe09f28369058a97cb59ce1db4410c58f925da1c1a6ca4ec515e66d1f17c1a8ab6e242370acebb550f7aac4d6cfbe593d40954d0387c9078ff4f587c7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-30</title>
    <url>/2022/05/30/2022-5-30/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-5-31</title>
    <url>/2022/05/31/2022-5-31/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-1</title>
    <url>/2022/06/01/2022-6-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b3febaddc92de8e0eac546f808de553c2821c658b4bcb91dfc5738a780eee0d2">3757591a001914bec15e16449f8d28369ec558cd2c573f032908e18f5e5f3c3071be46acd0a4a3d8c05699b1a4e43310d5dc513155cae636eac37826d3c5717cb5dbda2422ca14dbc1c4690afe916ddf4a35729d177b4dfef2ea218795b7279be371942e8719ef2570277b7f9d51b4c65f2ef6302716bcc9096fb2887b5aed6f60d419e3cc20ea099bd7b61333738d35036b01df4ec7dcd04f39b15df96aa1b4973e3e44b9600d73364d99fb5f13608e86adae1c38cc9101cdf8673041ff1494</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-10</title>
    <url>/2022/06/10/2022-6-10/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-11</title>
    <url>/2022/06/11/2022-6-11/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-12</title>
    <url>/2022/06/12/2022-6-12/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-13</title>
    <url>/2022/06/13/2022-6-13/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-14</title>
    <url>/2022/06/14/2022-6-14/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-15</title>
    <url>/2022/06/15/2022-6-15/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a47ce9062bb020c2539c9f131d6828d89394f92dd08cb6628f0885826ea3ae73">3757591a001914bec15e16449f8d2836ba957d3eb2caad346bc0416dc7dac3d1edc669cce801aade90be1fce0275c4d687bb47d29e59f2b5a80f08f3f9d6ba0d7c50b7d7c2fe48cc8eadb82a855f75270ee814c304b4a58c7236576b8696a7a45d36b5e65408b10798cd1e345be67660d4799823c7de407745d0bd2f9a962dd9fa44a5c38a255891d600b29acc9d9456b9a8494706b4442bf47f53d5cc64727e7ed9f261cd3aa03a474c7473992003ecc2966c2e7ec54f52c48700c0392c09aad7f3212ca790fb0c0d1fc7b9310a94b69554764d98cf01ebc165191048d84b71fb9b28f142632ace40e4fe46712ff4db0b6fe99fd1300c48d08c185812c5a400e5bdf1f4fa7607169fd52a65d58e3b4644fe71d7e9ee0362e231f95cdd735bd0ecff612f04879f3f8cec9d11aded37dce38a6d62c7e972e923cd181ad5f53cc8ad18220e5d4f733a9ec1edc85b08be636ab7abb3cf600f6a4c593aceda150b49aa2752f12bcbb117ea58c81ab6cb624d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-16</title>
    <url>/2022/06/16/2022-6-16/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-17</title>
    <url>/2022/06/17/2022-6-17/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-18</title>
    <url>/2022/06/18/2022-6-18/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d6cba9c4b0bbd2452d99c97c10088ef90cad5f8ecedc55d5512a7feb026a70fa">3757591a001914bec15e16449f8d2836c687a36cd39cf55eecf3b42f673d850ea138cab143d86a964d9ae270448f18feff0d08f0ff04e701b8337aac686a59279129e0e126782c72e2b4b167e6c50f1f334803e04a4300d7a2e213389d1902c53cb411d85459a4891fc39f3fff08cc981bad4b5dc28b04bd5e0ff8e0908bea709e66998ca83be2c7942ecef05d139be6aad5ea23c43334aa70b39144484400683dd8316d2d026dc8e111ed687d9ced1e28c86f934acc37d813422ea350ca50008e8a771a5d934bc7a8b44bf062c8c0c003f9473db2945c2847a48220c3306ffd18c68346bfae336d22600cd434f6ca4b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-19</title>
    <url>/2022/06/19/2022-6-19/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a5b9e7a8a71bfb211611c51097170366e6cbc67a6bfc8159da9e919d2f4a9ad">3757591a001914bec15e16449f8d2836dbd57249aa1415c58be070afc026a2d024620c187fcb60c000cf8b197f4ab4504ae8926ef5b17366ebdafaa9b0b33563d4a6484455137f2c5d0a1b9e34b365782a9b8944f609ff7e54aefa7e62fb8e2b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-2</title>
    <url>/2022/06/02/2022-6-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-20</title>
    <url>/2022/06/20/2022-6-20/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="55a05477a4f381c9ce9073bd38996142a2174cfa8e8753e8542a9245f5742bf2">3757591a001914bec15e16449f8d2836b139cfbe31de03e842b473892181012dd266ef9d1f439b578a90be8ef68b79c779b7ad3627180dde916948cc6bc785d3d15fdfb36182bd04c811cfac2094df3b664b8c737b9f4a12beb51584275268b0dd26552acf0d6bae1dec245886e6ec22e1463bce4b604bdba5269ed7b5a1379c0915ec08437ee82b3ac2b06963cabf058fca41833d5049feb24a6928fc8d68398cb609dc48b94dd95d875561de9f1f3f87c01e9efe156c4191eb29afe2522c74c41ce865447ea301b8e4bd9bc30b4eb681af7eb0d290e3f3f4ccd8c2de6b963a9b098698cfb3e4d0242e977ce25ee8340b03f1b3fafce1a4fab9cd560173007bdaa0f56e35c1d72a3a98ca8ff4f272d4bb7d262ba43a900222924093178c82965d57f755d3f87e15d20b17e1b9be60b0a87697044e0486613d195308a9508744896f7d2efd265ea61433324ed0580656126087c65e230862b222708b4a2dcbb2b884837a8d4cde9096be11965ce32e4a1486a32f43062d05cbe427fc9b1e5a3a3570ccbdc85d8de5738e7a59e6fbe4702de7772c1b37fbc076ece87d8737df46f17b49aeb2910528e9a5cf7b9e3e573bca9251ded2d4e9450cc1b8490d284c279403859feea7baa1026e82f0e87c5e8a6775a402c8f64709be9b4b220194c83be7bb91aeadbee4d852e27e10c94a9fcddcb3b1659d251077665e9dca2a98b2ca14ce2df271066f105e6878e9fdd4c0f3b8c2edd3cfa32e831fd6acd917109fff4c1f2f80573bbfd99e257587806ca608b81e2aadf69618f534de00f766572ba90a0face9749f0cac742de7d186e9c5b6fd7f3f42f1150a070d6e7a7838b7a7a8d6fb2ee046810519da2a88678ae741c12fd1618dd2bb655544272c0be7c7fe3b00819e4b54fb4eeeb26da34e41690636acd3531514b7908581276739a264073e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-21</title>
    <url>/2022/06/21/2022-6-21/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1a7f361dfa4d25ceb1c4875541e786bddbe1e101a00f2bc5c7779de3a0de721c">3757591a001914bec15e16449f8d2836f4f8cca929623f8898f8d4221d4854cd09b926bd3b89e348d3ad5e4fa75a0be4c533069e272c9f1f46a727cbbcc402f370c942b9913b52eebc6ff1f6e735f58047470b5f782dd0dfb827f11004b78b5ec19c5b3f6b03e5161463f6ea1b768fd23264b435a05b8b547d8fc6b6f8361f5eb82ac44e7cce85367b2f790ec6b9da9469a1a7a0e42683e6ba20e2e6330eb2aa7afe696d178564a384db074a65bb346c359b232a384f30bd74a8cc3863f85ba01877a804a88af4080cb48ef644ebdd3f191c328bc58fa1747f8c7d4cdfe23e91a7ca3dc5a5cbe1588f6e1e926dd66b92ce4976ee2ee422eaf4a9460b28dc32b9a14402c246e049343bb64ce74de641ff5a7e51e9b7b0911385787aeb08ed018242e6d725cc4bdeb714e92e510a7e1b0048d0552d93ebd8df69cbe4e780db1a40d1a30940b94162384288983330d88bbb0c0625d92585f3d1c21872058f498f21f86c4f2b0ddcae44a2f8cd58099df7eeecb4e2f2005715321f1c4c8a70cb91ae84a4c86e17ec4ad7d288c869cad9b8799c589adf3c188059e86d14bf8f9fce574dce7dbd6b36393f792a18faf966d77c7a2291a99fb0fae71cba83d1526526d4e2518c5be6ec2a95c77cfe8a8e0d2db51db685eacba045db7376edf06250616ce0b2cb3a5e99f7e7729afc45eedab6761b48ae08955d7b34099d7b412dd5f5bf432cfb339af22cccd678ec62da4eca96587544434ffc75bcef0ec9b374fcc34c40748632adf9f995e388217205bdd287059f519542a25de439f04b8ecde9e9cfeb763b8d428a7b5757c936984b49ecd24e7b676b576e3c5b6d0420c50b84df875d76a011882b418e53720e02e5fe95f5cad05fb874805407b3c5da8a6a740e94e8dc295a4dc5f4d1525e3e261653777e37a93d561c5954a0edff71e5ff6fd322e0fd4e4e22d0c6703ac26d8ed73dc52ab0a861d1dd97062e7a009776a5e69aee6fa7cf5c9d064a9659a5b58cee177deee9fda6fe9f7ede25444ec541d1ca4276309ea27a0c4768e53b1f4464a4fd5398b0ea2702bc35d4f6e358ea1e0d683e488875782a502f1574517c98e372a6130a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-22</title>
    <url>/2022/06/22/2022-6-22/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c8b864bc1da3328836dbc15a49c047451b0db6df2753c2b0ba1a3fc0ca7de144">3757591a001914bec15e16449f8d283649c56c43696e803b0a1c64e83f25750babe297e6d06e871bde393871193049dfb5744570b128c6f9537ad4bc26c4770cb8bf3512b5c114023036b14076e4b8ecfc4849b172ffff69c4058b090d45e26ec07c489b04d6e1911ac7485aef3075bf154bd4b6123f73a6f5d4c70772d086afca8676905fbb86b04d7b3da290b225e2b106000fb2e9bcafce63a30ab36eeff53a7463c144b25416375df9eddf75fe6e0bb9a57f9725de988411374e2ca6ddced3f27a9455347545ef1a9b3eabf1e944</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-3</title>
    <url>/2022/06/03/2022-6-3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-4</title>
    <url>/2022/06/04/2022-6-4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-5</title>
    <url>/2022/06/05/2022-6-5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7686ffe5da818b0a780d4ce1fbb2af6cf6a0f9223b52800b27b35cb7a90595f6">3757591a001914bec15e16449f8d28367b16a0192048ba4c953f96c2477d4652098db2b158fac14eacf301f23577825fce300c54df85867eda3f2a90cb2b05cfcbcfec638e24cdbe4066a8c72140aa0ed89dc076ffd0ef75770ba2e1593c748017eeafbe03e7fefd56f12f29bd52a410ea2628d05a4fd03850f83a95ccd0b96dfc01530aae67120bc4de0719ec8702fb99a9d37564a37d8d1246960d6120b1bd5630706d3217765cc86bca786d3333293c6077dfd3080512156e5e47ed084ceaa7ce83be892d63ab483fb70ce44f6cb652c81ce9616b0d680efceb47c8b2af8bb6ca0b8d92d854697fdd37d05365484393662c346846b43a4f65ea1fb4e3f5fcd1c94b1379a8dd2a6d54d18d40925f16cd8e1703f290772203ec4bea93fc77143d9c73724f2d6c33b5131f5a5a7387f34ad4a393054d911b2341e4cedf5c8e877c3ad15c59f281c443424fcb7261d53cb12d1fc30b849d9786aeeb57c8d0a33b92415fb9a960fcb84e32ec51f5d133c9941449a4526db0ac6ca1e63e024768f56c67ace28086bc05e420d7449e9d21cf56e6ead7a4cb690390977fde916c4cf453f2f6b219e498b55a7979f6e18baa887ac23461b8527b8dbde82c14d5fb1573b81ce0e8ead91fe8211e5d02d2f4acc15259cbd487b352b0f7bd5132753569ce38ff5f3e9bb1c5866b3db8eb3434d0071f86a889b1a902c51114d0ab05f5d43101f8fda083320e2b2010642c21166e1293048f28203b4fe74e660c90621f2e8b71737f4b0a064ce2f7dcb4f7b096cb5da87e75b2f14c4db0f5a496775405752b37b1712ee88ae2f9426b39091e794adb9469445eaeeb7dd313d58f615e612027e67f95b62056404ab66a641fe9eccf30e7d45167c51b34cc64e162df35e715b4aac6cb8f124e6c9fe7ca15668c0e1a41a793cd44dd8ce318c3ca84132323e570db7c761eaa6b3cddaf6e98c439d051451884a9be3cf4211977e17672e29b6640</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-6</title>
    <url>/2022/06/06/2022-6-6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-7</title>
    <url>/2022/06/07/2022-6-7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-8</title>
    <url>/2022/06/08/2022-6-8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-6-9</title>
    <url>/2022/06/09/2022-6-9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022春计算机系统复习</title>
    <url>/2022/06/11/2022%E6%98%A5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="基础知识">基础知识</h2>
<span id="more"></span>
<p>ASCII：</p>
<p>0：48</p>
<p>9：57</p>
<p>A：65</p>
<p>Z：90</p>
<p>a：97</p>
<p>z：122</p>
<p>位：bit</p>
<p>字节：byte</p>
<p>字：</p>
<blockquote>
<p>单位换算：</p>
</blockquote>
<h3 id="编译过程">编译过程</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656832.png" alt="image-20220610215408779" style="zoom: 50%;" />
<h2 id="汇编">汇编</h2>
<h3 id="寄存器">寄存器</h3>
<p>16位：AX、BX、CX、DX；SI、DI；SP、DP</p>
<p>8位：AH, AL ; BH, BL； CH, CL； DH, DL</p>
<p>32位：EAX, EBX, ECX, EDX；ESI, EDI； ESP, EBP</p>
<p>段寄存器：DS，ES，SS ……</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656753.png" alt="image-20220610203943865" style="zoom:50%;" />
<p>汇编语言格式：（AT&amp;T格式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl $8,%eax</span><br><span class="line">;指令 源操作数，目的操作数</span><br></pre></td></tr></table></figure>
<p>操作数：</p>
<ul>
<li>立即数</li>
<li>寄存器</li>
<li>储存器</li>
</ul>
<blockquote>
<p>CPU计算==仅从==寄存器直接存/取数据。</p>
</blockquote>
<hr>
<h3 id="数据传送">数据传送</h3>
<ul>
<li><code>movl</code>: 用于传送32位的长字值</li>
<li><code>movw</code>： 用于传送16位的字值</li>
<li><code>movb</code>： 用于传送8位的字值</li>
</ul>
<h5 id="传送数据到内存">传送数据到内存</h5>
<h5 id="获取变量在内存的地址">获取变量在内存的地址</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl $value1,%edi</span><br><span class="line">leal value1,%edi	;lea—Load Effective Address</span><br><span class="line">					;加 L 表示 32 位</span><br></pre></td></tr></table></figure>
<p>计算 <code>3x+5</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leal 5(%edx, edx, 2),%eax</span><br></pre></td></tr></table></figure>
<blockquote>
<p>比用专用 ALU 算数逻辑单元更快</p>
<p>而且能够与 ALU 并行</p>
</blockquote>
<hr>
<h4 id="寻址方式">寻址方式</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl $1,%eax	;立即数寻址</span><br><span class="line">;立即数寻址方式主要用来给寄存器或存储单元赋值，因此这种寻址方式不能用于单操作数指令；</span><br><span class="line">;若用于双操作数指令，也只能用于源操作数字段，不能用于目标操作数字段。</span><br><span class="line"></span><br><span class="line">movl %ebx,%eax	;寄存器寻址</span><br><span class="line">;指令所要的操作数已存储在某寄存器中，或把目标操作数存入寄存器。</span><br><span class="line">;把在指令中指出所使用寄存器(即：寄存器的助忆符)的寻址方式称为寄存器寻址方式。</span><br></pre></td></tr></table></figure>
<h5 id="基址比例变址寻址">基址比例变址寻址</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Memory references have the following syntax:segment:offset(base, index, scale).</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>segment是x86架构的任意一个段地址寄存器。segment参数是可选的（可以不指定）：如果指定了段寄存器，必须和偏移量之间有一个冒号。如果segment参数被省略，默认的段地址寄存器ds 就会被用于计算最终的地址。</p>
</li>
<li>
<p>offset是指从段起始地址到目标变量地址之间的偏移量。offset同样也是可选</p>
</li>
<li>
<p>base 和 index 参数可以是任意的32位通用寄存器</p>
</li>
<li>
<p>Scale参数是表示index寄存器内容需要乘的值，==只能是1，2，4，8……==默认是1.</p>
</li>
<li>
<p>例1</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl base(%ebx, %esi, 4), %eax</span><br></pre></td></tr></table></figure>
<p>表示 <code>%eax = [ base + %ebx + %esi*4 ]</code><br>
将 <code>base + %ebx + %esi*4</code> 指向的内存位置的值赋值给eax寄存器。</p>
<ul>
<li>例2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leal 32(, %edx, 8), %eax</span><br></pre></td></tr></table></figure>
<p><code>%eax = 32 + ( %edx * 8 ) = 8 * (4 + %edx)</code><br>
通常可以用<code>lea</code>指令表示一些乘法运算。</p>
<h5 id="绝对寻址">绝对寻址</h5>
<p>在指令格式的地址的字段中直接指出操作数在内存的地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl 0x08048054,%eax</span><br></pre></td></tr></table></figure>
<h5 id="间接寻址">间接寻址</h5>
<p>相对于寄存器寻址多了个括号：表示这个值不是来自 <code>%ebx</code>，而是来自一个内存地址，这个内存地址保存在 <code>%ebx</code> 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl (%ebx),%eax </span><br></pre></td></tr></table></figure>
<h5 id="变址寻址">变址寻址</h5>
<p>作用：访问数组、循环语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl (%ebx,%edx),%eax</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="栈">栈</h3>
<p>在每个程序所分配的内存中，划分出一段连续的区域，作为栈空间。</p>
<p>栈：先进后出</p>
<p>栈顶指针：保存在%esp寄存器中</p>
<p>压栈：push</p>
<p>出栈：pop</p>
<blockquote>
<p><strong>栈顶是朝着低地址方向 （栈是向着零地址方向增长）</strong></p>
</blockquote>
<hr>
<h3 id="算术逻辑运算指令">算术逻辑运算指令</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656134.png" alt="image-20220611143910209" style="zoom:80%;" />
<hr>
<h3 id="跳转指令">跳转指令</h3>
<p><code>%eip</code> 寄存器：存放下一条要执行指令的地址。</p>
<p>跳转指令：修改 <code>%eip</code> 的值</p>
<h5 id="直接跳转指令">直接跳转指令</h5>
<p>jmp：四种格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp lable			;跳转到标号</span><br><span class="line">jmp 0x0804909a 		;跳转到地址</span><br><span class="line">jmp *%eax 			;跳转到寄存器里面保存的地址</span><br><span class="line">jmp *lable			;？</span><br></pre></td></tr></table></figure>
<blockquote>
<p>指令的某一行加个冒号 <code>:</code> 作为标记</p>
</blockquote>
<h5 id="条件跳转指令">条件跳转指令</h5>
<p>条件在 <code>%eflags </code>寄存器中</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657630.png" alt="image-20220611150041285" style="zoom: 50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657079.png" alt="image-20220611150113553" style="zoom: 50%;" />
<hr>
<h3 id="循环指令">循环指令</h3>
<p>循环可以通过跳转指令来实现 也可以利用loop指令来实现</p>
<h2 id="信息存储">信息存储</h2>
<h3 id="位-字节">位、字节</h3>
<h4 id="位">位</h4>
<h4 id="字节">字节</h4>
<h4 id="机器字长">机器字长</h4>
<h4 id="字节顺序">字节顺序</h4>
<ul>
<li>
<p>大端法：MAC，Internet</p>
<ul>
<li>最高有效字节在最前面</li>
</ul>
</li>
<li>
<p>小端法：X86</p>
<ul>
<li>最低有效字节在最前面</li>
</ul>
<blockquote>
<p>最低有效位：最低有效位（the least significant bit，lsb）是指一个二进制数字中的第0位 （即最低位）</p>
<p>最高有效位：msb</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657516.png" alt="image-20220611093703094" style="zoom:80%;" />
</li>
</ul>
<h4 id="位运算">位运算</h4>
<ol>
<li>与 <code>&amp;</code> 、或 <code>|</code>、非 <code>~</code>、异或 <code>^</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657287.png" alt="image-20220611103319274"></p>
<blockquote>
<p>直接作用于整数类型：long, int, short, char, unsigned</p>
<p>将整数看成字节向量，按每个位来运算</p>
</blockquote>
<ol start="2">
<li><code>&amp;&amp;</code>、<code>||</code>、<code>!</code>：看成整体，返回 <code>0</code>或者是 <code>1</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">!<span class="number">0x41</span> → <span class="number">0x00</span></span><br><span class="line">!<span class="number">0x00</span> → <span class="number">0x01</span></span><br><span class="line">!!<span class="number">0x41</span> → <span class="number">0x01</span></span><br><span class="line"><span class="number">0x69</span> &amp;&amp; <span class="number">0x55</span> → <span class="number">0x01</span></span><br><span class="line"><span class="number">0x69</span> || <span class="number">0x55</span> → <span class="number">0x01</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>位移操作
<ul>
<li>左移: x &lt;&lt; y
<ul>
<li>将 x 左移 y 位 左边的位全都丢弃 在右边填0</li>
</ul>
</li>
<li>右移: x &gt;&gt; y
<ul>
<li>将 x 右移 y 位 右边的位全都丢弃</li>
<li>逻辑移位：左边填0</li>
<li>算术移位：填充符号位</li>
</ul>
</li>
<li>未定义行为 移位数字小于0 或大于字长</li>
</ul>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657062.png" alt="image-20220611104254011" style="zoom:50%;" />
<h3 id="整数">整数</h3>
<h4 id="有符号数与无符号数表示">有符号数与无符号数表示</h4>
<h5 id="整数编码">整数编码</h5>
<p>无符号整数补码表示：</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657068.png" alt="image-20220611104956200" style="zoom:60%;" />
<p>Sign Bit</p>
<ul>
<li>在补码表示中，最高位为符号位
<ul>
<li>0表示非负数</li>
<li>1 表示负数</li>
</ul>
</li>
</ul>
<p>补码与十进制转换</p>
<p>例：8位二进制补码转换</p>
<table>
<thead>
<tr>
<th style="text-align:center">-128</th>
<th>64</th>
<th>32</th>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>125</mn><mo>=</mo><mo>−</mo><mn>128</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-125=-128+2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<h4 id="转换">转换</h4>
<blockquote>
<p>正数：原码与补码相同，符号位为0</p>
<p>负数：将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1</p>
<blockquote>
<p>例：求-5的补码。</p>
<p>-5对应带符号位负数5（10000101）→除符号位外所有位取反（11111010）→加 00000001为 (11111011)</p>
</blockquote>
</blockquote>
<h4 id="扩展与截断">扩展与截断</h4>
<h4 id="加法-乘法-移位">加法、乘法、移位</h4>
<h4 id="总结">总结</h4>
<ul>
<li>加法:
<ul>
<li>无符号/有符号: 正常加法+截位</li>
<li>在位级表示上无区分</li>
</ul>
</li>
<li>乘法:
<ul>
<li>无符号/有符号: 正常乘法法+截位</li>
<li>在位级表示上无区分</li>
</ul>
</li>
<li>除法:
<ul>
<li>讨论了除数为2的整数幂的情况</li>
<li>无符号/有符号: 移位的区别</li>
</ul>
</li>
</ul>
<blockquote>
<p>为什么要用无符号整数</p>
<ul>
<li>当进行整数模运算时</li>
<li>当使用 Bit位来表示集合时</li>
<li>需要节省内存空间时——例如表示0~255的像素分量</li>
<li>…………</li>
</ul>
</blockquote>
<h3 id="浮点数">浮点数</h3>
<h4 id="二进制小数">二进制小数</h4>
<p>小数点右边，每移动一位，基数乘以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span></span></span></span></p>
<p>5.75 = 101.11<sub>2</sub> = 2<sup>2</sup> + 2<sup>0</sup> + 2<sup>-1</sup> + 2<sup>-2</sup></p>
<blockquote>
<p>限制</p>
<ul>
<li>只能精确表示诸如 x/2<sup>k</sup>的数</li>
<li>其他的值只能近似表示</li>
</ul>
</blockquote>
<h4 id="ieeee-浮点数标准">IEEEE 浮点数标准</h4>
<ul>
<li>
<p>数学形式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>s</mi></msup><mi>M</mi><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">(-1)^sM ×2^E
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>符号位s 确定了这个数是负数还是正数，数值0的符号位特殊处理</li>
<li>尾数M（Significand） 是一个二进制小数，通常规定在 范围中[1.0,2.0).</li>
<li>阶码 E （Exponent）表示2的幂</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>IEEE浮点数采用 M x 2E的形式表示（近似表示）</li>
<li>提供了表示一些特殊值（正负无穷，NaN）的方法</li>
<li>只有有限的范围和精度</li>
<li>不遵守普遍的算术属性（例如结合性）</li>
</ul>
</blockquote>
<p>规格化</p>
<h4 id="性质">性质</h4>
<h4 id="舍入与运算">舍入与运算</h4>
<h5 id="舍入">舍入</h5>
<h5 id="加法">加法</h5>
<h5 id="乘法">乘法</h5>
<h4 id="c语言中的浮点数">C语言中的浮点数</h4>
<ul>
<li>
<p>C 提供了两种浮点数表示方式</p>
<ul>
<li>float single precision</li>
<li>double double precision</li>
</ul>
</li>
<li>
<p>转换</p>
<ul>
<li>在 int, float, and double 的转换过程中位级表示会改 变</li>
<li>double/float → int
<ul>
<li>值向零舍入</li>
<li>对于无法表示或超出范围的值没有进行定义</li>
</ul>
</li>
<li>int → double
<ul>
<li>能够保留精确值</li>
</ul>
</li>
<li>int → float
<ul>
<li>数字不会溢出，但可能被舍入</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="程序的机器级表示">程序的机器级表示</h2>
<h3 id="基本">基本</h3>
<h4 id="从-c-代码到目标文件">从 c 代码到目标文件</h4>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657684.png" alt="image-20220610215408779" style="zoom: 50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657459.png" alt="image-20220611152605788" style="zoom:40%;" />
<p>区别在于可执行目标文件已经分配了实际内存地址。</p>
<h4 id="数据传送与寻址">数据传送与寻址</h4>
<h5 id="基本数据类型">基本数据类型</h5>
<ul>
<li>“整数” 1，2，4，8 bytes
<ul>
<li>数据值</li>
<li>地址 (untyped pointers) （地址长度与机器字长相等）</li>
</ul>
</li>
<li>浮点数 4, 8, or 10 bytes
<ul>
<li>单精度（float: 4 bytes）</li>
<li>双精度（double: 8 bytes）</li>
<li>长双精度（long double or extended: 10 bytes）</li>
</ul>
</li>
<li>数组与结构
<ul>
<li>内存中一组连续分配的字节</li>
</ul>
</li>
</ul>
<h5 id="基本操作">基本操作</h5>
<ul>
<li>
<p>对寄存器或内存数据进行操作的运算类指令</p>
</li>
<li>
<p>在内存与寄存器中之间传送数据的传送类指令</p>
<ul>
<li>将数据从内存加载到寄存器中</li>
<li>将寄存器数据保存到内存中</li>
</ul>
</li>
<li>
<p>决定程序走向的 决定程序走向的控制类指令</p>
<ul>
<li>无条件/有条件跳转</li>
<li>分支/循环</li>
</ul>
</li>
</ul>
<h5 id="寄存器">寄存器</h5>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657533.png" alt="image-20220611153355835" style="zoom:40%;" />
<h5 id="传送数据">传送数据</h5>
<ol>
<li>MOV 指令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl Source, Dest </span><br></pre></td></tr></table></figure>
<p>操作数类型</p>
<ul>
<li>Immediate:立即数
<ul>
<li>例: $0x400, $-533</li>
<li>占用 1, 2, or 4 字节</li>
</ul>
</li>
<li>Register: 8个整数寄存器之一 个整数寄存器之一
<ul>
<li>例: %eax, %edx</li>
<li>%esp与%ebp保留作为特殊用途</li>
<li>其他通用寄存器可能会在某些操作时有特定用途</li>
</ul>
</li>
<li>Memory: 内存地址
<ul>
<li>简单例子: (%eax)</li>
<li>有非常多的寻址模式</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657207.png" alt="image-20220611153814868" style="zoom:40%;" />
<ol start="2">
<li>push 与 pop</li>
</ol>
<p>注意栈是向下生长，地址向下递减</p>
<ol start="3">
<li>
<p>内存寻址</p>
<p>如果操作数不在寄存器，就需要到内存中去找到数据存放的地址，然后将数据取到寄存器。</p>
<ul>
<li>寄存器间接寻址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl (%ecx),%eax</span><br></pre></td></tr></table></figure>
<p>寄存器中存放的是内存地址</p>
<ul>
<li>基址变址寻址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl 8(%ebp),%edx</span><br></pre></td></tr></table></figure>
<p>寄存器存放内存的起始地址，常数给出偏移量</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657106.png" alt="image-20220611155058518" style="zoom:50%;" />
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657785.png" alt="image-20220611155141174" style="zoom:50%;" />
<ol start="4">
<li>lea 寻址
<ul>
<li>格式：leal Src, Dest
<ul>
<li>Src: 地址计算表达式</li>
<li>Src 结果保存在 Dest 中</li>
</ul>
</li>
<li>用途：
<ul>
<li>计算内存地址本身（不取内存里的值）</li>
<li>计算诸如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>k</mi><mo>∗</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x + k*y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 表达式的值（k - 1，2，4，8）</li>
</ul>
</li>
</ul>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658676.png" alt="image-20220611155759325" style="zoom: 50%;" />
<h5 id="算术操作">算术操作</h5>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658200.png" alt="image-20220611160025669" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656735.png" alt="image-20220611160042885"></p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658884.png" alt="image-20220611160143661" style="zoom:40%;" />
<blockquote>
<p>注意：加一减一操作，例如对有符号数，对补码运算，对补码的+7+1，变成1000，是补码的-8了。</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658450.png" alt="image-20220611161326163" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658907.png" alt="image-20220611161958820" style="zoom:50%;" />
<h3 id="控制">控制</h3>
<h4 id="条件码">条件码</h4>
<ul>
<li>每个条件码占一个bit
<ul>
<li>CF 最高位产生了进位，无符号操作数的溢出</li>
<li>SF 符号标志，操作结果为负数</li>
<li>ZF 零标志</li>
<li>OF 溢出标志 (有符号数 signed)</li>
</ul>
</li>
<li>例如: addl/addq Src, Dest ↔ t = a+b
<ul>
<li>CF set ，如果t溢出</li>
<li>ZF set ，如果 t == 0 SF</li>
<li>set ，如果 t &lt; 0 (as signed)</li>
<li>OF set，如果有符号数溢出</li>
<li>lea/mov 指令不设置条件码</li>
</ul>
</li>
</ul>
<p>条件码设置</p>
<ol>
<li>
<p>CMP指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmpl Src, Dest	;Dest – Src, 影响标志位</span><br></pre></td></tr></table></figure>
<p>cmpl b,a 等价于计算 a-b，但不改变a与b的值。</p>
<p>CF set 无符号数运算时有进位</p>
<p>ZF set 如果 a == b</p>
<p>SF set 如果 有符号数(a-b)&lt; 0</p>
<p>OF set 如果有符号数运算溢出</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658953.png" alt="image-20220611165832271" style="zoom:50%;" />
<ol start="2">
<li>
<p>TEST 指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testl Src, Dest		;Dest &amp; Src，影响标志位</span><br><span class="line">testq</span><br></pre></td></tr></table></figure>
<p><code>testl b,a</code> 等价于计算a&amp;b（但不改变a或b的值）</p>
<p>ZF set 如果a&amp;b== 0</p>
<p>SF set 如果a&amp;b&lt;0</p>
</li>
<li>
<p>SetX 指令</p>
<p>根据条件码的组合将一个字节设置为0或1。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658612.png" alt="image-20220611170144525" style="zoom:50%;" />
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gt</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Body</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl 12(%ebp),%eax 	# eax = y</span><br><span class="line">cmpl %eax,8(%ebp) 	# Compare x : y</span><br><span class="line">setg %al 			# al = x &gt; y</span><br><span class="line">movzbl %al,%eax 	# Zero rest of %eax</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658415.png" alt="image-20220611170257518" style="zoom:50%;" />
<h4 id="条件分支">条件分支</h4>
<ol>
<li>
<p>跳转指令</p>
<p>jx 指令：根据不同的条件跳转到某条指令处执行</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658850.png" alt="image-20220611170527892" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658555.png" alt="image-20220611185652894" style="zoom:50%;" />
<ol start="2">
<li>
<p>分支跳转：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">val = x&gt;y ? x-y : y-x;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	nt = !Test;</span><br><span class="line">	<span class="keyword">if</span> (nt) <span class="keyword">goto</span> Else;</span><br><span class="line">	val = Then_Expr;</span><br><span class="line">	<span class="keyword">goto</span> Done;</span><br><span class="line">Else:</span><br><span class="line">	val = Else_Expr;</span><br><span class="line">Done;</span><br></pre></td></tr></table></figure>
<ul>
<li>为每一个分支都产生一段代码</li>
<li>根据条件执行合适的代码段</li>
</ul>
</li>
<li>
<p>条件传送：</p>
<ul>
<li>满足条件才传送</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Test) Dest&lt;-Src</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">tval = Then_Expr;</span><br><span class="line">result = Else_Expr;</span><br><span class="line">t = Test;</span><br><span class="line"><span class="keyword">if</span>(t) result = tval;</span><br><span class="line"><span class="keyword">return</span> result;	</span><br></pre></td></tr></table></figure>
<ul>
<li>先计算一个条件操作的两种结果，然后根据条件 选择某一个</li>
<li>优势：能够更好的匹配现代处理器的特性
<ul>
<li>流水线</li>
<li>分支预测</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>避免了跳转指令</p>
<ul>
<li>CPU无需做分支预测， 避免预测错误的代价</li>
<li>流水线效率更高</li>
</ul>
</blockquote>
<h4 id="循环">循环</h4>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658060.png" alt="image-20220611193809310" style="zoom: 67%;" />
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"></p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878" style="zoom:67%;" />
<h4 id="switch">switch</h4>
<p>跳转表：各个代码段的起始地址</p>
<h3 id="过程-函数">过程（函数）</h3>
<p>为什么用栈？</p>
<p>机器用栈来传递<strong>过程参数</strong>、<strong>存储返回信息</strong>、<strong>保存寄存器</strong>用于以后恢复，以 及<strong>本地存储</strong>。而为单个过程分配的那部分栈称为栈帧（stack frame）。</p>
<h4 id="栈帧">栈帧</h4>
<p>每一个函数或过程在执行时，都需要在内存 中分配一个空间来保存运行时数据，这个空间由 于是采用栈的方式进行操作，所以也称为<strong>栈帧</strong>。</p>
<ul>
<li>当前函数或过程的栈顶地址保存在%esp中， 栈底地址保存在<code>%ebp</code>中；</li>
<li>栈是向**“下”**增长的，或者说是向地址<code>0x0</code>处 增加的，因此 <code>%esp</code> 中的值小于或等于%ebp 中的值；</li>
<li>栈帧是内存中一段<strong>连续的</strong>内存空间；</li>
<li>被调用者的栈帧紧挨着调用者的栈帧；</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161702787.png" alt="image-20220611200816982" style="zoom:80%;" />
<p>构造玩传递参数之后准备调用 sum，首先保存一个返回地址</p>
<p>sum栈帧的初始化</p>
<p>保存老的ebp</p>
<blockquote>
<p>调用：从传递参数区取出参数，而不是局部参数区，这样可以有效利用 %ebp + n</p>
</blockquote>
<img src="C:\Users\a1036\Desktop\计算机系统\计算机系统复习.assets\image-20220611203202241.png" alt="image-20220611203202241" style="zoom:50%;" />
<p>ebp上面保存的是调用sum函数的函数的老的 %ebp，和上一个函数的返回地址。</p>
<p>sum栈帧的返回</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703118.png" alt="image-20220611203838637" style="zoom:50%;" />
<ol>
<li>leave ： 把 old ebp 弹回给 ebp，使其恢复到主函数栈帧栈底的位置</li>
<li>return：把返回地址弹给 <code>%eip</code> ，使得主函数能够继续执行调用sum函数之后的指令。</li>
</ol>
<h4 id="嵌套与递归">嵌套与递归</h4>
<p>嵌套</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703485.png" alt="image-20220611204452223" style="zoom:50%;" />
<p>递归</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703288.png" alt="image-20220611204531754" style="zoom:50%;" />
<h4 id="swap-函数">swap 函数</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *xp,<span class="type">int</span> *yp)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t0 = *xp;</span><br><span class="line"><span class="type">int</span> t1 = *yp;</span><br><span class="line">*xp = t1;</span><br><span class="line">*yp = t0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl 8(%ebp), %edx # edx = xp</span><br><span class="line">movl 12(%ebp),%ecx # ecx = yp</span><br><span class="line">movl (%edx), %ebx # ebx = *xp(t0)</span><br><span class="line">movl (%ecx), %eax # eax = *yp(t1)</span><br><span class="line">movl %eax, (%edx) # *xp = t1</span><br><span class="line">movl %ebx, (%ecx) # *yp = t0</span><br></pre></td></tr></table></figure>
<h4 id="小结">小结</h4>
<ul>
<li>过程及函数调用， 都是通过 栈来实现</li>
<li>每次调用时的参数按照 固定顺序存放在栈中； 过程/函数内部的变量 存放顺序 与编译器有关</li>
<li>过程/函数执行完毕后， 会释放其所占用的栈空间 。</li>
<li>对返回地址 及保存的 ebp的修改会导致程序 错误和崩溃，常被用来 作为黑客攻击手段。</li>
</ul>
<h3 id="数据">数据</h3>
<h4 id="数组">数组</h4>
<p>基本原则：在内存中连续分配</p>
<p>连续声明的数组内存地址一般也是连续分配</p>
<p>访问：</p>
<blockquote>
<p>声明 “zip_dig cmu” 等价于“int cmu[5]”</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_digit</span></span><br><span class="line"><span class="params">(zip_dig z, <span class="type">int</span> dig)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> z[dig];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># %edx = z</span><br><span class="line"># %eax = dig</span><br><span class="line">movl (%edx,%eax,4),%eax # z[dig]</span><br></pre></td></tr></table></figure>
<ul>
<li>寄存器 %edx 中存储 数组的起始地址</li>
<li>寄存器 %eax中保存了 数组元素下标值</li>
<li>需要访问的数据地址为 4*%eax + %edx</li>
<li>内存寻址方式： (%edx,%eax,4)</li>
</ul>
<hr>
<h5 id="循环访问数组：">循环访问数组：</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">zincr</span><span class="params">(zip_dig z)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ZLEN; i++)	#数组长度是<span class="number">5</span></span><br><span class="line">		z[i]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	# edx = z</span><br><span class="line">	movl $0, %eax 			# %eax = i</span><br><span class="line">.L4: 						# loop:</span><br><span class="line">	addl $1, (%edx,%eax,4) 	# z[i]++</span><br><span class="line">	addl $1, %eax 			# i++</span><br><span class="line">	cmpl $5, %eax 			# i:5 数组长度为5</span><br><span class="line">	jne .L4 				# if !=, goto loop</span><br></pre></td></tr></table></figure>
<hr>
<p>二维数组</p>
<blockquote>
<p>“zip_dig pgh[4]” 等价于 “<code>int pgh [4][5]</code>”</p>
</blockquote>
<p>变量 pgh: 含有四个元素的数组，每个元素都是一个包含五 个整数的数组——值得注意的是，这些元素在内存中是连 续分配的</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703553.png" alt="image-20220611210941321" style="zoom:50%;" />
<h4 id="结构">结构</h4>
<p>C语言中的结构</p>
<ul>
<li>内存连续分配</li>
<li>通过结构的名称与成员名称来访问数据</li>
<li>结构中可能包括不同数据类型的成员</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703693.png" alt="image-20220611211044595" style="zoom: 67%;" />
<hr>
<p>访问：</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703957.png" alt="image-20220611211139892" style="zoom:50%;" />
<hr>
<p>结构与对齐</p>
<p>数据对齐 ：要求数据地址必须是 K的整数倍（K一般为4或8）</p>
<p>空字节填充</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703428.png" alt="image-20220611211634037" style="zoom:50%;" />
<h4 id="联合">联合</h4>
<p>根据最大的元素来分配内存空间</p>
<h2 id="存储器层次结构">存储器层次结构</h2>
<h3 id="存储技术">存储技术</h3>
<h4 id="随机存储器ram">随机存储器RAM</h4>
<p>SRAM</p>
<p>DRAM</p>
<h4 id="磁盘">磁盘</h4>
<h4 id="固态硬盘ssd">固态硬盘SSD</h4>
<h3 id="局部性">局部性</h3>
<blockquote>
<p>缓解了CPU-主存执行速度差异</p>
</blockquote>
<p>局部性原理: 一个编写良好的程序倾向于引用最近引用过的数据本身，或 者引用的数据项邻近于其最近引用过的数据项</p>
<ul>
<li>时间局部性(Temporal locality):
<ul>
<li>最近被引用过的数据很可能很快会被多次引用</li>
</ul>
</li>
<li>空间局部性(Spatial locality):
<ul>
<li>一个存储位置被引用了一次，很可能很快其 附近存储位置也会被引用</li>
</ul>
</li>
</ul>
<h3 id="存储器的层次结构">存储器的层次结构</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703157.png" alt="image-20220611213500557" style="zoom:50%;" />
<h4 id="高速缓存">高速缓存</h4>
<ul>
<li><strong>高速缓存Cache</strong>: 一个小而快的存储设备，它作为存储在更大、更慢的设备中的 数据对象的缓冲区域</li>
</ul>
<p>小结：</p>
<ul>
<li>CPU与主存及大容量 存储设备之间的速度 差异持续扩大</li>
<li>编写良好的程序应 具有良好的局部性</li>
<li>存储层次正是应用 局部性原理，基于缓 存，以缩小前述差异</li>
</ul>
<h3 id="高速缓存">高速缓存</h3>
<h4 id="什么是高速缓冲器">什么是高速缓冲器</h4>
<h4 id="高速缓存的结构与读写">高速缓存的结构与读写</h4>
<h4 id="高速缓存与性能">高速缓存与性能</h4>
<p>………………</p>
]]></content>
      <tags>
        <tag>计算机系统</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>CoAtNet: Marrying Convolution and Attention for All Data Size</title>
    <url>/2022/02/14/CoAtNet-Marrying-Convolution-and-Attention-for-All-Data-Size/</url>
    <content><![CDATA[<span id="more"></span>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206171052547.png" alt="image-20220617105209506" style="zoom:80%;" />
<blockquote>
<p>[<a href="https://arxiv.org/abs/2106.04803">2106.04803] CoAtNet: Marrying Convolution and Attention for All Data Sizes (arxiv.org)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>transformer</tag>
        <tag>卷积</tag>
        <tag>混合模型</tag>
      </tags>
  </entry>
  <entry>
    <title>2022数据结构与算法春复习</title>
    <url>/2022/06/13/2022%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%98%A5%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1>算法分析</h1>
<p>渐进符号</p>
<p>算法效率的主要指标是基本操作次数的增长次数</p>
<p>==<em><strong>O</strong></em>（读“O”）：上界==</p>
<p><em><strong>Ω</strong></em>（读”omega”）：下界</p>
<p>==<em><strong>Θ</strong></em>（读”theta”）：近似==</p>
<blockquote>
<p>主要：最差和平均</p>
</blockquote>
<span id="more"></span>
<p>递归函数：递推公式</p>
<p>例：二分检索可用递归算法实现，其时间代价的计算可 以写出递推公式</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mtext>（</mtext><mi>n</mi><mtext>）</mtext><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mo>…</mo><mo>…</mo><mo>=</mo><mi>T</mi><mtext>（</mtext><mn>1</mn><mtext>）</mtext><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">T（n）=T(n/2)+1 =T(n/4)+1+1 =…… =T（1）+logn=logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span></p>
<h1>数据结构</h1>
<h2 id="线性结构">线性结构</h2>
<h3 id="线性表">线性表</h3>
<p>略</p>
<h3 id="栈和队列">栈和队列</h3>
<h4 id="栈">栈</h4>
<p>后进先出</p>
<p>主要操作</p>
<ul>
<li>入栈(push) 、</li>
<li>出栈(pop)</li>
<li>取栈顶元素(topValue)</li>
<li>判栈空(isEmpty)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> <span class="title class_">AStack</span> :<span class="keyword">public</span> Stack&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">		<span class="type">int</span> maxsize; </span><br><span class="line">		<span class="type">int</span> top; </span><br><span class="line">		E *listarray; </span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">AStack</span>(<span class="type">int</span> size =DefaultListSize) &#123;</span><br><span class="line">            maxsize =size; top =<span class="number">0</span>; listarray =<span class="keyword">new</span> E [size]; </span><br><span class="line">        &#125;</span><br><span class="line">		~<span class="built_in">AStack</span>() &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] listarray; </span><br><span class="line">        &#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            top = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> top;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> E&amp; it)</span></span>&#123; <span class="comment">//压栈 </span></span><br><span class="line">            <span class="built_in">Assert</span> (top!=maxsize, “Stack is full”);<span class="comment">//判断是否栈满</span></span><br><span class="line">			listarray[top++] =it;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;				<span class="comment">//弹栈</span></span><br><span class="line">			<span class="built_in">Assert</span> (top!=<span class="number">0</span>, “Stack is empty”);<span class="comment">//判断是否栈空</span></span><br><span class="line">			<span class="keyword">return</span> listarray[--top];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">Const E&amp; <span class="title">topValue</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="comment">//取栈顶元素</span></span><br><span class="line">            <span class="built_in">Assert</span> (top!=<span class="number">0</span>, “Stack is empty”);</span><br><span class="line">			<span class="keyword">return</span> listarray[top<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>顺序栈和链式栈的比较:</p>
<ul>
<li>操作时间都是常数时间</li>
<li>空间开销类似一般线性表
<ul>
<li>顺序栈
<ul>
<li>初始化时分配了一个固定长度的空间</li>
<li>当栈不够满时，有空间浪费</li>
</ul>
</li>
<li>链式栈
<ul>
<li>长度可变，空间按需分配</li>
<li>每个元素的链接域带来结构性开销</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>数制转换</li>
</ul>
<p>例如：（1348)<sub>10</sub> = (2504)<sub>8</sub> ，其运算过 程如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">conversion</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,N);</span><br><span class="line">	<span class="keyword">while</span> (N) &#123;</span><br><span class="line">		<span class="built_in">Push</span>(S, N % <span class="number">8</span>);</span><br><span class="line">		N = N/<span class="number">8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line">		<span class="built_in">Pop</span>(S,e);</span><br><span class="line">		<span class="built_in">printf</span> ( <span class="string">&quot;%d&quot;</span>, e );</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="comment">// conversion</span></span><br></pre></td></tr></table></figure>
<ul>
<li>括号匹配</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）凡出现左括弧，则进栈； </span><br><span class="line">2）凡出现右括弧，首先检查栈是否空 </span><br><span class="line">	若栈空，则表明该“右括弧”多余， </span><br><span class="line">		否则和栈顶元素比较， </span><br><span class="line">	若相匹配，则“左括弧出栈” ， </span><br><span class="line">		否则表明不匹配。 </span><br><span class="line">3）表达式检验结束时， </span><br><span class="line">	若栈空，则表明表达式中匹配正确， </span><br><span class="line">		否则表明“左括弧”有余。</span><br></pre></td></tr></table></figure>
<h4 id="队列">队列</h4>
<p>只允许在一端插入，在另一端删除的线性表</p>
<p>允许插入一端称为队尾(rear)，另一端称为队首 (front)</p>
<p>先进先出 (FIFO)</p>
<p>主要操作</p>
<ul>
<li>入队(enqueue) 、</li>
<li>出队(dequeue)</li>
<li>取队首元素(frontValue)</li>
</ul>
<p>队列实现：</p>
<ol>
<li>
<p>顺序队列</p>
<p>front：指向队头</p>
<p>rear：指向队尾</p>
<blockquote>
<p>初值：front = rear = -1</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">front==rear		#空队列条件 </span><br><span class="line"></span><br><span class="line">sq[++rear]=x; 	#入队列</span><br><span class="line"></span><br><span class="line">x=sq[++front];	#出队列</span><br></pre></td></tr></table></figure>
<p>问题：</p>
<p>设数组维数为M，则：</p>
<ul>
<li>当 <code>front=-1,rear=M-1 </code>时，再有元素入队发生溢出——<strong>真溢出</strong></li>
<li>当 <code>front≠-1,rear=M-1</code> 时，再有元素入队发生溢出——<strong>假溢出</strong></li>
</ul>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604222.png" alt="image-20220613104141676" style="zoom:67%;" />
<ol start="2">
<li>
<p>顺序循环队列</p>
<p>基本思想：</p>
<p>把队列设想成环形，让sq[0]接在sq[M-1]之后，若 rear+1==M,则令rear=0;</p>
<ul>
<li>实现：利用“模”运算</li>
<li>入队： rear=(rear+1)%M; sq[rear]=x;</li>
<li>出队： front=(front+1)%M; x=sq[front];</li>
<li>队满、队空判定条件
<ul>
<li>队空：<code>front==rear</code></li>
<li>队满：<code>front==rear</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>新问题：二义性，无法判断；</p>
</blockquote>
<p>​	解决方法：少用一个元素空间：</p>
<ul>
<li>队空：<code>front == rear</code></li>
<li>队满：<code>(rear+1)%M == front</code></li>
</ul>
</li>
<li>
<p>链式队列</p>
<p>链表：设队首、队尾指针<code>front</code> 和 <code>rear</code>, <code>front</code> 指向头结点，<code>rear</code>  指向队尾</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> <span class="title class_">LQueue</span>:<span class="keyword">public</span> Queue&lt;E&gt; &#123; </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">		Link&lt;E&gt; *front; </span><br><span class="line">		Link&lt;E&gt; *rear;</span><br><span class="line">		<span class="type">int</span> size; </span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">		<span class="built_in">LQueue</span>(<span class="type">int</span> sz=DefaultListSize) &#123; </span><br><span class="line">            front = rear = <span class="keyword">new</span> <span class="built_in">Link</span>&lt;E&gt;(), size=<span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">		~<span class="built_in">LQueue</span>() &#123; </span><br><span class="line">            <span class="built_in">clear</span>(); <span class="keyword">delete</span> front;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="comment">//清空队列</span></span><br><span class="line">			<span class="keyword">while</span> (front -&gt;next!= <span class="literal">NULL</span>) &#123; </span><br><span class="line">				rear = front;front = front-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> rear; </span><br><span class="line">            &#125;</span><br><span class="line">			rear = front;size=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">const</span> E&amp; it)</span> </span>&#123; <span class="comment">//入队列</span></span><br><span class="line">			rear-&gt;next=<span class="keyword">new</span> <span class="built_in">Link</span>&lt;E&gt;(it, <span class="literal">NULL</span>); </span><br><span class="line">			rear = rear-&gt;next; </span><br><span class="line">			size++;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="function">E <span class="title">dequeue</span><span class="params">()</span> </span>&#123; <span class="comment">//带头结点的链队列的删除操作</span></span><br><span class="line">			<span class="built_in">Assert</span> (size!=<span class="number">0</span>, “Queue is empty”);</span><br><span class="line">			E it=front-&gt;next-&gt;element;</span><br><span class="line">			Link&lt;E&gt; *ltemp=front-&gt;next;<span class="comment">//记录删除结点位置</span></span><br><span class="line">			front -&gt;next= ltemp-&gt;next; </span><br><span class="line">			<span class="keyword">if</span> (rear == ltemp) rear = front;<span class="comment">//删除队尾结点</span></span><br><span class="line">			<span class="keyword">delete</span> ltemp; </span><br><span class="line">			size--; </span><br><span class="line">			<span class="keyword">return</span> it; </span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="function"><span class="type">const</span> E&amp; <span class="title">frontValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">			<span class="built_in">Assert</span> (size!=<span class="number">0</span>, “Queue is empty”);</span><br><span class="line">			<span class="keyword">return</span> front-&gt;next-&gt;element;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>应用：例题——识别图元</p>
<h2 id="树">树</h2>
<h3 id="二叉树">二叉树</h3>
<p>二叉树定义：</p>
<ul>
<li>递归定义:
<ul>
<li>二叉树由结点的有限集合组成，这个集合或者为空，或 者由一个根结点及两棵不相交的，分别称作这个根的<u>左子树</u>和<u>右子树</u>的二叉树组成。</li>
</ul>
</li>
<li>特点：
<ul>
<li>每个结点至多有二棵子树。</li>
<li>二叉树的子树有左、右之分，且其次序不能任意颠倒。</li>
</ul>
</li>
</ul>
<p>树的定义：</p>
<p>数据对象 D： D是具有相同特性的数据元素的集合。</p>
<p>数据关系 R：</p>
<ul>
<li>若D为空集，则称为空树 。 否则:
<ol>
<li>在D中存在唯一的称为根的数据元素root；</li>
<li>当n&gt;1时，其余结点可分为m (m&gt;0)个互==不相交==的有限集T1 , T2 , …, Tm，其中每一棵子集本身又是一棵符合本定义的树， 称为根root的子树。</li>
</ol>
</li>
</ul>
<blockquote>
<p>森林——一棵或者更多棵树的集合</p>
</blockquote>
<p>术语：</p>
<ul>
<li>结点:数据元素+若干指向子树的分支
<ul>
<li>没有非空子树的结点称为<strong>叶结点</strong>(leaf)或终端结 点。</li>
<li>至少有一个非空子树的结点称为 <strong>分支结点</strong> 或 <strong>内部结点</strong>(internal node)。</li>
</ul>
</li>
<li>结点的<strong>度</strong>：树结点的子结点数。
<ul>
<li>叶节点的度等于0，内部节点的度&gt;0.</li>
<li>树的度：树中所有结点的度的最大值</li>
</ul>
</li>
<li>从一个结点到它的结点都有边(edge)相连，这个结点称为它的子结点的父结点(parent)。</li>
<li><strong>路径</strong>：如果一棵树的一串结点n1 , n2 , … , nk有如下关系: 结点ni是 ni+1的父结点(1≤i&lt;k), 就把n1, n2, … , nk称为一条由n1至nk的<strong>路径</strong>(path)。
<ul>
<li><strong>路径长度</strong>(length)是路径上边的数目。</li>
</ul>
</li>
<li><strong>子孙</strong>：如果有一条路径从结点R至结点M, 那么R就称为M的祖先 (ancestor), 而M称为R的子孙(descendant)。</li>
<li><strong>深度</strong>：结点M的深度(depth)就是从根结点到M的路径的长度。
<ul>
<li>树的深度：树中叶子结点所在的最大层次</li>
</ul>
</li>
<li><strong>高度</strong>：树的高度(height)等于最深的结点的深度+1。任何 深度为d的结点的层数(level)都为d。根结点深度 为0，层数也为0。（严版根结点深度和层次为1）</li>
<li><strong>结点的层次</strong>：假设根结点的层次为0，第 <code>l</code> 层的 结点的子树根结点的层次为 <code>l+1</code></li>
</ul>
<p>二叉树分类：</p>
<ul>
<li>
<p>满二叉树：</p>
<p>​	如果一棵二叉树的任何结点，或者是树叶，或者恰有 两个非空子女的分支结点，则此二叉树称为满二叉树。</p>
</li>
<li>
<p>完全二叉树</p>
<ul>
<li>若一棵二叉树最多只有最下面的两层结点度数可以小 于2，并且最下面一层的结点都集中在该层最左边的若干 位置上，则称此二叉树为完全二叉树。</li>
<li>形状要求：
<ul>
<li>自根结点起每一层从左至右地填充。</li>
<li>一棵完全二叉树（高度为d）除了最后一层（d-1层）外，每 一层都是满的。</li>
<li>底层叶结点集中在左边的若干位置上。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>二叉树性质：</p>
<ol>
<li>二叉树的第i层（根为第0层）最多有2<sup>i</sup>个结点。</li>
<li>高度为k的二叉树至多有2<sup>k-1</sup>个结点。</li>
<li>具有 n 个结点的完全二叉树的高度为 是∟log2n┘ +1 ​。</li>
<li>任何一棵二叉树，度为0的结点比度为2的结点多一个。</li>
<li>若对含 n 个结点的完全二叉树从上到下、从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：
<ol>
<li>若 i=1，则该结点是二叉树的根，无双亲， 否则，编号为 i/2(向下取整) 的结点为其双亲结点；</li>
<li>若 2i&gt;n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；</li>
<li>若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。</li>
</ol>
</li>
<li><strong>满二叉树定理</strong>：非空满二叉树树叶数等于其分支结点数加1。
<ul>
<li><strong>满二叉树定理的推论</strong>: 一棵非空二叉树 空子树的数目等于其结点数目加1。</li>
</ul>
</li>
</ol>
<h4 id="遍历">遍历</h4>
<ul>
<li>前序遍历(preorder traversal)：
<ul>
<li>访问根结点；前序 遍历左子树;前序遍历右子树。（DLR)</li>
</ul>
</li>
<li>中序遍历(inorder traversal)：
<ul>
<li>中序遍历左子树;访 问根结点;中序遍历右子树。(LDR)</li>
</ul>
</li>
<li>后序遍历(postorder traversal)：
<ul>
<li>后序遍历左子树; 后序遍历右子树;访问根结点。(LRD)</li>
</ul>
</li>
<li>层次遍历：
<ul>
<li>对二叉树自上而下逐层遍历，同层结点 按照从左向右循序遍历</li>
</ul>
</li>
</ul>
<p>前序遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(BinNode&lt;E&gt;* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">// Empty subtree, do nothing</span></span><br><span class="line">	<span class="built_in">visit</span>(root); <span class="comment">// Perform desired action</span></span><br><span class="line">	<span class="built_in">preorder</span>(root-&gt;<span class="built_in">left</span>());</span><br><span class="line">	<span class="built_in">preorder</span>(root-&gt;<span class="built_in">right</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现">实现</h4>
<p>二叉树ADT</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Elem</span>&gt; <span class="keyword">class</span> <span class="title class_">BinNode</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">BinNode</span>() &#123;&#125; <span class="comment">// Base destructor</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> Elem&amp; <span class="title">val</span><span class="params">( )</span> </span>= <span class="number">0</span> ;<span class="comment">//取元素值</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setVal</span> <span class="params">(<span class="type">const</span> Elem&amp;)</span> </span>= <span class="number">0</span>;<span class="comment">//设置元素值</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> BinNode* <span class="title">left</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>; <span class="comment">//返回左孩子指针</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> BinNode* <span class="title">right</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">//返回右孩子指针</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setLeft</span><span class="params">(BinNode* ）= <span class="number">0</span>;<span class="comment">//设置左孩子指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">virtual</span> <span class="type">void</span> setRight(BinNode* ) = <span class="number">0</span>;<span class="comment">//设置右孩子指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">virtual</span> <span class="type">bool</span> isLeaf() = <span class="number">0</span>;<span class="comment">//叶节点标识</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;;</span></span></span><br></pre></td></tr></table></figure>
<p>使用指针实现二叉树： 二叉链表(最常用)（BSTNode.h二叉查找树结点的头文件)</p>
<blockquote>
<p>好处：运算方便;问题：空指针太多</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BinNode.h&quot;</span></span></span><br><span class="line"><span class="comment">// Simple binary tree node implementation</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTNode</span> : <span class="keyword">public</span> BinNode&lt;E&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		Key k; 		<span class="comment">// The node&#x27;s key</span></span><br><span class="line">		E it; 		<span class="comment">// The node&#x27;s value</span></span><br><span class="line">		BSTNode* lc;	<span class="comment">// Pointer to left child</span></span><br><span class="line">		BSTNode* rc; 	<span class="comment">// Pointer to right child</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Two constructors -- with and without initial values</span></span><br><span class="line">		<span class="built_in">BSTNode</span>() &#123; lc = rc = <span class="literal">NULL</span>; &#125;</span><br><span class="line">		<span class="built_in">BSTNode</span>(Key K, E e, BSTNode* l =<span class="literal">NULL</span>, BSTNode* r =<span class="literal">NULL</span>)&#123; </span><br><span class="line">            k = K; it = e; lc = l; rc = r; </span><br><span class="line">        &#125;</span><br><span class="line">		~<span class="built_in">BSTNode</span>() &#123;&#125; 	<span class="comment">// Destructor</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Functions to set and return the value and key</span></span><br><span class="line">		<span class="function">E&amp; <span class="title">element</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> it; &#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setElement</span><span class="params">(<span class="type">const</span> E&amp; e)</span> </span>&#123; it = e; &#125;</span><br><span class="line">		<span class="function">Key&amp; <span class="title">key</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> k; &#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setKey</span><span class="params">(<span class="type">const</span> Key&amp; K)</span> </span>&#123; k = K; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Functions to set and return the children</span></span><br><span class="line">		<span class="function"><span class="keyword">inline</span> BSTNode* <span class="title">left</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lc; &#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setLeft</span><span class="params">(BinNode&lt;E&gt;* b)</span> </span>&#123; lc = (BSTNode*)b; &#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> BSTNode* <span class="title">right</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> rc; &#125;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setRight</span><span class="params">(BinNode&lt;E&gt;* b)</span> </span>&#123; rc = (BSTNode*)b; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Return true if it is a leaf, false otherwise</span></span><br><span class="line">		<span class="function"><span class="type">bool</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (lc == <span class="literal">NULL</span>) &amp;&amp; (rc == <span class="literal">NULL</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>三重链表的变化：加了父指针 • 在某些经常要回溯到父结点的应用中很有效。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTNode</span>:<span class="keyword">public</span> BinNode&lt;E&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		Key k;</span><br><span class="line">		E it;</span><br><span class="line">		BSTNode* lc;</span><br><span class="line">		BSTNode* rc;</span><br><span class="line">		BSTNode* father;<span class="comment">//父指针</span></span><br><span class="line">…&#125;;</span><br></pre></td></tr></table></figure>
<p>使用数组实现完全二叉树</p>
<ul>
<li>在完全二叉树中，父子之间的关系可以通过索引的数学关系计算出来（参见二叉树的性质5）</li>
<li>完全二叉树的顺序存储，按照二叉树的层次遍历次序存储在一个数组中： ABCDEFGHIJKL</li>
<li>简单，省空间</li>
</ul>
<p>非完全二叉树可通过将空指针置空值后转换为完全 二叉树存储 （补全法）</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604293.png" alt="image-20220613194657772" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604851.png" alt="image-20220613194724509" style="zoom:50%;" />
<p>公式中r表示结点的索引， n表示二叉树结点总数。</p>
<p>Parent® =  <img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220613194851326.png" alt="image-20220613194851326" style="zoom: 33%;" />，当r!=0时。</p>
<p>Leftchild® =2r +1，当2r+1&lt;n时。</p>
<p>Rightchild® = 2r+ 2 ，当2r+2 &lt; n 时。</p>
<p>Leftsibling® =r-1，当r为偶数且0&lt;=r&lt;=n-1。</p>
<p>Rightsibling® =r+1，当r为奇数且r+1&lt;n。</p>
<h3 id="bst">BST</h3>
<p><strong>定义</strong>：二叉检索树或者为空, 或者是满足下列条件的非空二叉 树:</p>
<ul>
<li>若它的左子树非空, 则左子树上所有结点的值均小于根结点的值;</li>
<li>若它的右子树非空, 则右子树上所有结点的值均大于或等于根结点 的值;</li>
<li>左右子树本身又各是一棵二叉检索树。</li>
</ul>
<p><strong>性质</strong>: 按照<strong>中序遍历</strong>将各结点打印出来，将得到按照<strong>由小到大</strong>的排列。</p>
<blockquote>
<p>提示：有序性是BST的显著特征，对它的插入或删除等操作均 需维持其有序性。（完全有序）</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604039.png" alt="image-20220613195324252" style="zoom: 50%;" />
<p><strong>二叉检索树的效率就在于只需检索二个子树之一。</strong></p>
<ul>
<li>从根结点开始，在二叉检索树中检索值K。如果根结点储 存的值为K，则检索结束。</li>
<li>如果K小于根结点的值，则只需检索左子树</li>
<li>如果K大于根结点的值,就只检索右子树</li>
<li>这个过程一直持续到K被找到或者我们遇上了一个树叶。</li>
<li>如果遇上树叶仍没有发现K，那么K就不在该二叉检索树 中。</li>
</ul>
<p><strong>分析：检索效率与二叉检索树的高度有关</strong></p>
<p><strong>插入</strong></p>
<p><strong>删除</strong></p>
<p>从二叉检索树中删除一个任意的结点R，首先必须找到R， 接着将它从二叉树中删除掉。</p>
<p>分情况考虑：</p>
<ol>
<li>
<p>如果R是一个叶结点(没有儿子), 那么只要将R的父结点指 向它的指针改为NULL就可以了。</p>
</li>
<li>
<p>如果R是一个分支结点, 我们就不能简单地删除这个结点,  因为这样做会破坏树的连通性。</p>
<ul>
<li>如果R只有一个儿子, 就将R的父结点指向它的指针改为指向R 的子结点就可以了。</li>
<li>如果R有两个儿子, 为了保持二叉检索树的性质, 可以用R的中序后继结点来<strong>代替它</strong>。该结点应该是其右子树中值最小的结 点（<strong>在BST中是其右子树中最左的结点</strong>）。</li>
</ul>
<blockquote>
<p>删除 37</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604070.png" alt="image-20220613200724241" style="zoom:50%;" />
</blockquote>
</li>
</ol>
<p><strong>查找二叉检索树中最小值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get the minimum value from the BST, 返回指向 BST最小值结点的指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line">BSTNode&lt;Key, E&gt;* BST&lt;Key, E&gt;::</span><br><span class="line"><span class="built_in">getmin</span>(BSTNode&lt;Key, E&gt;* rt) &#123;</span><br><span class="line">	<span class="keyword">if</span> (rt-&gt;<span class="built_in">left</span>() == <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">//左子树为空时，BST中最小值在根结点</span></span><br><span class="line">	<span class="keyword">return</span> rt;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getmin</span>(rt-&gt;<span class="built_in">left</span>());</span><br><span class="line"><span class="comment">//分析：左子树不为空时，BST中最小值在左子树的最左的结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>删除子树中最小值图示</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Delete the minimum value from the BST, returning the revised BST</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line">BSTNode&lt;Key, E&gt;* BST&lt;Key, E&gt;::</span><br><span class="line"><span class="built_in">deletemin</span>(BSTNode&lt;Key, E&gt;* rt) &#123;</span><br><span class="line">	<span class="keyword">if</span> (rt-&gt;<span class="built_in">left</span>() == <span class="literal">NULL</span>) 	<span class="comment">// Found min</span></span><br><span class="line">		<span class="keyword">return</span> rt-&gt;<span class="built_in">right</span>();		<span class="comment">//最小值在根结点</span></span><br><span class="line">	<span class="keyword">else</span> &#123; 						<span class="comment">// Continue left</span></span><br><span class="line">	rt-&gt;<span class="built_in">setLeft</span>(<span class="built_in">deletemin</span>(rt-&gt;<span class="built_in">left</span>()));</span><br><span class="line"><span class="comment">//左子树不为空时，BST中最小值在左子树的最左的结点</span></span><br><span class="line">	<span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604757.png" alt="image-20220613201132829" style="zoom:50%;" />
<h4 id="avl">AVL</h4>
<h3 id="堆树">堆树</h3>
<ul>
<li>堆的特性
<ol>
<li>堆是一棵完全二叉树，因此可用数组表示完全二叉树的 方法来表示堆；</li>
<li>堆是局部有序的（不同于BST），结点的值与其子结点 的值之间存在某种关系，分为最小堆和最大堆两种。</li>
</ol>
</li>
<li>最大堆：根结点存储着该树所有结点中的 最大值。（对每棵子树也如此）</li>
<li>最小堆：根结点存储 了该树所有结点的最小值。（对每棵子树也如此）</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604089.png" alt="image-20220613204957315" style="zoom:50%;" />
<p>建堆：不断跟左右孩子中值最大的那个交换位置，直至找到合适的位置或 者已经下推到叶 子为止</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Heap class</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Comp&gt; <span class="keyword">class</span> <span class="title class_">heap</span> &#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		E* Heap; <span class="comment">// Pointer to the heap array</span></span><br><span class="line">		<span class="type">int</span> maxsize; <span class="comment">// Maximum size of the heap</span></span><br><span class="line">		<span class="type">int</span> n; <span class="comment">// Number of elements now in the heap</span></span><br><span class="line"><span class="comment">// Helper function to put element in its correct place</span></span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">siftdown</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;<span class="comment">//下推</span></span><br><span class="line">			<span class="keyword">while</span> (!<span class="built_in">isLeaf</span>(pos)) &#123; <span class="comment">// Stop if pos is a leaf</span></span><br><span class="line">				<span class="type">int</span> j = <span class="built_in">leftchild</span>(pos); </span><br><span class="line">                <span class="type">int</span> rc = <span class="built_in">rightchild</span>(pos);</span><br><span class="line">				<span class="keyword">if</span> ((rc &lt; n) &amp;&amp; Comp::<span class="built_in">prior</span>(Heap[rc], Heap[j]))</span><br><span class="line">					j = rc; <span class="comment">// Set j to greater child&#x27;s value</span></span><br><span class="line">				<span class="keyword">if</span> (Comp::<span class="built_in">prior</span>(Heap[pos], Heap[j])) <span class="keyword">return</span>; <span class="comment">// 找到合适位置</span></span><br><span class="line">				<span class="built_in">swap</span>(Heap, pos, j);</span><br><span class="line">				pos = j; <span class="comment">// 下移下推元素的位置</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>downadjust 算法效率：$$O(n)$$</p>
<p>堆有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span> 层深，插入、删除普通元素、删除最大元素的平均算法代价均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<h3 id="huffman编码">Huffman编码</h3>
<p>构建：根据权值，每次选取最小的两个，合并后重新排序</p>
<h2 id="图">图</h2>
<h3 id="图的储存遍历">图的储存遍历</h3>
<h5 id="邻接矩阵">邻接矩阵</h5>
<h5 id="邻接链表">邻接链表</h5>
<h5 id="深度优先遍历：">深度优先遍历：</h5>
<blockquote>
<p>非递归：用栈，回溯思想。</p>
<p>递归方法其实用的也是栈。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Depth first search</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph* G, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">PreVisit</span>(G, v); <span class="comment">//执行适当动作</span></span><br><span class="line">	G-&gt;<span class="built_in">setMark</span>(v, VISITED);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line">		<span class="keyword">if</span> (G-&gt;<span class="built_in">getMark</span>(w) == UNVISITED) </span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">	<span class="built_in">PostVisit</span>(G, v); <span class="comment">//执行适当动作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DFS的算法分析</p>
<ul>
<li>因为每个顶点要访问一次，每条边在有向图中最多访问一次， 在无向图中最多访问两次；</li>
<li>Cost: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">Θ(|V| + |E|).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></li>
</ul>
<h5 id="广度优先遍历：">广度优先遍历：</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph* G, <span class="type">int</span> start,Queue&lt;<span class="type">int</span>&gt;*Q)</span> </span>&#123;<span class="comment">//start为出发的顶点</span></span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	Q-&gt;<span class="built_in">enqueue</span>(start); 			<span class="comment">// Initialize Q</span></span><br><span class="line">	G-&gt;<span class="built_in">setMark</span>(start, VISITED);</span><br><span class="line">	<span class="keyword">while</span> (Q-&gt;<span class="built_in">length</span>() != <span class="number">0</span>) &#123; 	<span class="comment">// Process Q</span></span><br><span class="line">		v=Q-&gt;<span class="built_in">dequeue</span>(); <span class="built_in">PreVisit</span>(G, v); 	<span class="comment">// Take action</span></span><br><span class="line">		<span class="keyword">for</span>(w=G-&gt;<span class="built_in">first</span>(v);w&lt;G-&gt;<span class="built_in">n</span>();w=G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;<span class="built_in">getMark</span>(w) == UNVISITED) &#123;</span><br><span class="line">                G-&gt;<span class="built_in">setMark</span>(w, VISITED); </span><br><span class="line">                Q-&gt;<span class="built_in">enqueue</span>(w); </span><br><span class="line">            &#125;</span><br><span class="line">		PostVisit（G，v）; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BFS的算法分析</p>
<p>Cost: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">Θ(|V| + |E|).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></p>
<h3 id="拓扑排序">拓扑排序</h3>
<blockquote>
<p>有向无环图：</p>
<p>如果一个有向图的任意顶点都无法通过一些有向边回到自身，那么称这个有向图为有向无环图</p>
</blockquote>
<p>拓扑排序：</p>
<ol>
<li>
<p>定义一个队列Q，找到<strong>一个</strong>入度为0的结点加入队列：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>)</span><br><span class="line">    q.<span class="built_in">push</span>(i);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>取队首节点，输出。然后删去所有从它出发的边，并令这些边到达的顶点的入度减1，如果某个顶点的入度减为0，则将其加入队列</p>
</li>
<li>
<p>反复进行 <code>2</code> 的操作，直到队列为空。如果队列为空时，入过队的节点数目恰好为N，说明拓扑排序成功，图G为有向无环图；否则失败，图G中有环。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">(Graph* G, Queue&lt;<span class="type">int</span>&gt;* Q)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Count[G-&gt;<span class="built_in">n</span>()];<span class="comment">//顶点的入度数组</span></span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	<span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) Count[v] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) <span class="comment">// Process edges</span></span><br><span class="line">		<span class="keyword">for</span> (w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line">			Count[w]++; <span class="comment">// Add to v2&#x27;s count</span></span><br><span class="line">	<span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) <span class="comment">// Initialize Q</span></span><br><span class="line">		<span class="keyword">if</span> (Count[v] == <span class="number">0</span>) <span class="comment">// 入度为0，No prereqs</span></span><br><span class="line">			Q-&gt;<span class="built_in">enqueue</span>(v);</span><br><span class="line">	<span class="keyword">while</span> (Q-&gt;<span class="built_in">length</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">		Q-&gt;<span class="built_in">dequeue</span>(v);</span><br><span class="line">		<span class="built_in">printout</span>(v); <span class="comment">// PreVisit for V</span></span><br><span class="line">		<span class="keyword">for</span> (w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w)) &#123;</span><br><span class="line">			Count[w]--; <span class="comment">// One less prereq</span></span><br><span class="line">			<span class="keyword">if</span> (Count[w] == <span class="number">0</span>) <span class="comment">// Now free</span></span><br><span class="line">			Q-&gt;<span class="built_in">enqueue</span>(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短路径问题">最短路径问题</h3>
<h5 id="dijkstra算法">Dijkstra算法</h5>
<p>Dijkstra算法用来解决<strong>单源最短路问题</strong>，即给定图 G 和起点 s，通过算法得到S 到达其他每个顶点的最短距离。</p>
<blockquote>
<p>边上权值非负情形的单源最短路径问题</p>
<img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220614021342331.png" alt="image-20220614021342331" style="zoom:33%;" />
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161606119.png" alt="image-20220614021038805" style="zoom:80%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161606679.png" alt="image-20220614021054153" style="zoom:80%;" />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(Graphm* g,<span class="type">double</span>* D,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">		D[i] = g-&gt;<span class="built_in">getEdge</span>(s,i);</span><br><span class="line">	&#125;</span><br><span class="line">	D[s] = <span class="number">1</span>;</span><br><span class="line">	g-&gt;<span class="built_in">setMark</span>(s,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">		minn = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++ )&#123;</span><br><span class="line">			<span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[j]&gt;minn)&#123;</span><br><span class="line">				k = j;</span><br><span class="line">				minn = D[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		g-&gt;<span class="built_in">setMark</span>(k,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(k == y) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[k]*g-&gt;<span class="built_in">getEdge</span>(k,j)&gt;D[j])</span><br><span class="line">			D[j] = D[k] * g-&gt;<span class="built_in">getEdge</span>(k,j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="floyd算法">Floyd算法</h5>
<blockquote>
<p><strong>完全最短路径问题</strong>：每个顶点到其他所有顶点之间的的距离（最短路径的的长度）</p>
<p>Floyd算法只用于不含长度为负的回路的有向和无向加权图。</p>
<p>时间效率 n^3^</p>
</blockquote>
<p>Floyd算法基于这样一个事实：</p>
<ul>
<li>如果存在顶点k，使得以k作为中介点时顶点i和顶点j的当前最短距离缩短，则使用顶点k 作为顶点i和顶点j的中介点。
<ul>
<li>即当<code>dis[i][k] + dis[k][j] &lt; dis[i][j]</code>时，</li>
<li>令<code>dis[i][j] = dis[i][k] + dis[k][j]</code> (其中<code>dis[i][j]</code>表示从顶点<code>i</code>到顶点<code>j</code>的最短距离)。</li>
</ul>
</li>
</ul>
<p>如图所示，从 V1 到 V4 的距离为3，而以 V2 为中介点时可以使 V1 到 V4 的距离缩短为2，那么就把 V1 到V4的距离从3优化为2，</p>
<p>即当<code>dis[1][2] + dis[2][4] &lt; dis[1][4]</code>时，<br>
令<code>dis[1][4] = dis[1][2] + dis[2][4]</code>。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607595.png" alt="image-20220613203350241" style="zoom:50%;" />
<p>由权重矩阵算出距离矩阵。</p>
<p>用中介点k时，i和j点之间的间接距离来优化直接距离。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607399.png" alt="image-20220613202251620" style="zoom:50%;" />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">School</span><span class="params">(AdjMatrix w,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在以邻接带权矩阵表示的n个村庄中，求学校建在何处，使离学校最远的村庄到学校的路径最短。    </span></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=n;k++)   <span class="comment">//求任意两顶点间的最短路径       </span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">           <span class="keyword">if</span> (w[i][k]+w[k][j]&lt;w[i][j])  </span><br><span class="line">				w[i][j]=w[i][k]+w[k][j];</span><br><span class="line">    m=MAXINT;             <span class="comment">//设定m为机器内最大整数。     </span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)&#123;		<span class="comment">//求最长路径中最短的一条。       </span></span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++) <span class="comment">//求从某村庄i（1&lt;=i&lt;=n）到其它村庄的最长路径。          </span></span><br><span class="line">            <span class="keyword">if</span> (w[i][j]&gt;s) s=w[i][j];</span><br><span class="line">        <span class="keyword">if</span> (s&lt;=m) &#123;m=s; k=i;&#125;<span class="comment">//在最长路径中，取最短的一条。m记最长路径，k记出发顶点的下标。</span></span><br><span class="line">     <span class="built_in">Printf</span>(“学校应建在%d村庄，到学校距离为%d\n”,i,m);        </span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//算法结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="最小生成树">最小生成树</h3>
<p>MST最小生成树是在一个给定的<strong>无向图</strong> G(V,E) 中求一棵树 T，使得这棵树拥有图 G中的所有顶点，且所有边都是来自图 G中的边，并且满足整棵树的边权之和最小。</p>
<p>性质：</p>
<ol>
<li>最小生成树是树，边数等于顶点数减1，而且树内一定不会有环。</li>
<li>对于给定的图 G(V,E)，其最小生成树不唯一，但是边权之和一定唯一</li>
<li>最小生成树是在无向图上生成的，因此其根节点可以是这棵树上的任意一个结点。</li>
</ol>
<h5 id="prim-算法-加点法">Prim 算法（加点法）</h5>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607540.png" alt="image-20220613201859197" style="zoom:80%;" />
<h5 id="kruskal-算法-加边法">Kruskal 算法（加边法）</h5>
<p>把加权连通图 G*&lt;V,E&gt;* 的最小生成树看出一个具有 |V|-1 条边的无环子图，并且边的权重和是最小的</p>
<ol>
<li>
<p>按权重对所有边进行排序</p>
</li>
<li>
<p>按权重大小测试所有边</p>
<ol>
<li>如果当前测试边与当前子图不形成回路（不在同一个连通块）则加入当前子图中。</li>
<li>如果产生回路则抛弃当前边。</li>
</ol>
</li>
<li>
<p>直到最小生成树的边的总数等于总顶点数 减一，或者测试完所有边：</p>
<p>​	结束时最小生成树的边数小于总顶点数减一，说明该图不连通。</p>
</li>
</ol>
<h1>算法</h1>
<h2 id="查找">查找</h2>
<h3 id="二分查找">二分查找</h3>
<blockquote>
<p>最好 1 ； 最差 log~2~ n；平均 log n</p>
</blockquote>
<p>整数二分法<br>
有单调性一定可以二分，没有单调性也可以用二分<br>
总之每次更新区间的时候，答案必定落在区间内<br>
根据 check() （即自己想要什么）来确定用哪个模板（往左缩还是往右缩）<br>
二分算法一定是有解的（一定有边界）</p>
<p>模板：使用——左移取左，右移取右</p>
<blockquote>
<p>更新：r = mid，则 mid = ( l + r ) / 2       （右边界边往左移）</p>
</blockquote>
<blockquote>
<p>更新：l = mid，则 mid = ( l + r + 1) / 2</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bst-avl">BST AVL</h3>
<h4 id="asl-平均查找长度">ASL 平均查找长度</h4>
<p>查找算法的平均查找长度 (Average Search Length) 为确定记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607239.png" alt="image-20220614000003743" style="zoom:30%;" />
<p>二分查找：𝐴SL<sub>bs</sub> =log<sub>2</sub>(n+1)-1</p>
<h3 id="散列">散列</h3>
<p>哈希函数：以  f(key)  作为 关键字为 key 的记录在表中的位置。</p>
<p>性质：</p>
<ul>
<li>哈希函数是一个映象，即：将关键字的集合映射 到某个地址集合上，它的设置很灵活，只要这个地 址集合的大小不超出允许范围即可；</li>
<li>由于哈希函数是一个压缩映象，因此，在一般情 况下，很容易产生“<strong>冲突</strong>”现象，即： key1≠ key2， 而f(key1) = f(key2)。</li>
<li>很难找到一个不产生冲突的哈希函数。一般情况 下，<strong>只能选择恰当的哈希函数，使冲突尽可能少地 产生。</strong></li>
</ul>
<p>构造哈希函数：</p>
<ol>
<li>
<p>直接定址法</p>
<p>哈希函数为关键字的线性函数：</p>
<p>H(key) = a  * key + b</p>
<p>此法仅适合于： 地址集合的大小 = = 关键字集合的大小</p>
</li>
<li>
<p>数字分析法</p>
<p>提取分布均匀 的若干位或它们的组合作为地址。</p>
<p>此方法仅适合于： 能预先估计出全体关键字的每一位上各种数字出现的频度。</p>
</li>
<li>
<p>平方取中法</p>
<p>以关键字的平方值的中间几位作为存 储地址。求“关键字的平方值” 的目的 是“扩大差别” ，同时平方值的中间各 位又能受到整个关键字中各位的影响。</p>
<p>此方法适合于: 关键字中的每一位都有某些数字重复 出现频度很高的现象。</p>
</li>
<li>
<p>折叠法</p>
<p>将关键字分割成若干部分，然后取它 们的叠加和为哈希地址。有两种叠加处理的方法：移位叠加和间界叠加。</p>
<p>此方法适合于: 关键字的数字位数特别多。</p>
</li>
<li>
<p>除留余数法</p>
<p>H(key) = key MOD p</p>
<ul>
<li>
<p>p≤m (表长)</p>
</li>
<li>
<p>并且 p 应为不大于 m 的素数 或是 不含 20 以下的质因子。</p>
</li>
</ul>
</li>
<li>
<p>随机数法</p>
<p>H(key) = Random(key）</p>
<ul>
<li>其中，Random 为伪随机函数</li>
</ul>
</li>
</ol>
<p>冲突处理方法：</p>
<ol>
<li>
<p>闭散列法：开地址方法</p>
<p>使用探查序列：</p>
<p>为产生冲突的地址 H(key) 求得一个地址序列：</p>
<p>​	<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607258.png" alt="image-20220614002419450" style="zoom:50%;" /></p>
</li>
</ol>
<img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220614005729355.png" alt="image-20220614005729355" style="zoom:30%;" />
<blockquote>
<p>如果 di 是其他函数</p>
</blockquote>
<ol start="2">
<li>开散列法：单链方法</li>
</ol>
<h2 id="排序">排序</h2>
<h3 id="稳定排序">稳定排序</h3>
<h4 id="冒泡">冒泡</h4>
<p><em><strong>Θ</strong></em>(n^2^)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//第一轮比较的次数：数组的总长度-1</span></span><br><span class="line"><span class="comment">//下一轮比上一轮的比较次数少一次</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	<span class="type">int</span> nums[] = &#123;<span class="number">32</span>,<span class="number">3</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">14</span>&#125;;</span><br><span class="line">	<span class="type">int</span> count = <span class="built_in">sizeof</span>(nums)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="comment">//外层循环控制比较轮数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; count<span class="number">-1</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//内层循环控制每一轮多比较和交换</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; count - i <span class="number">-1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[j] &lt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="comment">//交换</span></span><br><span class="line">				temp = nums[j];</span><br><span class="line">				nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">				nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">		cout &lt;&lt; nums[i]&lt;&lt; <span class="string">&#x27;\t&#x27;</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="插入">插入</h4>
<p><em><strong>Θ</strong></em>(n^2^)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入排序（升序排列）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line"><span class="type">int</span> temp2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[]=&#123;<span class="number">22</span>,<span class="number">43</span>,<span class="number">8</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">89</span>&#125;;</span><br><span class="line">	<span class="type">int</span> count = <span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="comment">//1.将待排序的序列的第一个元素看作一个有序的序列，把第二个元素到最后一个当成未排序的序列；</span></span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;<span class="comment">//从第二个开始比较</span></span><br><span class="line">		<span class="comment">//2.取出下一个元素，在已经排序的元素序列中从后向前比较</span></span><br><span class="line">		temp = a[i]; <span class="comment">//temp为要比较的元素</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; temp; j--) &#123;</span><br><span class="line"><span class="comment">//3.如果在已经排列的元素有大于该元素的，将该元素移到下一位；（从后向前交换位置）</span></span><br><span class="line">			temp2 = a[j];</span><br><span class="line">			a[j] = temp;</span><br><span class="line">			a[j + <span class="number">1</span>] = temp2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将新元素插入该位置？？</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i &lt; count;i++)&#123;</span><br><span class="line">    cout &lt;&lt; a[i]&lt;&lt;<span class="string">&#x27;\t&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4.重复3，直到在已排序的序列中元素小于或者等于新元素</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.将新元素插入该位置</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="归并">归并</h4>
<p>归并排序——分治 nlogn</p>
<p>步骤</p>
<p>a. 确定分界点</p>
<p>mid = （l+r）/2</p>
<p>|<em><strong><strong><strong><strong>|</strong></strong></strong></strong></em>__|</p>
<p>从中间分成两段</p>
<p>b. 先递归排序左边和右边</p>
<p>​		c. 归并——把两个有序的数组合并成一个  ★难点</p>
<p>​				双指针算法</p>
<p>​				分别比较两个序列的最小值，直到输出到一个序列的终点，另一个后面的添加上去就行了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;  <span class="comment">//如果区间里的元素个数是一个或者没有</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l+r &gt;&gt; <span class="number">1</span>; <span class="comment">//确定中点</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q,l,mid),<span class="built_in">merge_sort</span>(q,mid + <span class="number">1</span>,r); <span class="comment">//递归左右两边</span></span><br><span class="line">    <span class="comment">//归并,需要一个辅助数组</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>,i = l,j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//i指向左半边的有序数列起点，j指向右半边有序数列起点</span></span><br><span class="line">    <span class="keyword">while</span>( i &lt;= mid &amp;&amp; j &lt;= r)&#123; <span class="comment">//当左右两边还没有循环到空的时候</span></span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++]; <span class="comment">//把小的那个放到当前的位置上去</span></span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这两个while循环表示如果还有没循环完的，直接接入到辅助数组后面去</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再把临时数组的数字存回去</span></span><br><span class="line">    <span class="keyword">for</span>(i = l,j = <span class="number">0</span>; i &lt;=r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; n ; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; n ; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="希尔-shell">希尔（shell）</h4>
<p>shell排序是一种插入排序算法，它出自D.L.Shell，因此而得名。Shell排序又称作缩小增量排序。Shell排序的执行时间依赖于增量序列。</p>
<p>设初始序列有n个元素，选定一个小于n大于或等于1的整数gap作为间隔，将全部元素分成gap个子序列，所有距离为gap的元素放在同一个子序列中，在每个子序列中分别采用直接插入算法进行排序；然后缩小间隔gap，如令gap=gap/2，重复上面的子序列划分和子序列排序动作；直到最后去gap=1，将所有的元素放到一个序列中为止。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607555.png" alt="img"></p>
<h3 id="不稳定排序">不稳定排序</h3>
<h4 id="选择">选择</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序（擂台）</span></span><br><span class="line"><span class="comment">//假设第一个元素是最小值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line">	<span class="type">int</span> nums[]&#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">344</span>,<span class="number">12</span>&#125;;</span><br><span class="line">	<span class="type">int</span> count = <span class="built_in">sizeof</span>(nums)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="comment">//通过计算得到的数组长度，不能用于string数组</span></span><br><span class="line"><span class="comment">//擂台变量</span></span><br><span class="line">	<span class="type">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line">	<span class="type">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123; <span class="comment">//比较了count-1轮</span></span><br><span class="line">		min = nums[i];</span><br><span class="line">		minIndex = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</span><br><span class="line">			<span class="comment">//打擂台</span></span><br><span class="line">			<span class="keyword">if</span> (nums[j] &lt; min) &#123;</span><br><span class="line">				min = nums[j];</span><br><span class="line">				minIndex = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//交换</span></span><br><span class="line">		<span class="keyword">if</span> (minIndex &gt; i) &#123;<span class="comment">//可以不写</span></span><br><span class="line">			temp = nums[minIndex];</span><br><span class="line">			nums[minIndex] = nums[i];</span><br><span class="line">			nums[i] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;排序后&quot;</span>&lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">		cout&lt;&lt;nums[i]&lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="快排">快排</h4>
<blockquote>
<p>不稳定的</p>
<p>最坏 n^2^ ，最好 nlog n</p>
</blockquote>
<ol>
<li>快速排序——分治思想<br>
步骤<br>
L——————R</li>
</ol>
<p>i. 确定分界点 x<br>
常用方法: 左边界q[l] 中间点q[(l+r)/2]  随机 q[r]<br>
ii. 调整区间 难点☆如何确定区间<br>
L————|——————R<br>
&lt;=x     &gt;=x<br>
左边的都小于等于x</p>
<ol>
<li>暴力解法<br>
用两个数组储存大于x的和小于x的</li>
<li>用两个指针<br>
移动两个指针i，j<br>
如果 i 指向的数大于 x，j 指向的数小于 x<br>
交换 i ，j 指向的数<br>
继续移动i j 直到相遇</li>
</ol>
<p>iii. 递归处理左右两端</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;  <span class="comment">//科学计数法</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;  <span class="comment">//从l 排序到 r</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;   <span class="comment">//没有意义的情况（没有或者只有一个数）</span></span><br><span class="line"><span class="comment">//！！必须要有等于，是递归的中止条件！！</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>,j = r + <span class="number">1</span>,x = q[ l+r &gt;&gt; <span class="number">1</span>]; <span class="comment">//i j 要往外扩展一个，因为下面是do while</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++ ; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j-- ; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i],q[j]);   <span class="comment">//当 i j 停下不动，说明找到了不符合左右两区间的数，交换他们</span></span><br><span class="line">                <span class="comment">//而且还要满足 i &lt; j（这两个指针还没有相遇）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q,l,j);     <span class="comment">//递归</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q,j + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span> ,n - <span class="number">1</span>);   <span class="comment">//注意这里从0开始，排序到n-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="堆排">堆排</h4>
<ul>
<li>堆</li>
</ul>
<p>定义：堆可以定义为一颗二叉树，树的节点中包含键，并且满足</p>
<ol>
<li>树的形状是完全二叉树</li>
<li>每一个节点的键大于等于它子女的键（父母优势）</li>
</ol>
<blockquote>
<p>同一节点的左右子树没有关系</p>
</blockquote>
<ul>
<li>堆排序</li>
</ul>
<p>过程：</p>
<ol>
<li>构造堆：为一个给定的数组构造一个堆</li>
<li>删除最大键：对剩下的堆应用 <code>n-1</code> 次根删除操作</li>
</ol>
<blockquote>
<p>构造 n，删除 log n；堆排序 n log n</p>
<p>结果：输出升序排列数组</p>
</blockquote>
<h3 id="基数排序">基数排序</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607837.png" alt="image-20220614020329686" style="zoom: 67%;" />
<h2 id="分治">分治</h2>
<p>见归并排序</p>
<h2 id="动态规划">动态规划</h2>
<h2 id="贪心">贪心</h2>
<p>现有如下8个活动，每个活动均希望使用同一个会议室举办活动，表中列出了每个活动的起始时间Si和结束时间fi。现在希望能最大化利用这一间会议室，使之能不冲突地举办更多活动。请用贪心算法针对如下活动进行安排，即给出最大相容活动子集。（只需写出或画出计算过程及结果，无需编写算法伪代码）。<br>
说明：每个活动 i 都有一个要求使用会议室的起始时间si和一个结束时间fi,且si &lt;fi 。如果选择了活动i，则它在半开时间区间[si, fi)内占用会议室。若区间[si, fi)与区间[sj, fj)不相交，则称活动i与活动j是相容的。也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。</p>
<table>
<thead>
<tr>
<th>活动序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody>
<tr>
<td>开始时间</td>
<td>1</td>
<td>12</td>
<td>25</td>
<td>27</td>
<td>36</td>
<td>46</td>
<td>38</td>
<td>50</td>
</tr>
<tr>
<td>结束时间</td>
<td>23</td>
<td>28</td>
<td>35</td>
<td>43</td>
<td>50</td>
<td>57</td>
<td>60</td>
<td>65</td>
</tr>
</tbody>
</table>
<p>也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//s[]为开始时间列表，f[]为结束时间列表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GreedySelect</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> s[],<span class="type">int</span> f[],<span class="type">bool</span> A[])</span></span>&#123;</span><br><span class="line">    A[<span class="number">1</span>]=<span class="literal">true</span>;<span class="comment">//将第一个活动先安排</span></span><br><span class="line">	<span class="type">int</span> j=<span class="number">1</span>,count=<span class="number">1</span>; <span class="comment">//count为被安排的节目个数 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]&gt;=f[j])&#123;</span><br><span class="line">		A[i]=<span class="number">1</span>;</span><br><span class="line">		j=i;</span><br><span class="line">		count++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> A[i]=<span class="number">0</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="回溯">回溯</h2>
<h2 id="分支界限">分支界限</h2>
]]></content>
      <categories>
        <category>算法</category>
        <category>考试复习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Super-Resolution via Iterative Refinement</title>
    <url>/2022/03/02/Image-Super-Resolution-via-Iterative-Refinement/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206171939072.png" alt="image-20220617193939032" style="zoom:80%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206171939000.png" alt="image-20220617193954970" style="zoom:67%;" />
<span id="more"></span>
<blockquote>
<p><a href="https://iterative-refinement.github.io/">SR3: Iterative Image Enhancement (iterative-refinement.github.io)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/366004028">另辟蹊径</a><a href="https://zhuanlan.zhihu.com/p/366004028">—Denoising Diffusion Probabilistic </a><a href="https://zhuanlan.zhihu.com/p/366004028">一种从噪音中剥离出图像</a><a href="https://zhuanlan.zhihu.com/p/366004028">/</a><a href="https://zhuanlan.zhihu.com/p/366004028">音频的模型 </a><a href="https://zhuanlan.zhihu.com/p/366004028">- </a><a href="https://zhuanlan.zhihu.com/p/366004028">知乎 </a><a href="https://zhuanlan.zhihu.com/p/366004028">(zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/g11d111/article/details/118026427">生成模型新方向</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/444218616">SR3:Image Super-Resolution via Iterative Refinement - </a><a href="https://zhuanlan.zhihu.com/p/444218616">知乎 </a><a href="https://zhuanlan.zhihu.com/p/444218616">(zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">Denoising Diffusion Probabilistic Models (DDPM) - </a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">馒头</a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">and</a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">花卷 </a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">- </a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">博客园 </a><a href="https://www.cnblogs.com/MTandHJ/p/15698607.html">(cnblogs.com)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>cv</tag>
        <tag>生成模型</tag>
        <tag>图像超分辨率</tag>
      </tags>
  </entry>
  <entry>
    <title>PloyViT</title>
    <url>/2022/03/24/PloyViT/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201134581.png" alt="image-20220620113455526"></p>
<span id="more"></span>
<p>当 Lshared = L 时，参数总数减少大约 n 倍</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201135038.png" alt="image-20220620113520024" style="zoom:67%;" />
<h2 id="联合训练过程">联合训练过程</h2>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201135895.png" alt="image-20220620113550863"></p>
<p>使用随机梯度下降 (SGD) 训练所有任务，同时优化所有 PolyViT 模型参数θ</p>
<p><u>如何构建训练批次?</u></p>
<h3 id="协同训练">协同训练</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201138668.png" alt="image-20220620113802632" style="zoom:80%;" />
<h3 id="ployvit-base-协同训练">PloyViT-Base 协同训练</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201138940.png" alt="image-20220620113806903" style="zoom:80%;" />
<h3 id="单任务">单任务</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201138808.png" alt="image-20220620113812763" style="zoom:80%;" />
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/448377212">超神！全能视觉</a><a href="https://zhuanlan.zhihu.com/p/448377212">Transformer</a><a href="https://zhuanlan.zhihu.com/p/448377212">：</a><a href="https://zhuanlan.zhihu.com/p/448377212">PolyViT</a><a href="https://zhuanlan.zhihu.com/p/448377212">！协同多模态图像、视频、音频</a><a href="https://zhuanlan.zhihu.com/p/448377212">SOTA</a><a href="https://zhuanlan.zhihu.com/p/448377212">！谷歌、剑桥大学、图灵研究院出品！ </a><a href="https://zhuanlan.zhihu.com/p/448377212">- </a><a href="https://zhuanlan.zhihu.com/p/448377212">知乎 </a><a href="https://zhuanlan.zhihu.com/p/448377212">(zhihu.com)</a></p>
<p><a href="https://arxiv.org/pdf/2111.12993.pdf">https://arxiv.org/pdf/2111.12993.pdf</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>transformer</tag>
        <tag>计算机视觉</tag>
        <tag>多模态</tag>
      </tags>
  </entry>
  <entry>
    <title>NeRF</title>
    <url>/2022/06/19/NeRF/</url>
    <content><![CDATA[<p><strong>新视角合成任务</strong>：</p>
<ul>
<li>指的是对于某一场景给定某些视角下的观测（图片），通过算法合成新视角下的观测（图片）的任务，如下图所示：</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206221708241.png" alt="image-20220622170817160" style="zoom:50%;" />
<p><strong>隐式表达</strong>：</p>
<ul>
<li>
<p>指的是在渲染过程不对目标物体或者场景进行显示地建模</p>
<blockquote>
<p>一个很直观的想法就是通过SFM的方法对目标进行三维稠密重建，然后再通过相机模型反投影到新视角下，这种具备三维表达的方法就是典型的<strong>显示表达</strong>。</p>
</blockquote>
</li>
<li>
<p>而NeRF则是通过一个全连接网络替换<strong>三维稠密重建</strong>的过程，我们并不知道目标在三维空间中的长什么样子，但是可以通过在三维空间中进行采样和积分获得目标在新视角的观测。</p>
</li>
</ul>
<p><strong>SFM</strong>：</p>
<ul>
<li>
<p>SFM即Structure-from-motion运动结构重建，从大批量图像数据出发，通过相关处理，获取目标图像集3D几何（结构）和摄像机姿态（运动）信息，主要处理流程可分为如下几步：特征提取；特征匹配；姿态估计；束调整。具体处理流程参见下图：</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206222015010.png" alt="sfm处理流程图" style="zoom:50%;" />
</li>
</ul>
<p><strong>SLAM</strong>：</p>
<ul>
<li>Simultaneous localization and mapping 缩写，意为“同步定位与建图”
<ul>
<li>激光SLAM</li>
<li>视觉SLAM</li>
</ul>
</li>
</ul>
<p><strong>稀疏重建：</strong></p>
<ul>
<li>通常是重建一些图像特征点的深度，这个在基于特征的视觉SLAM里比较常见，得到的特征点的深度可以用来计算相机位姿。稀疏重建在实际应用，比如检测，避障，不能满足需求。</li>
</ul>
<p><strong>半稠密重建：</strong></p>
<ul>
<li>通常是重建图像纹理或梯度比较明显的区域，这些区域特征比较鲜明。半稠密重建在直接法视觉SLAM里比较常见。重建的三维点云相对稠密，可以满足部分应用需求。</li>
</ul>
<p><strong>稠密重建：</strong></p>
<ul>
<li>稠密重建是对整个图像或者图像中的绝大部分像素进行重建。与稀疏、半稠密相比，稠密重建对场景的三维信息理解更全面，更能符合应用需求。但是，由于要重建的点云数量太多，相对耗时。</li>
</ul>
<h1>经典体素辐射场渲染方法</h1>
<p>Volume Rendering with Radiance Fields</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206222028695.png" alt="image-20220622202823666" style="zoom: 67%;" />
<p>在原始NeRF中，我们想要获得的是新视角下的图像，将经过相机光心和图像平面上像素的这样一条射线标记为:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">r(t) = o + td
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">d</span></span></span></span></span></p>
<ul>
<li>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span> 为射线原点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 为<strong>射线角度</strong></li>
</ul>
<blockquote>
<p>因为在有光照的条件下, 颜色输出是和看的视角有关的</p>
<p>nerf的物理理论支撑：BRDF，辐射度学</p>
<p><a href="https://zhuanlan.zhihu.com/p/21376124">基于物理着色：BRDF </a>：描述表面入射光和反射光关系。</p>
</blockquote>
<p>NeRF的任务主要是对颜色进行渲染，而不是对亮度进行渲染，因此我们 Volume Rendering 的对象不再是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L ( t )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 而是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C ( t )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 。</p>
<p>颜色主要是由光线的波长决定，而光线通过半透明物体时波长会发生变化，也即颜色会发生变化。</p>
<blockquote>
<p>不透明材料具有从内部反射（忽略表面反射）产生的漫反射，它们的外观在很大程度上独立于照明和观察几何结构。这种材料通常被称为各向同性（isotropic）和朗伯材料（Lambertian materials）。<strong>完全漫反射体</strong>是典型<strong>朗伯材料</strong>。</p>
<ul>
<li><strong>朗伯表面</strong>（Lambertian surface）：一理想的漫射面,它所有方向的反射能量都相等，是指在一个固定的照明分布下从所有的视场方向上观测都具有相同亮度的表面，朗伯表面不吸收任何入射光</li>
<li><strong>非朗伯（non-lambertian 散射)</strong>：需要有散射，但不能是朗伯散射，一来视为了能量守恒，二来是为了实现各向异性。</li>
<li><strong>朗伯反射</strong>（Lambertian reflectance）：也叫理想散射或朗伯散射，不管照明分布如何，朗伯表面在所有的表面方向上接收并发散所有的入射照明，结果是每一个方向上都能看到相同数量的能量。</li>
</ul>
</blockquote>
<p>这种变化的规则采用Alpha Blending方法：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mi>C</mi><mi>b</mi></msub><mo>+</mo><mi>α</mi><msub><mi>C</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">C_a = (1-α)C_b + αC_o
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>α 为不透明度</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">C_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为混合后的颜色，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">C_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为混合前的颜色，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">C_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为半透明物体的颜色。</li>
</ul>
<blockquote>
<p>Alpha 混合（Alpha Blending）方法。这个方法比较常见，其实就是按照 Alpha 混合向量的值来混合源 像素和目标像素。当在屏幕上绘制某个物体时，与每个像素相关联的值有 RGB 颜色和 Z 缓冲深度 值，以及另外一个成分 alpha 分量，这个 alpha 值也可以根据需要生成并存储，它描述的是给定像素 的对象片段的不透明度的值。 alpha 为 1.0 表示对象不透明，完全覆盖像素所在区域; 0.0 表示像素完 全透明。为了使对象透明，在现有场景的上方，以小于 1 的透明度进行绘制即可。每个像素将从渲染 管线接收到一个 RGBA 结果，并将这个值和原始像素颜色相混合。</p>
<p>——《Real-Time Rendering 3rd》</p>
</blockquote>
<p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mi>σ</mi><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">α=σdt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span>，其中 σ 为<strong>单位不透明度</strong>，对上式进行变换：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub><mo>−</mo><msub><mi>C</mi><mi>b</mi></msub><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>o</mi></msub><mo>−</mo><msub><mi>C</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C_a-C_b = σ(C_o-C_b)dt
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span></span></p>
<p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">σ=σ(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>o</mi></msub><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_o=c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，均为随射线位置 <em>t</em> 变化，上式微分形式为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>C</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mo>−</mo><mi>σ</mi><mrow><mo fence="true">(</mo><mi>t</mi><mo fence="true">)</mo></mrow><mi>C</mi><mo>+</mo><mi>σ</mi><mrow><mo fence="true">(</mo><mi>t</mi><mo fence="true">)</mo></mrow><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\mathrm{d} C}{\mathrm{d} t} = -\sigma \left ( t \right )C + \sigma \left ( t \right )c(t)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></span></p>
<p>非齐次线性微分方程通解为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup><mo>+</mo><mi>C</mi><msup><mi>e</mi><mrow><mo>−</mo><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">C=e^{-\int \sigma (t)dt}\int \sigma (t)c(t)e^{\int \sigma (t)dt} +Ce^{-\int \sigma (t)dt}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9765em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>在 NeRF 问题中规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">t_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为积分的最近端和最远端：</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲
C =&amp; e^{-\int_…'>\begin{align}
C =&amp; e^{-\int_{t_n}^{t_f}  \sigma (t)dt}\int_{t_n}^{t_f} \sigma (t)c(t)e^{\int_{t_f}^t \sigma (s)ds} +Ce^{-\int \sigma (t)dt}
\\=&amp;\int_{t_n}^{t_f}\sigma (t)c(t)e^{\int_{t}^{t_f}\sigma (s)ds }e^{-\int_{t_n}^{t_f}\sigma (t)dt }dt+Ce^{-\int_{t_n}^{t_f}\sigma (t)dt }
\\=&amp;\int_{t_n}^{t_f}\sigma (t)c(t)e^{-\int_{t_n}^{t}\sigma (s)ds }dt+Ce^{-\int_{t_n}^{t_f}\sigma (t)dt }

\end{align}
</p>
<p>在这里，认为射线初值为0，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">C=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，那么经过这条射线积分在图像平面上获得的颜色为：</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲
C(r)=&amp;\int_{t_…'>\begin{align}
C(r)=&amp;\int_{t_n}^{t_f}T(t)\sigma(r(t))c(r(t),d)dt,
其中 T(t) = e^{-\int_{t_n}^{t}\sigma(r(s))ds}
\end{align}
</p>
<ul>
<li>体积密度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">σ(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 可以解释为射线在位置 x 处的微分概率。</li>
<li>摄像机光线$ r(t) = o + td$ ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span> 为射线原点</li>
<li>预期颜色 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> 具有近边界和远边界 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 $t_f $</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>在这里可以理解为射线从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 这一路段上的累积透明度，在这一路上没有击中任何例子的概率</li>
</ul>
<h1>基于分段随机采样的离散近似体渲染方式</h1>
<p><strong>对该连续积分进行数值估计</strong></p>
<p>确定性求积（Deterministic quadrature）通常用于渲染离散体素网格，但是这将有效地限制我们表示的分辨率，<strong><u>因为MLP只会在固定的离散位置集上查询</u></strong>。</p>
<blockquote>
<p>一个直观且很常用的思路是，在需要求积的区域均匀地采样N个点进行近似计算。但作者提出，这样的方式会导致MLP只需要学习一系列离散点的信息，最终会限制NeRF的分辨率，使得最终生成的结果不够清晰。</p>
</blockquote>
<p>相反，我们使用分层抽样方法。</p>
<blockquote>
<p>这样的方式能够在只采样离散点的前提下，保证采样位置的连续性。</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231658901.png" alt="image-20220623165814855" style="zoom:67%;" />
<p>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>t</mi><mi>n</mi></msub><mtext>，</mtext><msub><mi>t</mi><mi>f</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[t_n，t_f]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>分成N个均匀分布的容器，然后从每个容器内随机均匀地抽取一个样本：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>∼</mo><mi>U</mi><mrow><mo fence="true">[</mo><msub><mi>t</mi><mi>n</mi></msub><mo>+</mo><mfrac><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi>N</mi></mfrac><mo stretchy="false">(</mo><msub><mi>t</mi><mi>f</mi></msub><mo>−</mo><msub><mi>t</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>t</mi><mi>n</mi></msub><mo>+</mo><mfrac><mi>i</mi><mi>N</mi></mfrac><mo stretchy="false">(</mo><msub><mi>t</mi><mi>f</mi></msub><mo>−</mo><msub><mi>t</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">t_i\sim U\left [ t_n+\frac{i-1}{N}(t_f-t_n),t_n+\frac{i}{N}(t_f-t_n)   \right ]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p>虽然我们使用离散的样本集来估计积分，但<strong>分层采样</strong>使我们能够表示<strong>连续的</strong>场景表示，因为它会使得在优化过程中在连续位置评估MLP。我们用这些样本来估计 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>，采用 Max[^1]方法。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub></mrow></msup><mo stretchy="false">)</mo><msub><mi>c</mi><mi>i</mi></msub><mo separator="true">,</mo><mtext>其中</mtext><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{C}(r) =  \sum_{i=1}^{N}T_i(1-e^{-\sigma _i\delta _i})c_i, 其中 T_i = exp(-\sum_{j=1}^{i-1}\sigma _i\delta _i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03785em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>i</mi><mo>=</mo><mo stretchy="false">(</mo><mi>t</mi><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>t</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">δi = (ti+1) - ti</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span></span></span></span>  是相邻样本之间的距离。</li>
</ul>
<h1>优化神经辐射场模型</h1>
<p>NeRF中的两个重要Trick</p>
<h2 id="位置编码">位置编码</h2>
<blockquote>
<p>positional encoding</p>
</blockquote>
<p>NeRF函数的输入为位置和角度信息，作者发现<strong>直接将位置和角度作为网络的输入得到的结果是相对模糊的</strong>（见实验部分）。</p>
<blockquote>
<p>导致渲染在表示颜色和几何形状的高频变化方面表现不佳。</p>
<p>这与 Rahaman 等人最近的工作一致 [^2]。这表明==<strong>深度网络偏向于学习低频函数</strong>==。他们还表明，在将输入传递到网络之前，使用高频函数将输入映射到更高维空间可以更好地拟合包含高频变化的数据。</p>
</blockquote>
<p>而用positon encoding 的方式将<strong>位置信息映射到高频</strong>则能有效提升清晰度效果。(例如傅里叶变换)</p>
<ul>
<li>
<p>具体而言，这里采用的是与Transformer 中类似的正余弦周期函数的形式。</p>
<blockquote>
<p>一种解释：采用position encoding 能够使得网络更容易的理解并建模位置信息。</p>
</blockquote>
</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(p)=(sin(2^0\pi p),cos(2^0\pi p),...,sin(2^{L-1}\pi p),cos(2^{L-1}\pi p))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.141331em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span> 分别作用在输入的每个坐标的值上（归一化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>后）</li>
<li>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>，</mtext><mi>L</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">γ(x)，L = 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo><mtext>，</mtext><mi>L</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">γ(d)，L = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>。</li>
</ul>
<p><strong>消融实验</strong></p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231735664.png" alt="image-20220623173529107" style="zoom: 50%;" />
<ul>
<li>No View Dependence：模型仅有 x 输入，无视角 d 输入
<ul>
<li>导致失去镜面反射</li>
</ul>
</li>
<li>No Positional Encoding：失去高频细节，模型 over smooth</li>
</ul>
<blockquote>
<p>在流行的 Transformer 架构中使用了类似的映射，它被称为位置编码。</p>
<p>然而，Transformers 使用它来实现不同的目标，即在序列中提供令牌的离散位置作为不包含任何顺序概念的架构的输入。</p>
<p>相比之下，我们使用这些函数将连续输入坐标映射到更高维空间，以使我们的 MLP 更容易逼近更高频率的函数。从投影中建模 3D 蛋白质结构的相关问题的并行工作(原文[51]) 也利用了类似的输入坐标映射。</p>
</blockquote>
<h2 id="分层体素采样">分层体素采样</h2>
<blockquote>
<p>Hierarchical Volume Sampling 多层级体素采样</p>
</blockquote>
<p>NeRF最终的效果还和采样点的分布以及采样点频率相关，在没有采样点分布的先验的情况下，如果想要达到较高的精度就需要较高的采样点频率，这样势必会造成更大的计算量。</p>
<blockquote>
<p>对渲染图像没有贡献的自由空间和遮挡区域仍然被重复采样。</p>
<p>通过按其对最终渲染的预期效果按比例分配样本来提高渲染效率。</p>
</blockquote>
<p>为了解决这个问题，作者提出了Hierarchical Volume Sampling方法，即先按照均匀随机采样进行一次<strong>粗采样</strong>，将粗采样的输出的不透明度结果转化为分布，再根据分布进行一次<strong>精采样</strong>，最后NeRF训练的损失也是<strong>粗采样和精采样结果相加</strong>的结果，这样就实现了一个自动化Coarse-To-Fine的训练过程。</p>
<blockquote>
<p>由粗到细(<em>Coarse</em>-<em>to</em>-<em>fine</em>)</p>
</blockquote>
<p><strong>具体做法</strong></p>
<p>本文<strong>同时优化两个网络</strong>：一个“粗”和一个“精细”。</p>
<ul>
<li>
<p>首先使用分层抽样对一组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">N_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位置进行抽样，并评估这些位置的“粗略”网络。</p>
</li>
<li>
<p>然后我们沿着每条射线产生更明智的点采样，其中样本偏向<strong>体积的相关部分</strong>。</p>
</li>
</ul>
<blockquote>
<p>逆变换采样(Inverse transform sampling)</p>
<p>是伪随机数采样的一种基本方法。在已知任意概率分布的<strong>累积分布函数</strong>时，可用于从该分布中<strong>生成随机样本</strong>。</p>
<p>假设X为一个连续随机变量，其累积分布函数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">F_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p>
<p>此时，随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>=</mo><msub><mi>F</mi><mi>X</mi></msub><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y = F_X(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>服从区间[0,1]上的均匀分布。逆变换采样即是将该过程反过来进行：首先对于随机变量 Y，我们从0至1中随机均匀抽取一个数u。之后，由于随机变量与X有着相同的分布，即可看作是从分布中生成的随机样本。</p>
</blockquote>
<h1>5D 神经辐射场模型</h1>
<blockquote>
<p>简化了的辐射场模型</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231130676.png" alt="image-20220623113017615" style="zoom: 50%;" />
<ul>
<li>（a）通过沿相机光线采样 5D 坐标（位置和观察方向）来合成图像</li>
<li>（b）将这些位置输入 MLP 以产生颜色和体积密度，</li>
<li>（c）使用体积渲染技术将这些值合成到图像中。</li>
<li>（d）这个渲染函数是可微的，所以我们可以通过最小化<strong>合成</strong>和 G-T实 况观察图像之间的<strong>残差</strong>来优化我们的场景表示 。</li>
</ul>
<p><strong>与视角相关的发射辐射的可视化</strong></p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231602801.png" alt="image-20220623160233688" style="zoom: 50%;" />
<p>神经辐射场将 RGB 颜色表示为为空间位置 x 和观察方向 d 的五维函数。在这里，我们在船舶场景的神经表示中可视化两个空间位置的示例方向颜色分布。在 (a) 和 (b) 中，展示了来自两个不同相机位置的两个固定 3D 点的外观：一个位于船侧（橙色插图），一个位于水面（蓝色插图）。本文方法预测了这两个 3D 点不断变化的镜面外观，在 © 中，展示了这种行为如何在整个观察方向的半球上连续泛化。</p>
<h1>全连接网络架构的可视化</h1>
<ul>
<li>
<p>输入向量显示为绿色</p>
</li>
<li>
<p>中间隐藏层显示为蓝色</p>
</li>
<li>
<p>输出向量显示为红色</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231116699.png" alt="image-20220623111611662" style="zoom: 60%;" />
<p>每个块内的数字表示向量的维度。<strong>所有层都是标准的全连接层</strong>，</p>
<p><strong>黑色箭头</strong>表示具有 ReLU 激活的层，<strong>橙色箭头</strong>表示没有激活的层，<strong>黑色虚线箭头</strong>表示具有 sigmoid 激活层，</p>
<p>**“+” **表示向量连接。</p>
<p>输入位置  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的位置编码通过 8 个全连接 ReLU 层，每个层有 256 个通道。</p>
<p>遵循 <strong>DeepSDF</strong>  架构并包含一个 skip-connection，该连接将此输入连接到<strong>第五层</strong>。</p>
<p>一个附加层输出体积密度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">σ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>（使用 ReLU 校正以确保输出体积密度为非负）和 256 维特征向量。</p>
<p>该特征向量与输入观看方向的位置编码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span> 相连接，并由具有 128 个通道的附加全连接 ReLU 层处理。</p>
<p>最后一层（具有 sigmoid 激活）输出位置 x 处的，由方向 d 的射线所见的，发射的 RGB 辐射。</p>
<blockquote>
<p>[<a href="https://arxiv.org/abs/2003.08934">2003.08934] NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis (arxiv.org)</a></p>
<p><a href="https://blog.csdn.net/weixin_44580210/article/details/122284120?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16-122284120-blog-118959540.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16-122284120-blog-118959540.pc_relevant_default">辐射神经场算法——NeRF算法详解_Leo-Peng的博客-CSDN博客_nerf神经辐射场</a></p>
<p><a href="https://blog.csdn.net/qq_40553011/article/details/120788440"> 主流SFM处理方式的梳理_LuMan__的博客-CSDN博客_sfm方法</a></p>
<p><a href="https://blog.csdn.net/zhubaohua_bupt/article/details/74172831">图像三维重建方法综述_zhubaohua_bupt的博客-CSDN博客_三维图像重建</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/360365941">【NeRF论文笔记】用于视图合成的神经辐射场技术 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/367133111">Direct Volume Rendering - 知乎 (zhihu.com)</a></p>
<p>[^1]:Max, N.: Optical models for direct volume rendering. IEEE Transactions on Visualization and Computer Graphics (1995)</p>
<p>[^2]:Rahaman, N., Baratin, A., Arpit, D., Dr¨ axler, F., Lin, M., Hamprecht, F.A., Bengio, Y., Courville, A.C.: On the spectral bias of neural networks. In: ICML (2018)</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
        <category>隐式渲染</category>
      </categories>
      <tags>
        <tag>cv</tag>
        <tag>3d渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitcoin</title>
    <url>/2022/04/12/Bitcoin/</url>
    <content><![CDATA[<blockquote>
<p>北大肖臻区块链网课</p>
</blockquote>
<h1>BTC 密码学原理</h1>
<blockquote>
<p>比特币主要用到了密码学中的两个功能:</p>
<ol>
<li>哈希</li>
<li>签名</li>
</ol>
</blockquote>
<h2 id="1-哈希">1. 哈希</h2>
<p>密码学中用到的哈希函数被称为 <code>cryptographic hash function</code>,</p>
<p>它有两个重要的性质:</p>
<h3 id="1-1collision-resistance">1.1collision resistance :</h3>
<p>哈希碰撞</p>
<p>例如x≠y H(x)=H(y) 两个不同的输入，输出却是相等的，这就称哈希碰撞。它是不可避免的，因为输入空间总大于输出空间。给出x，很难找到y，除非蛮力求解(brute-force)。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730265.png" alt="image-20220413161904436" style="zoom:50%;" />
<blockquote>
<p><strong>collision resistance:</strong></p>
<p>A hash function H is said to be collision resistant if it is infeasible to  find two values, x and y, such that x ≠ y, yet H(x)=H(y)</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>我们说没有人可以找到碰撞，但我们没有说不存在碰撞。</p>
<p><s>碰撞检测算法：对于输出256位的哈希函数，最坏情况需要计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>256</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{256}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 次哈希值进行比较</s></p>
<p>没有任何哈希函数被证明是抗碰撞的。我们在实践中依赖的加密哈希函数只是人们已经非常非常努力地尝试发现冲突但尚未成功的函数。在某些情况下，例如旧的 MD5 哈希函数，经过多年的工作最终发现了冲突，导致该函数被弃用并逐步退出实际使用。所以我们选择相信它们是抗碰撞的。</p>
</blockquote>
<p>该性质的作用: 对一个message求digest</p>
<p>比如message取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的哈希值是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>g</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(m)=digest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span> 如果有人想篡改 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 值而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span> 不变，则无法做到。</p>
<p>哈希碰撞无法人为制造，无法验证，是根据实践经验得来的。</p>
<h3 id="1-2-hiding">1.2 Hiding</h3>
<p>哈希函数的计算过程是单向的，不可逆的。(从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 无法推导出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> )</p>
<p>hiding性质前提是输入空间足够大，分布比较均匀。如果不是足够大，一般在x后面拼接一个随机数，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>n</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(x||nonce)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span> 。</p>
<p>该性质的作用:和collision resistance 结合在一起，用来实现digital commitment(又称为digital equivalent of a sealed envelope)</p>
<ol>
<li>把预测结果作为输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，算出一个哈希值</li>
<li>将哈希值公布，hiding让人们知道哈希值而不知道预测值</li>
<li>最后再将x公布，因为有collision resistance的性质，预测结果是不可篡改的。</li>
</ol>
<h3 id="1-3-puzzle-friendly">1.3 puzzle friendly</h3>
<p>除了密码学中要求的这两个性质外，比特币中用到的哈希函数还有第三个性质:</p>
<p>puzzle friendly 指哈希值的预算事先是不可预测的。假如哈希值是 <code>00...0XX...X</code>，先无法知道哪个值更容易算出这个结果，需要枚举。</p>
<p>比特币挖矿的过程中实际就是找一个nonce，nonce 跟区块的块头里的其他信息合一起作为输入，得出的哈希值要小于等于某个指定的目标预值。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(block header)≤target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span> 。<code>block header</code> 指块头，块头里有很多域，其中一个域是我们可以设置的随机数nonce，挖矿的过程是不停的试随机数，使得block header取哈希后落在指定的范围之内。</p>
<p>puzzle friendly是指挖矿过程中没有捷径，为了使输出值落在指定范围，只能一个一个去试。所以这个过程还可以作为工作量证明(proof of work)。</p>
<p>挖矿很难，验证很容易。(difficult to solve ,but easy to verify)</p>
<blockquote>
<p>比特币被称为加密货币crypto-currency</p>
<p>区块链上内容都是公开的，包括区块的地址，转账的金额。</p>
<p>比特币中用的哈希函数叫作SHA-256(secure hash algorithm )以上三个性质它都是满足的。</p>
</blockquote>
<h2 id="2-签名">2. 签名</h2>
<p>在比特币系统中开账户:</p>
<p>在本地创立一个公私钥匙对  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>y</mi><mo separator="true">,</mo><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(public key ,private key)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，这就是一个账户。公私钥匙对是来自于<strong>非对称的加密技术</strong>(asymmetric encryption algorithm)。</p>
<blockquote>
<p>对称加密：两人之间信息的交流可以利用<strong>密钥(encryption key)</strong>，A将信息加密后发给B，B收到后用密钥解密，因为加密和解密用的是同一个密钥，所以叫对称加密。前提是有渠道可以安全地把密钥分发给通讯的双方。</p>
<p>因此对称加密的缺点就是密钥的分发不方便，因为在网络上很容易被窃听。</p>
</blockquote>
<p><strong>非对称密钥</strong>是用一对密钥而不是一个，加密用公钥，解密用私钥，加密和解密用的都是接收方的公钥和私钥。公钥是不用保密的，私钥要保密但是私钥只要保存在本地就行，不用传给对方。<strong>公钥相当于银行账号</strong>，别人转账只要知道公钥就行，<strong>私钥相当于账户密码</strong>，知道私钥可以把账户上钱转走。(公钥和私钥用来签名)</p>
<blockquote>
<p>假如A想向B转10个比特币，A把交易放在区块链上，别人怎么知道这笔交易是A发起的呢?</p>
<p>这就需要A要用自己的私钥给交易签名，其他人收到这笔交易后，要用A的公钥去验证签名。签名用私钥，验证用公钥，用的仍然是同一个人的。</p>
<p>创建账户产生相同公私钥的可能性微乎其微，所以大量创建账户来窃取其他人账户是不可行的。</p>
</blockquote>
<p>我们假设产生公私钥时有一个好的<strong>随机源</strong>(a good source of randomness)，产生公私钥是随机的，如果随机源不好，就有可能产生相同的公私钥。比特币中用的签名算法，不仅是生成公私钥的时候要有好的随机源，之后每一次签名时也要有好的随机源。只要有一次签名用的随机源不好的话，就有可能泄露私钥。</p>
<h1>比特币数据结构</h1>
<h2 id="1-哈希指针">1. 哈希指针</h2>
<blockquote>
<p>普通指针存储的是某个结构体在内存中的地址。假如P是指向一结构体的指针，那么P里面存放的就是该结构体在内存中的起始位置。</p>
</blockquote>
<p>而哈希指针除了要存地址之外，还要**保存该结构体的哈希值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span> **。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730191.png" alt="image-20220413170006821" style="zoom:50%;" />
<blockquote>
<p>好处:</p>
<p>从哈希值这个哈希指针，不仅可以找到该结构体的位置，同时还能够检测出该结构体的内容有没有被篡改，因为我们保存了它的哈希值。</p>
</blockquote>
 <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730610.png" alt="image-20220413165912117" style="zoom:50%;" />
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729562.png" alt="在这里插入图片描述"></p>
<p>比特币中最基本的结构就是区块链，区块链就是一个一个区块组成的链表。区块链和普通的链表相比有什么区别:</p>
<ol>
<li>
<p>用哈希指针代替了普通指针(B block chain is a linked list using hash pointers)</p>
<ul>
<li>
<p>区块链第一个区块叫作创世纪块(genesis block)</p>
</li>
<li>
<p>最后一个区块是最近产生的区块(most recent block)</p>
</li>
<li>
<p>每一个区块都包含指向前一个区块的哈希指针</p>
<blockquote>
<p>一个区块的哈希指针怎么算:</p>
<p>是把前面整个区块的内容，包括里面的hash pointer ，合在一起取哈希值。</p>
<p>通过这种结构，可以实现 tamper-evident log。</p>
<ul>
<li>如果有人改变了一个区块的内容，后面一个区块的哈希指针就对不上，因为后一个区块哈希指针是根据前一个区块的内容算出来的，所以后一个哈希指针也得改</li>
<li>以此类推，我们保留的是最后一个哈希值也会变化。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li>
<p>普通链表可以改变任意一个元素，对链表中其他元素是没有影响的。而区块链是牵一发而动全身，因为只需要保存最后一个哈希值，就可以判断区块链有没有改变，在哪里改变了。</p>
<blockquote>
<p>算出它的哈希值，与保留的区块的哈希值对比，即可。</p>
</blockquote>
<p>在实际应用中，一整条链可能会被切断分开保存在多个地方。</p>
<ul>
<li>若用户仅仅具有其中一段，当用到前面部分区块数据时，直接问系统中其他节点要即可;</li>
<li>当要到之后，仅仅通过计算要到的<strong>最后一个哈希值</strong>和<strong>自己保存哈希值</strong>是否<strong>一致</strong>可以判断所给内容是否确实为区块链上真实的内容。</li>
</ul>
</li>
</ol>
<h2 id="2-merkle-tree">2. Merkle Tree</h2>
<h3 id="2-1-结构">2.1 结构</h3>
<p>比特币中的另外一个结构是:Merkle tree。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729320.png" alt="image-20220413220424544"></p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730907.png" alt="image-20220413221307844" style="zoom:50%;" />
<p>(其中最下面一层是数据块(data blocks)，上面三层内部节点都是哈希指针(hash pointers)，第一层是根节点，根节点的区块也可以取个哈希，叫根哈希(root hash))</p>
<p>这种结构的好处:只要记住根哈希值，就能检测出对树中任何部位的修改。</p>
<p>比特币当中各区块之间用哈希指针连接在一起，每个区块所包含的交易组织成一个merkle tree的形式，最下面一行data blocks每个区块实际上是一个交易；</p>
<p>每个区块分为两部分，分别是块头和块身(block header ,block body)。</p>
<ul>
<li>块头里面有根哈希值，每个区块所包含的所有交易组成的merkle tree的根哈希值存在于区块的块头里面。</li>
<li>但是，块头里没有交易的具体内容，只有一个根哈希值，块身里面是有交易的列表的。</li>
</ul>
<h3 id="2-2-作用">2.2 作用</h3>
<p>merkle tree 的作用:</p>
<ol>
<li>
<p>提供merkle proof</p>
<p>比特币中的节点分为两类:</p>
<ul>
<li>全节点(保存整个区块的内容，即块头块身都有，有交易的具体信息)</li>
<li>轻节点(例如手机上的比特币钱包)(只有块头)</li>
</ul>
<p>这时存在一个问题:</p>
<p>==<strong>如何向一个轻节点证明某个交易是写入区块链的?</strong>==</p>
<p>这时需要用到merkle proof :找到交易所在的位置(最底行的其中一个区块)，这时该区块一直往上到根节点的路径就叫merkle proof。</p>
</li>
</ol>
 <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730195.png" alt="image-20220413222011859" style="zoom:50%;" />
<p>最上面一行是小型的区块链，该图展现的是一个区块的merkle tree，最下面一行是包含的交易。</p>
<p>假设某个轻节点想知道图中黄色的交易，是否包含在了merkle tree里面。该轻节点没有包含交易列表，没有这颗merkle tree的具体内容，只有一个根哈希值。</p>
<ul>
<li>这时轻节点向一个全节点发出请求，请求证明黄色的交易被包含在这颗merkle tree里面的merkle proof。</li>
<li>全节点收到这个请求之后，只需要将图中标为红色的这三个哈希值发给轻节点即可。</li>
<li>有了这些哈希值之后，轻节点可以在本地计算出图中标为绿色三个哈希值。</li>
<li>首先算出黄色交易的哈希值，即它正上方的那个绿的哈希值，然后跟旁边红色的哈希值拼接起来，可以算出上层节点绿色的哈希值。</li>
<li>然后再拼接，再算出上层绿色哈希值，再拼接，就可以算出整棵树的根哈希值。</li>
<li>轻节点把这个根哈希值和block header里的根哈希值比较一下，就能知道黄色的交易是否在这颗merkle tree里。</li>
</ul>
<p>全节点在merkle proof里提供的这几个哈希值，就是从黄色的交易所在的节点的位置到树根的路径上用到的这些哈希值。轻节点收到这样一个merkle proof之后，只要从下往上验证，沿途的哈希值都是正确的即可。</p>
<p>验证时只能验证该路径的哈希值，其他路径是验证不了的，即该图中红色的哈希值是验证不了的。</p>
<blockquote>
<p>这样是否不安全呢?假如黄色交易被篡改，它的哈希值发生了变化，<strong>那能不能调整旁边红色的哈希值，使得它们拼接起来的哈希值是不变的呢</strong> ?</p>
<p>不行，根据collision resistance，这是不可行的。(人为制造哈希碰撞)？？？</p>
</blockquote>
<blockquote>
<p>merkle proof可以证明merkle tree里面包含了某个交易，所以这种证明又叫proof of membership或 proof of inclusion。</p>
</blockquote>
<p>对于一个轻节点来说，验证一个merkle proof 复杂度是多少?</p>
<blockquote>
<p>假设最底层有n个交易，则merkle proof 复杂程度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">θ(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</p>
</blockquote>
<p>如何证明merkle tree里面没有包含某个交易?即proof of non-membership。</p>
<p>可以把整棵树传给轻节点，轻节点收到后验证树的构造都是对的，每一层用到的哈希值都是正确的，说明树里只有这些叶节点，要找的交易不在里面，就证明了proof of non-membership。问题在于，它的复杂度是线性的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，是比较笨的方法。</p>
<p>如果对叶节点的排列顺序做一些要求，比如按照交易的哈希值排序。每一个叶节点都是一次交易，对交易的内容取一次哈希，按照哈希值从小到大排列。要查的交易先算出一个哈希值，看看如果它在里面该是哪个位置。比如说在第三个第四个之间，这时提供的proof是第三个第四个叶节点都要往上到根节点。如果其中哈希值都是正确的，最后根节点算出的哈希值也是没有被改过的，说明第三、四个节点在原来的merkle tree里面，确实是相邻的点。要找的交易如果存在的话，应该在这两个节点中间。但是它没有出现，所以就不存在。<strong>其复杂度也是log形式，代价是要排序</strong>。排好序的叫作sorted merkle tree。</p>
<p><strong>比特币中没有用到这种排好序的merkle tree</strong>，<strong>因为比特币中不需要做不存在证明。</strong></p>
<blockquote>
<p>另外，只要一个数据结构是无环的(非循环链表)，都能用哈希指针代替普通指针。有环的话存在一个问题，他们的哈希值没法计算，没法确定一个哈希值固定的区块。</p>
</blockquote>
<h1>比特币共识协议</h1>
<blockquote>
<ul>
<li>双花攻击<br>
数字货币本身为带有签名的数据文件，虽然不能修改，但是可以进行复制。即：对用户来说，可以将同一货币花费两次。</li>
</ul>
</blockquote>
<blockquote>
<p>修改：对货币添加唯一编号（不可篡改），每次支付向货币发行单位查询真伪。<br>
该方法每次交易都需要依赖于第三方机构来判断货币真伪且防止双花攻击。是一个典型的第三方中心化方案。<br>
但是，很多场景下，并不存在这样一个<strong>可信赖的第三方机构</strong>。基于这个背景，以去中心化思想为核心的比特币系统便吸引了人们的注意力。</p>
</blockquote>
<h2 id="去中心化货币要解决两个问题">去中心化货币要解决<strong>两个问题</strong>:</h2>
<ol>
<li>数字货币的发行；</li>
<li>怎么验证交易的有效性，防止double spending attack。</li>
</ol>
<p>答案:</p>
<ol>
<li>
<p><s>比特币的发行是由挖矿决定的 (后面讲)</s></p>
</li>
<li>
<p>该问题的解决，依赖于系统中维护的一个数据结构，记录货币的使用情况（是否被花过？被谁花过？）。该数据结构由系统中全体用户共同维护，保证了交易的有效性。该数据结构，便是区块链</p>
</li>
</ol>
<p>举例，比特币的发行者A拥有铸币权(createcoin)：</p>
<p>假如发行10个比特币 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 分别给 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 各五个 → <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mn>5</mn><mo stretchy="false">)</mo><mi>C</mi><mo stretchy="false">(</mo><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(5)C(5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord">5</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">5</span><span class="mclose">)</span></span></span></span> ，该交易需要有A的签名，证明经A同意。同时还要说明花掉的10个比特币从哪来的。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730569.png" alt="image-20220413224616197" style="zoom:70%;" />
<p>比特币系统中每个交易都包含输入和输出两部分。</p>
<ul>
<li>输入部分要说明币的来源，</li>
<li>输出部分要给出收款人公钥的哈希。</li>
</ul>
<p>有的交易部分比较复杂，如C的货币来源是第二第三个方框.</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181730483.png" alt="image-20220413224724557"></p>
<p>图四就构成了一个小型的区块链。</p>
<p>这里有两种哈希指针，</p>
<ul>
<li>
<p>一种哈希指针是连接在各个区块之间的，把它们串起来构成一个链表，前面学的就是这种哈希指针。</p>
</li>
<li>
<p>而在该图中还有第二种哈希指针，是指向前面某个交易的指针，用来指明币的来源。</p>
</li>
<li>
<blockquote>
<p>为什么要有指向前面交易的指针:</p>
<p>证明币不是凭空捏造的是有记录的，同时也是防范double spending。</p>
</blockquote>
</li>
</ul>
<p>现在来看第二个方框里A向B的转账:</p>
<ul>
<li>该交易需要A的签名和B的地址。比特币系统里收款的地址是通过公钥推算出来的。比如B的地址就是B的公钥取哈希然后经过一些转换得到的。</li>
<li>A如何知道B的地址?比特币系统中没有查询对方地址的功能，必须通过其他渠道。比如某个电商网站，接受比特币支付，就可以公开它的地址或公钥。</li>
<li>A需要知道B的地址，B需要知道A的什么信息吗?B其实也要知道A的公钥，这代表A的身份。在交易中，收款方需要知道付款方的公钥，从而验证A签名是否有效。即A需要提供自己的公钥。</li>
</ul>
<blockquote>
<p>签名是用私钥签名公钥验证，加密是用公钥加密私钥解密</p>
</blockquote>
<h2 id="比特币脚本-bitcoin-script-：">比特币脚本(BitCoin Script)：</h2>
<p>在比特币系统中，通过执行脚本实现上述验证过程。</p>
<ul>
<li>每个交易的输入提一段脚本，包括给出公钥的过程，公钥也是在输入的脚本里指定的。</li>
<li>每个交易的输出也是一段脚本；</li>
<li>验证其的合法性，就需要把当前交易的输入脚本跟前面交易(提供币来源的交易)的输出脚本拼在一起，然后看看能不能顺利执行，如果能执行说明是合法的。</li>
</ul>
<h2 id="比特币区块信息">比特币区块信息</h2>
<p>上图对交易系统进行了简化，实际上每个区块(对应图中的每个方框)可以有很多交易，这些交易就组成merkle tree。每个区块分为块头和块身。</p>
<p>块头包含的是区块的宏观信息，比如:用的是比特币哪个版本(version)的协议，区块链当中指向前一个区块的指针(hash of previous block header)，整颗merkle tree 的根哈希值(merkle root hash)，还有两个域是跟挖矿相关的，一个是挖矿的难度目标预值(target)，另一个是随机数nonce。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729321.png" alt="image-20220413231531110"></p>
<p>这里的target，就是前面讲到的，整个块头的哈希要小于这个预值，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(block header)≤target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span>。block header里存的就是这个目标预值的编码(nBits)。</p>
<blockquote>
<p>这里需要注意，前一个区块的哈希只算的是前一个区块的块头，</p>
</blockquote>
<p>块身里面有交易列表(transaction list)。</p>
<p>系统中的节点分全节点(full node)和轻节点(light node)，全节点是保存区块链所有的信息的，验证每一个交易，所以全节点又叫fully validating node。轻节点只保存block header的信息，一般来说轻节点没法独立验证交易的合法性。</p>
<p>比如一个交易是不是double spending，轻节点没有存以前的交易信息所以它没法验证。<strong>系统中大多数节点是轻节点</strong>，因为轻节点没有参与区块链的构造和维护，只是利用了区块链的一些信息做一些查询。</p>
<h2 id="分布式共识">分布式共识</h2>
<p>区块链里的内容是如何写到区块链里面的呢:每个节点，每个账户都可以发布交易，交易是广播给所有节点的。有些交易是合法的，有些是非法的。谁来决定哪些交易应该被写入下一个区块中呢?按照什么顺序写呢?如果每个节点自己决定可以吗?如果每个人在本地维护一个区块链，那区块链的统一性得不到保证。</p>
<p>账本的内容是要取得分布式的共识(distributed consensus)。</p>
<blockquote>
<p>分布式的共识一个简单的例子就是分布式的哈希表(distributed hash table)，比如系统里有很多台机器，共同维护一个全局的哈希表。</p>
<p>这里需要取得共识的内容是什么？哈希表中包含了哪些键值对key valve pair。假如有人在自己电脑上插入一个键值对，'xiao’这个pair对应的是12345，即’xiao’→12345。那么别人在另一台读的时候也要能把这个读出来，这就叫一个全局的哈希表。</p>
</blockquote>
<blockquote>
<p>关于分布式系统有很多不可能结论(impossibility result)，其中最著名的是FLP。这三个字母是三个专家的名字缩写，他们的结论是:</p>
<p>在一个异步的(asynchronous)系统里，(网络传输迟延没有上限就叫异步系统)，即使只有一个成员是有问题的(faulty)，也不可能取得共识。</p>
</blockquote>
<blockquote>
<p>根据CAP Theorem（Consistency一致性、Availability可用性、Partition tolerance容错性），任何一个分布式系统中，最多只能满足其中两个性质。</p>
</blockquote>
<blockquote>
<p>分布式共识一个著名的协议是Paxos，该协议能够保证一致性，即第一个性质。</p>
</blockquote>
<h3 id="比特币中的共识协议-consensus-in-bitcoin">比特币中的共识协议(consensus in BitCoin):</h3>
<p>比特币中共识要解决的一个问题是，有些节点可能是有恶意的。我们假设系统中大多数节点是好的，那么该如何取得共识协议?</p>
<blockquote>
<p>背景：假设系统中存在部分节点有恶意，但存在比例较小。大多数节点为“好”的节点，在这种情况下进行共识协议设置。<br>
想法1：直接投票<br>
某个节点打包交易到区块，将其发给其他节点，其他节点检查该候选区块，检查若正确投赞成票，若票数过半数，加入区块链。<br>
存在的问题1——恶意节点不断打包不合法区块，导致一直无法达成共识，时间全花费在投票上。<br>
存在的问题2——无强迫投票手段，某些节点不投票。<br>
存在的问题3——网络延迟事先未知，投票需要等多久？效率上会产生问题。<br>
更大的一个问题——membership，投票权。如果是联盟链，对加入成员有要求，可以基于投票。但比特币系统，任何人都可以加入，且创建账户及其简单，只需要本地产生公私钥对即可。只有转账（交易）时候,比特币系统才能知道该账户的存在。这样，黑客可以使用计算机专门生成大量公私钥对，当其产生大量公私钥对超过系统中一半数目，就可以获得支配地位（<strong>女巫攻击</strong>）。所以，这种简单的投票方案也是不可行的。</p>
</blockquote>
<p>比特币账户巧妙的解决了这个问题，不是按照账户数目投票，而是按照<strong>计算力来投票</strong>。</p>
<ul>
<li>
<p>每个节点都可以在本地组装出一个候选区块，把它认为合法的交易放在里面，然后开始尝试各种nonce值(占4 byte)，看哪一个能满足不等式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(block header)≤target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span> 的要求。</p>
</li>
<li>
<p>如果某个节点找到了符合要求的nonce，它就获得了记账权。</p>
<ul>
<li>
<p>所谓的记账权，就是往比特币账本里写入下一个区块的权利。只有找到这个nonce，获得记账权的节点才有权利发布下一个区块。其他节点收到这个区块之后，要验证这个区块的合法性。</p>
</li>
<li>
<p>比如括号里block header的内容填的对不对；block header里面有一个域，叫nBits域，实际上它是目标预值的一个编码检查一下nBits域设置的是不是符合比特币协议中规定的难度要求；该不等式是否成立。假设都符合要求，然后检查block body 里面的交易列表，验证一下每个交易都是合法的:</p>
<ul>
<li>要有合法的签名</li>
<li>以前没有被花过</li>
</ul>
</li>
</ul>
</li>
<li>
<p>如果有一项不符合要求，这个区块就是不能被接受的。</p>
</li>
<li>
<p>如果所有条件都符合，也不一定接受。</p>
</li>
</ul>
<blockquote>
<ol>
<li>
<p>会不会合法区块被拒绝？<br>
如图所示。发生分叉的情况下，暂时保存分叉情况，但区块链只承认最长合法链，随着时间推移，必然存在某一条链变成最长合法链。这样，也就会导致合法区块被拒绝.</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731137.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>分叉攻击<br>
如图所示，A用户对上面的A转账给B的记录回滚，从而非法获取利益。在两条链上，发现交易都合法。这是一个典型的双花攻击。A给B转账后，用分叉攻击将钱又转回来，覆盖掉原来的记录。<br>
在比特币系统中，这种情况实际上很难发生。因为大多数矿工认可的是最长的合法链，会沿着上面的链继续挖下去。而A这个攻击者要想回退记录，就必须使得下面的链变得比上面的链还长。理论上来说，攻击者需要达到整个系统中51%的计算力，才能使得这种攻击成功。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731066.png" alt="在这里插入图片描述"></p>
</li>
</ol>
</blockquote>
<p>区块链在正常情况下也可能出现分叉:两个节点同时获得记账权。每个节点在本地自己组装一个它认为合适的区块，然后去试各种nonce，如果两个节点在差不多同一个时间找到了符合要求的nonce，就都可以把区块发布，这时会出现两个等长的分叉。</p>
<p>这两条都是最长合法链，那该接受那条呢?</p>
<p>比特币协议当中，在缺省(默认的意思)情况下，每个节点是接受它最早收到的那个。所以不同节点根据在网络上的位置不同，有的节点先听到新生成的其中一个区块，那就接受这个区块；有些节点先听到另一个区块，那就接受另一个区块。</p>
<blockquote>
<p>如何判断接收了一个区块?</p>
<p>比特币协议中用到了implicit consign，如果沿着这个区块往下继续扩展，就算认可了这个发布的区块。</p>
<p>比如在新生成的其中一个区块后面又拓展一个区块，表明就认可了这个新区块。</p>
</blockquote>
<p>**等长的临时性的分叉会维持一段时间，直到一个分叉胜出。**也就是哪一个链抢先一步生成了新的区块，哪一条就是最长合法链。另一个作废的就叫orphan block。这两个新区块有可能会各自拉拢，两个区块链看谁的算力强，有时候也是看谁的运气好，就会胜出。</p>
<p>竞争记账权的好处:</p>
<ul>
<li>首先获得记账权的节点本身有一定的权力，可以决定哪些交易写到下一个区块里。但这些不应该被设定为竞争记账权的动力，所以巧妙地建立了一个机制:区块奖励(block reward)。</li>
<li>比特币协议中规定获得记账权的节点在发布的区块里可以有一个特殊的交易:铸币交易。在这个交易里可以发布一定数量的比特币。</li>
</ul>
<p>这里要回到前面的问题①，谁来决定货币的发行?</p>
<ul>
<li>coinbase transaction币基交易，是比特币系统中发行新的比特币的唯一方法，后面的交易都是比特币的转移。这个交易不用指出币的来源。</li>
<li>因此当一个区块胜出后，另一个作废的区块得到的比特币是没有作用的，其他诚实的区块是不会承认的。</li>
</ul>
<h2 id="总结：">总结：</h2>
<p>比特币系统中要取得什么共识?</p>
<p>去中心化的账本要取得共识。</p>
<p>谁又能决定账本的内容呢?</p>
<p>只有获得记账权的节点才能写东西。</p>
<p>怎么获得记账权呢?</p>
<p>就是解pow(挖矿)。按照算力记票，算力可以用每秒能试多少nonce数值表示。</p>
<p>怎样防范女巫攻击呢?</p>
<p>按算力记票，即使创建再多的账户，也无法使算力增强。</p>
<blockquote>
<p>比特币争夺记账权的过程叫作挖矿(mining)，比特币被称为数字黄金(digital gold)，争夺记账权的节点被称为矿工(miner)。</p>
</blockquote>
<h1>比特币系统的实现</h1>
<h2 id="utxo">UTXO</h2>
<p>区块链是去中心化的账本，比特币使用的是基于交易的这种账本模式(transaction[交易]-based ledger[账本])。系统当中<strong>并不会显示每个账户有多少钱</strong>。</p>
<p>比特币系统的全节点要维护一个叫 <code>UTXO</code> (unspent transaction output)(还没有被花出去的交易的输出)的数据结构。</p>
<blockquote>
<p>区块链上有很多交易，有些交易的输出可能已经被花掉，有些还没有被花掉。<strong>所有没有被花掉的输出的集合</strong>就叫做UTXO。</p>
<ul>
<li>如图，A转给B5个BTC，之后B将其转给D，则UTXO中会删掉A-&gt;B这一交易记录，同时会添加B-&gt;D这一交易记录。</li>
<li><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729519.png" alt="在这里插入图片描述"></li>
<li>UTXO集合当中的每个元素要给出 <strong>产生输出的交易</strong> 的哈希值，以及它在这个交易里是第几个输出。这两个信息就可以定位到UTXO中的输出。</li>
</ul>
</blockquote>
<p>UTXO集合有什么作用?</p>
<p>为了检测 double spending。即检测新发布的交易是否合法。因此全节点要在内存中维护UTXO这样一个数据结构，以便==<strong>快速检测double spending</strong>==。</p>
<p>每个交易要消耗掉一部分输出，也会产生新的输出。还看上面的例子，B花掉的5个比特币虽然不在UTXO里面，但如果他转账给D，而D没有花掉，那么这5个比特币又要保存在UTXO里面。如果D始终不花，那么这个信息要永久保存在UTXO里面。有可能是不想花，也有可能是把密钥丢了。</p>
<p>每个交易可以有多个输入，也可以有多个输出，所有输入金额之和要等于输出金额之和。即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>s</mi><mo>=</mo><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">total inputs=total outputs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span>。因此一个交易可能来自多个地址，可能有多个签名。</p>
<h3 id="交易费-transaction-fee">交易费(transaction fee)</h3>
<p>有些交易total inputs略微大于total outputs。</p>
<p>假如输入1比特币，输出0.99比特币，另外0.01比特币作为交易费给获得记账权发布区块的节点。</p>
<p>区块奖励也不能完全作为挖矿的奖励，发布区块的节点为什么一定要把你的交易打包在区块呢?他们还要验证你的交易的合法性，如果交易较多占用的带宽会比较大，网络传播速度也会更慢。所以只有区块奖励是不够的。</p>
<p>因此比特币系统设计了第二个激励机制:交易费(transaction fee)。也就是你把我的交易打包在区块里，我给你一些小费。交易费一般很小，也有一些简单的交易没有交易费。</p>
<blockquote>
<p>除了比特币这种基于交易的模式，与之对应的还有基于账户的模式(account-based ledger)，比如以太坊系统。在这种模式中，系统是要显示的记录每个账户上有多少币。</p>
<p>比特币基于交易的模式，隐私保护性较好。缺点是比特币当中的转账交易要说明币的来源，而基于账户的模式就不用。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729242.png" alt="image-20220414002925126"></p>
<p>一个区块的例子</p>
<p>第一行表明:该区块包含了686个交易</p>
<p>第二行:总输出XXX个比特币</p>
<p>第四行:总交易费(686个交易的交易费之和)</p>
<p>第五行:区块的序号</p>
<p>第六行:区块的时间戳</p>
<p>第九行:挖矿的难度(每隔2016个区块要调整挖矿的难度，保持出块时间在10分钟左右)</p>
<p>倒数第二行:挖矿时尝试的随机数</p>
<p>最下面一行:区块奖励(矿工挖矿的主要动力)</p>
<p>右边:第一行:该区块块头的哈希值</p>
<p>第二行:前一个区块块头的哈希值</p>
<p>(注意:计算哈希值只算块头)</p>
<p>两个哈希值的共同点:前面都有一串0。是因为，设置的目标预值，表示成16进制，就是前面一长串的0。所以凡是符合难度要求的区块，块头的哈希值算出来都是要有一长串的0。</p>
<p>第四行:merkle root 是该区块中包含的那些交易构成的merkle tree的根哈希值。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729251.png" alt="image-20220414003017920"></p>
<p>最后一行:是32位的无符号整数。nonce只有2的32次方个可能的取值。按照比特币现在的挖矿情况来说，很可能把2的32次方个取值都验了一遍也找不到合适的。那怎么办呢?block header 的数据结构里还有哪些域是可以调整的呢?</p>
<p>第一行:比特币协议的版本号(无法更改的)</p>
<p>第二行:前一个区块的块头的哈希值(无法更改)</p>
<p>第三行:merkle tree的根哈希值(可以更改)</p>
<p>第四行:区块产生的时间(可以调整)比特币系统不要求特别精确的时间，可以在一定范围内调整。</p>
<p>第五行:目标预值(编码后的版本)(只能按协议中的要求定期调整)</p>
<p>第六行:随机数</p>
<p>挖矿时只改随机数不够，还可以更改根哈希值。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729732.png" alt="image-20220414003210408"></p>
<p>铸币交易没有输入，它有一个coinbase，可以写入任何的内容。coinbase的内容是没有人会检查的，甚至可以写你的心情。</p>
<p>那这个域对我们有什么用呢?</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731961.png" alt="image-20220414003250433" style="zoom:30%;" />
<p>对应的是最后一个block header里的根哈希值对应的merkle tree，左下角的交易是coinbase，</p>
<p>块头里4个字节的nonce不够用，还有其他字节可以用，<strong>比如coinbase域的前八个字节当做extra nonce来用</strong>，这样子搜索空间就增大到了2的96次方。</p>
<p>所以真正挖矿的时候只有两层循环，外层循环调整coinbase域的extra nonce。算出block header里的根哈希值之后，内层循环再调整header里的nonce。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731143.png" alt="image-20220414003411450" style="zoom:50%;" />
<p>该交易有两个输入和两个输出。</p>
<p>左上角:这里的output其实是输入，指的是之前交易的output。</p>
<p>右上角:这里的output都是unspent，都没有被花掉，会保存在UTXO里面。</p>
<p>右边表格第一行:输入的总金额。</p>
<p>依次往下:输出总金额、两者之间的差值。</p>
<p>两表格下面:可以看出输入和输出都是用脚本的形式来指定的。</p>
<p>比特币系统中验证交易的合法性，就是把input scripts和output script配对后执行来完成的。</p>
<blockquote>
<p>注意:不是把图中的input scripts 和output scripts配对，因为这两个脚本是一个交易中的脚本。</p>
</blockquote>
<p>不是把同一个交易里的输入脚本和输出脚本配对，而是把这里的输入脚本和前面提供币来源的交易的输出脚本配对。如果输入输出脚本拼接在一起，能顺利执行不出现错误，那么该交易就是合法的。</p>
<h1>比特币网络</h1>
<p>比特币工作于网络应用层，其底层（网络层）是一个P2P Overlay network（P2P覆盖网络）。比特币系统中所有节点完全平等，不像一些其他网络存在超级节点(super node)。要加入网络，至少需要知道一个种子节点，通过种子节点告知自己它所知道的节点。节点之间的通信采用了TCP协议，便于穿透防火墙。当节点离开时，只需要自行退出即可，其他节点在一定时间后仍然没有收到该节点消息，便会将其删掉。</p>
<p>比特币网络设计原则：<strong>简单</strong>、<strong>鲁棒</strong>（最坏情况下能达到最优状况，即健壮性）而非高效。</p>
<ul>
<li>每个节点维护一个邻居节点集合，消息传播在网络中采用<strong>洪泛法 flooding</strong>，某个节点在收到一条消息会将其发送给所有邻居节点并标记，下次再收到便不会再发送该消息。</li>
<li>邻居节点选取随机，未考虑网络底层拓扑结构，也与现实世界物理地址无关。该网络具有极强鲁棒性，但牺牲了网络效率。</li>
</ul>
<p>比特币系统中，每个节点要维护一个等待上链的交易集合。</p>
<ul>
<li>第一次听到交易，若是合法交易，则将其加入该交易集合并转发给邻居节点，以后再收到该交易就不再转发（避免网络上交易无线传输）。</li>
<li>假如网络中存在两个冲突交易，如交易1：A-&gt;B,交易2：A-&gt;C（假设花费的同一笔钱）。具体接收哪个取决于节点先接收到哪个交易，之后收到另一个交易会将其放弃。</li>
</ul>
<blockquote>
<p>假如某个节点先听到A-&gt;B，但又听到A-&gt;C已经上链，则此时A-&gt;B为非法交易，所以要再等待上链交易集合中删除A-&gt;B</p>
</blockquote>
<p>新发布区块在网络中传播方式与新发布交易传播方式类似，每个节点除检查该区块内容是否合法，还要检查是否位于最长合法链上。区块越大，则网络上传输越慢。BTC协议对于区块大小限制为不大于1M大小。</p>
<blockquote>
<p>区块大小越大，网络上传播时延越长；区块大小越小，则可以包含的交易数目越少。</p>
</blockquote>
<p>此外，比特币网络传播属于 <strong>Best effort（尽力而为）</strong> ，不能保证一定传输成功。以一个交易发布到网络上，未必所有节点都能收到，也未必所有节点收到交易顺序都一致。</p>
<h1>BTC挖矿难度调整</h1>
<p>在比特币系统中，区块链的出块时间保持在平均10min左右。毫无疑问的是，伴随着参与挖矿的人增多，系统总算力不断增强，挖矿的难度绝对不能一成不变。实际上，在比特币系统开发过程中，中本聪便考虑到了这个问题，并设计了一个相应的难度调整算法。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">H(block header)&lt;=target.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord">.</span></span></span></span></span></p>
<ol>
<li>如果不调整挖矿难度会怎么样？<br>
系统总算力越来越强，若挖矿难度保持不变，则出块时间会越来越短。</li>
<li>出块时间越来越短是好事吗？<br>
出块时间缩短，那么交易可以很快便被写入区块链，并且提高了系统响应时间，增加了区块链系统效率。但是，出块时间并不是越短越好。出块时间太短，也会造成一定的问题。首先，区块在网络上传播具有时延，假如出块时间为1秒，但网络传播需要10秒，则会使得系统中节点经常性处于不一致的状态，增加了系统不稳定性，且系统经常性位于分叉状态（不仅二分叉，乃至多分叉）。分叉过多，则不利于系统达成共识，且会造成算力分散，使得黑客攻击成本大大降低(不再需要整个系统51%的算力)。</li>
<li>10min的出块间隔是最优吗？<br>
当然不是，但可以确定的是，系统出块时间需要维持在一个定值附近。后续文章中会介绍以太坊，以太坊中平均出块时间仅为15秒左右，但同样在以太坊中也有相应难度调整算法维持其平均出块时间，当然15s的时间明显会产生经常性的分叉，所以以太坊设计了新的共识协议Ghost。<br>
当然，对于一个交易系统来说，10min这样一个交易时间是比较长的。但对于跨国交易来说，这个时间反而大大缩短了交易时间，减少了相应成本。</li>
</ol>
<blockquote>
<p>比特币系统采用的哈希算法为SHA-256，对于挖矿难度的调整，可以视为调整目标空间在整个输出空间中所占比例大小。</p>
<p>调整目标空间所占比例，简单的说需要目标值前需要多少个0。<br>
当然，挖矿难度和目标阈值成反比，如下图所示，其中difficulty_1_target为是挖矿难度为1时候的target，即最小挖矿难度</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731912.png" alt="img"></p>
</blockquote>
<p>在BTC协议中规定，每隔2016个区块需要调整一次难度，根据10min产生一个新区块可以得到，大概需要14天的时间。具体调整公式如下</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729746.png" alt="img"></p>
<blockquote>
<p>可见，如果实际实际比较长，target会比较大，相应的挖矿难度会降低；如果实际实际比较短，target会比较小，相应的挖矿难度会增大。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181729131.png" alt="image-20220414010101139"></p>
<h1>BTC挖矿</h1>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>全节点</strong></th>
<th style="text-align:center"><strong>轻节点</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">一直在线</td>
<td style="text-align:center">不是一直在线</td>
</tr>
<tr>
<td style="text-align:center">在本地硬盘上维护完整区块链信息</td>
<td style="text-align:center">不保存整个区块链，只需要保存每隔区块块头</td>
</tr>
<tr>
<td style="text-align:center">在内存中维护UTXO集合，以便于快速检验交易合法性</td>
<td style="text-align:center">不保存全部交易，只保存和自己有关的交易</td>
</tr>
<tr>
<td style="text-align:center">监听比特币网络中交易内容，验证每个交易合法性</td>
<td style="text-align:center">无法验证大多数交易合法性，只能检验和自己相关的交易合法性</td>
</tr>
<tr>
<td style="text-align:center">决定哪些交易会打包到区块中</td>
<td style="text-align:center">无法检测网上发布的区块正确性</td>
</tr>
<tr>
<td style="text-align:center">监听其他矿工挖出的区块，验证其合法性</td>
<td style="text-align:center">可以验证挖矿难度</td>
</tr>
<tr>
<td style="text-align:center">挖矿：1. 决定沿着哪条链挖下去。2. 当出现等长分叉，选择哪一个分叉</td>
<td style="text-align:center">只能检测哪个是最长链，不知道哪个是最长合法链</td>
</tr>
</tbody>
</table>
<p>在比特币网络中，大多数节点都是轻节点。如果只是想进行转账操作，不需要挖矿，就无需运行一个全节点。</p>
<p><strong>在挖矿过程中，如果监听到别人已经挖出区块延申了最长合法链，此时应该立刻放弃当前区块，在本地重新组装一个指向最后这个新合法区块的候选区块，重新开始挖矿。</strong></p>
<p>这样是不是有些可惜？之前花费好多资源，全部白挖了。<br>
实际上并不可惜。挖矿本身具有无记忆性(伯努利试验)，前面无论挖多久，对后续继续挖矿没有影响。</p>
<p>比特币系统如何安全性？</p>
<ul>
<li>一是密码学的保证：别人没有自己的私钥，就无法伪造其合法签名，从而无法将其账户上BTC转走。（前提：系统中大多数算力掌握在好人手中）</li>
<li>二是共识机制：保证了恶意交易不被系统承认。</li>
</ul>
<p>普通CPU -&gt; GPU -&gt;ASIC芯片（挖矿专用矿机）</p>
<h2 id="大型矿池出现">大型矿池出现</h2>
<blockquote>
<p>挖矿另一个趋势便是大型矿池的出现。对于单个矿工来说，即使使用了ASIC矿机，其算力在整个系统中仍然只占据很少一部分，即使从平均收益看有利可图，但收入很不稳定。<br>
此外，单个矿工除挖矿还要承担全节点其他责任，造成了算力的消耗。</p>
</blockquote>
<p>矿池的架构如下图，通常是一个全节点驱动多台矿机。矿工只需要不停计算哈希值，而全节点其他职责由矿主来承担。ASIC芯片只能计算哈希值，不能实现全节点其他功能。此外，矿池出现解决了单个矿工收益不稳定的问题。当获得收益后，所有矿工对收益进行分配，从而保证了收益的稳定性。</p>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731188.png" alt="在这里插入图片描述"></p>
<h2 id="51-算力矿池可以发动哪些攻击">51%算力矿池可以发动哪些攻击</h2>
<ol>
<li>
<p>分叉攻击<br>
对已经经过6次确认的交易分叉，利用51%算力将交易记录回滚。</p>
<blockquote>
<p>矿工只能计算哈希值，并不知道区块包含哪些交易，区块链状况是什么。所以，这些“群众”是无知的，容易被利用<br>
此外，51%攻击只是一个概率问题，并非达到51%算力就能发动攻击，不能达到就无法发动攻击。此外，矿池本身算力也是在不断变化的。</p>
</blockquote>
</li>
<li>
<p>封锁交易（Boycott）<br>
假如攻击者不喜欢某个账户A，不想让A的交易上区块链，在监听到有其他人将A的交易发布到区块链上时，立刻发动分叉攻击，使A所在链无法成为”最长合法链“。这样，便实现了对A账户的封锁。</p>
</li>
<li>
<p>盗币（将他人账户BTC转走）<br>
这个是<strong>不可能</strong>的，因为其并没有他人账户私钥。如果依仗算力强，强行将没有签名的转账发布到区块链，正常节点不会认为其合法，这样，即使这条链再长，其他人也不会认为其是最长合法链。</p>
</li>
</ol>
<h2 id="矿池出现的优劣">矿池出现的优劣</h2>
<ul>
<li>优点：解决了矿工收入不稳定的问题，减轻了矿工的负担。</li>
<li>缺点：威胁到了区块链系统的安全，使得51%攻击变得容易起来。</li>
</ul>
<h1>BTC 脚本语言</h1>
<h1>BTC 分叉</h1>
<p>分叉指的是，原来的系统中为一条链，但分成了两条链。</p>
<p>分叉形成的原因可能有多种，例如：</p>
<ul>
<li>挖矿时两个节点差不多同时挖出矿，都会发布区块(对比特币系统当前状态产生分歧导致的分叉——state fork)；</li>
<li>分叉攻击，同样也会导致分叉(forking attack，人为故意造成)；</li>
<li>比特币协议改变，在分布式系统中不能保证所有节点同时升级软件，假设存在少数节点未升级，导致出现分叉(protocal fork)；</li>
</ul>
<h2 id="硬分叉">硬分叉</h2>
<blockquote>
<p>什么情况会出现硬分叉？<br>
对比特币协议增加新协议，扩展新功能，未升级软件的旧节点会不认可这些修改，会认为这些特性是非法的。这也就是对比特币协议内容产生分歧，从而导致分叉。硬分叉的一个典型例子，就是对比特币区块大小限制的修改。</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731862.png" alt="image-20220414013445482" style="zoom:50%;" />
<p>假设系统中大多数节点更新了软件</p>
<p>对于新节点来说，上面的为最长合法链，新节点便都会沿着上面的链继续挖；对于旧节点来说，上面的链无论多么长，都是一条非法链，不会认可该链，所以旧节点就会沿着下面的链继续挖矿。</p>
<p>此时，就出现了新节点永远沿着上面的链挖矿，旧节点永远沿着下面的链挖矿，由于新节点算力足够强，所以形成两条永远都在延伸且平行的链。当然，上面的链，也有可能会挖出大小在1MB内的小区块，但对旧节点来说，该链上存在非法区块，不会认可该链。可见，这种分叉是持久性的。<br>
只要这部分旧节点永远不更新软件，下面的链便永远不会消失。</p>
<blockquote>
<p>实际上，这个事情真正出现过。以太坊历史上的一件大事就是硬分叉事件。以太坊称为ETH，但目前看到的ETH已经不是最初的ETH了，以太坊在历史上发生过硬分叉，另一个链称为ETC。</p>
<p>实际上，ETC才是以太坊设计原本的协议，而ETH是黑客攻击ETH上一个智能合约THE DAO后进行回滚的协议链(将黑客攻击偷取的以太币采用硬分叉方式回滚回到另一智能合约，然后退还给真正拥有者)。<br>
但是这次硬分叉的后果，由于有人不愿意这么做，造成了以太坊社区的分裂。实际上，虽然ETC不如ETH又名，但实际它也是目前一种主流货币。<br>
分叉之初，由于两个链分叉造成了互相影响，产生了很多麻烦。比如：在ETH链上有一笔转账B-&gt;C，有人便在ETC链上回放，将ETC链上的货币页转给了C(C收到两笔钱)。后来，对两条链各添加了一个chainID，将两个链区分开，才使得这两条链真正分开。</p>
</blockquote>
<h2 id="软分叉">软分叉</h2>
<p>如果对BTC协议添加限制，使得原本合法交易在新交易中不合法，便会形成软分叉。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181731820.png" alt="image-20220414014251943" style="zoom:50%;" />
<p>假设系统中大多数节点更新了软件</p>
<p>旧节点挖出的区块一直被抛弃，无法得到出块奖励(不在最长合法链上)。这就倒逼旧节点升级软件，最终会实现区块链上的所有矿工共同认可新协议，实现软件协议的升级。</p>
<p>需要注意的是，旧节点如果不升级软件，挖出的区块可能就白挖了，但对于系统来说，不会存在永久性分叉。</p>
<h3 id="系统中可能出现软分叉的情况及其实例">系统中可能出现软分叉的情况及其实例</h3>
<ol>
<li>给某些目前协议中未规定的域赋予新的含义或规则。<br>
最经典的就是，铸币交易中CoinBase域。在CoinBase域中写入任何内容都可以，没有任何规定。之前，在介绍挖矿时，提到挖矿本质是调整block header中的nonce，但其本身只有4个字节，搜索空间太小。所以实际使用中，将CoinBase域前8个字节作为另一个extra nonce，此时搜索空间从原本2^32 增长到2^96，对于目前挖矿难度来说已经足够。<br>
但CoinBase中并不是只有8个字节，还剩下很多空间。有人便提出将其作为UTXO(当前还没花掉的交易集合)集合的根哈希值。目前UTXO是全节点自己在本地为了方便查询自行维护的，但UTXO内容并未写入区块链（还记得Merkle proof吗？Merkle proof用于验证某个交易是否在区块中，Merkle proof的交易信息是写入区块链的。）<br>
由于UTXO存在本地，如果查询某账户余额，轻节点便需要询问全节点，全节点根据UTXO中信息可以计算得到账户余额，但如何确保全节点给的数据可信？由于直接修改block header会造成硬分叉，有人便提出了以上的方案(该域刚好无人用)。<br>
可以看到，旧节点认可新节点的区块，但新节点对于旧节点CoinBase域检查时候，发行并没有这个UTXO的根哈希值，不会认可其发布的区块，所以这是软分叉。</li>
<li>P2SH：Pay to Script Hash<br>
比特币脚本中的功能，最初比特币版本中没有该功能，后来通过软分叉方法加入了进去。</li>
</ol>
<h2 id="总结">总结</h2>
<ul>
<li>soft fork<br>
特点：只要系统中拥有半数以上算力节点更新软件，系统就不会产生永久性分叉</li>
<li>hard fork<br>
特点：必须系统中所有节点更新软件，系统才不会产生永久性分叉</li>
</ul>
<h1>BTC 匿名性分析</h1>
<h2 id="btc系统中什么情况会破坏其匿名性？">BTC系统中什么情况会破坏其匿名性？</h2>
<ol>
<li>
<p>用户可以生成多个地址账户，但这些地址账户可以被关联起来<br>
表面上看，每次交易可以更换公私钥对，从而每次都是新的账户，具有很强的匿名性。但实际上，这些账户在一定情况下，是可以被关联起来的。</p>
</li>
<li>
<p>地址账户与个人在真实社会中的身份也可能会产生关联。<br>
任何使得BTC和实体世界中关联的操作都有可能泄露用户真实身份，其中最明显的就是资金的转入转出。要得到BTC，如果用钱买，就会与实体世界进行交互。想要将BTC转为现实中的货币，也同样需要与实体世界交互。</p>
</li>
</ol>
<p>BTC匿名性有多好？如何提高匿名性？<br>
匿名的本质是不想要暴露身份。而对于普通人来说，BTC的现有机制已经足够保持个人隐私了。但如果涉及违法，行政机关想要获得真实身份，其实很容易。</p>
<p>那么可以采取哪些方法尽可能提高匿名性？</p>
<blockquote>
<p>从应用层看，可以将各个不同用户的BTC混合在一起，使得追查变得混乱(Coin mixing)；从网络层看，可以采用多路径转发的方法，数据不直接发送出去，而是经过很多跳(洋葱路由的基本思想)。</p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>比特币</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformer</title>
    <url>/2022/01/18/Transformers/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206170944160.gif" alt=""></p>
<h2 id="自注意力">自注意力</h2>
<ul>
<li>
<p>自注意力池化将层 xi 当作key，value，query来对序列抽取特征</p>
<ul>
<li>完全并行、最长序列为1、但对长序列计算复杂度高</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162212624.png" alt="image-20220616221239595" style="zoom:50%;" />
</li>
<li>
<p>位置编码</p>
<ul>
<li>
<p>与CNN/RNN不同，自注意力没用记录位置信息<span id="more"></span></p>
</li>
<li>
<p>将位置编码矩阵<strong>P</strong>加入到输入<strong>X</strong>里面：<strong>X</strong>+<strong>P</strong>作为编码输入</p>
</li>
<li>
<p>绝对位置</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162212419.png" alt="image-20220616221252400" style="zoom: 50%;" />
<ul>
<li>相对位置</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162213156.png" alt="image-20220616221310139" style="zoom:50%;" />
<h2 id="transformer">Transformer</h2>
<ul>
<li>完全基于注意⼒机制，没有任何卷积层或循环神经网络层</li>
<li>编码器－解码器结构</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162215250.png" alt="image-20220616221501203" style="zoom:50%;" />
<h3 id="多头注意力">多头注意力</h3>
<p>​									<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162215339.png" alt="image-20220616221533312" style="zoom:50%;" />							<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162215116.png" alt="image-20220616221543091" style="zoom:50%;" /></p>
<ul>
<li>对同一key，value，query，希望提取不同的信息</li>
<li>使用h个独立注意力池化</li>
<li>合并各个head输出</li>
<li>类比多通道</li>
<li>识别不同的模式</li>
<li>缩放点积注意力</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162218545.png" alt="image-20220616221836522" style="zoom:50%;" /> 
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162218910.png" alt="image-20220616221854891" style="zoom:55%;" />
<h3 id="带掩码的注意力">带掩码的注意力</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162221045.png" alt="image-20220616222102020" style="zoom:50%;" />
<ul>
<li>解码器的输入是之前输出</li>
<li>在自注意力机制中能够看到全局</li>
<li>在解码器训练时，预测第t个的输出的时候，不应该看到t后面的输入</li>
<li>保证训练和预测的行为一致</li>
</ul>
<h3 id="层归一化">层归一化</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206162221800.png" alt="image-20220616222149767" style="zoom:50%;" />
<ul>
<li>
<p>批量归一化对每个特征/通道里的元素进行归一化</p>
<ul>
<li>不适合序列长度会变的自然语言处理</li>
<li>样本长度变化比较大，均值和方差抖动较大</li>
<li>预测时使用的全局均值和方差，遇到极端样本可能失效
<ul>
<li>把不同句子相同位置的token作为同一个特征进行归一化是不合适的</li>
</ul>
</li>
</ul>
</li>
<li>
<p>层归一化对每个样本里的元素归一化</p>
<ul>
<li>每个样本自己的均值和方差</li>
<li>更稳定</li>
</ul>
</li>
</ul>
<h3 id="信息传递">信息传递</h3>
<ul>
<li>
<p>假-设编码器输出 y<sub>1</sub>……y<sub>n</sub></p>
</li>
<li>
<p>将其作为解码中第 i 个 transformer 块中多头注意力的 key 和 value</p>
<ul>
<li>它的 query 来自目标序列</li>
</ul>
</li>
<li>
<p>使得编码器和解码器输出的维度一样</p>
</li>
<li>
<p>根据解码器不同的输入，在编码器中挑选（注意）到感兴趣的东西</p>
</li>
</ul>
<blockquote>
<p><a href="https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html">Google AI Blog: Transformer: A Novel Neural Network Architecture for Language Understanding (googleblog.com)</a></p>
<p><a href="https://d2l.ai/">https://d2l.ai/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>transformer</tag>
        <tag>cv</tag>
        <tag>nlp</tag>
      </tags>
  </entry>
  <entry>
    <title>VATT 多模态自我监督的transformer</title>
    <url>/2022/03/15/VATT-%E5%A4%9A%E6%A8%A1%E6%80%81%E8%87%AA%E6%88%91%E7%9B%91%E7%9D%A3%E7%9A%84transformer/</url>
    <content><![CDATA[<h2 id="how-to-empower-vision-transformers-with-large-scale-unlabeled-data">How to empower Vision Transformers with <strong>large scale</strong>, <strong>unlabeled</strong> data?</h2>
<ul>
<li>Troubling large-scale supervised training of Transformers
<ul>
<li>Rules out the much larger other part of“big visual data,”
<ol>
<li>i.e, the vast amount of unlabeled, unstructured visual data.</li>
<li>REQUIRE EVEN <strong>MORE LABELED DATA</strong> TO CORRECT THEIR BIASES.</li>
<li>EXTREMELY TIME-CONSUMING</li>
</ol>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201031807.png" alt="image-20220620103121749" style="zoom: 80%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201031443.png" alt="image-20220620103146392" style="zoom:60%;" />
<h3 id="vedio">Vedio</h3>
<p>Input: Raw rgb vedio.</p>
<ul>
<li>
<p>Clip size： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">T×H×W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span></p>
</li>
<li>
<p>Patch number:  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>t</mi><mo stretchy="false">⌉</mo><mtext>∙</mtext><mo stretchy="false">⌈</mo><mi>H</mi><mi mathvariant="normal">/</mi><mi>h</mi><mo stretchy="false">⌉</mo><mtext>∙</mtext><mo stretchy="false">⌈</mo><mi>W</mi><mi mathvariant="normal">/</mi><mi>w</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">⌈T/t⌉∙ ⌈H/h⌉∙⌈W/w⌉</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mclose">⌉</span><span class="mord">∙</span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathdefault">h</span><span class="mclose">⌉</span><span class="mord">∙</span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">⌉</span></span></span></span></p>
</li>
<li>
<p>Each patch: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>×</mo><mi>h</mi><mo>×</mo><mi>w</mi><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">t×h×w×3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></p>
</li>
<li>
<p>Linear projection: <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201033646.png" alt="image-20220620103356626" style="zoom: 50%;" /></p>
</li>
<li>
<p>Position embedding:</p>
<p>​	<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201034991.png" alt="image-20220620103443972" style="zoom:67%;" /></p>
<p>​											  <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201034248.png" alt="image-20220620103458230" style="zoom:50%;" /> 						<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201035348.png" alt="image-20220620103507312" style="zoom:50%;" /></p>
</li>
</ul>
<h3 id="audio">Audio</h3>
<ul>
<li>Input: 1D waveform input with length  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝑇</mi><mtext>′</mtext></msup></mrow><annotation encoding="application/x-tex">𝑇^′</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></li>
<li>Clip size：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msup><mi>𝑇</mi><mtext>′</mtext></msup><mi mathvariant="normal">/</mi><mi>𝑡</mi><mtext>′</mtext><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">⌈𝑇^′/𝑡′⌉</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mord">′</span><span class="mclose">⌉</span></span></span></span></li>
<li>Patch size: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑡</mi></mrow><annotation encoding="application/x-tex">𝑡</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>′</li>
<li>Linear projection: <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201039613.png" alt="image-20220620103929579" style="zoom:50%;" /></li>
<li>Postion embedding: Use <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msup><mi>𝑇</mi><mtext>′</mtext></msup><mi mathvariant="normal">/</mi><mi>𝑡</mi><mtext>′</mtext><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">⌈𝑇^′/𝑡′ ⌉</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mord">′</span><span class="mclose">⌉</span></span></span></span> learnable embedding.</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201039504.png" alt="image-20220620103938479" style="zoom: 67%;" />
<h3 id="text">Text</h3>
<ul>
<li>
<p>Dictionary: v</p>
</li>
<li>
<p>One hot vector;</p>
</li>
<li>
<p>Linear projection:  <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201040735.png" alt="image-20220620104056719" style="zoom:50%;" /></p>
</li>
<li>
<p>RELATIVE POSITIONAL ENCODING</p>
<ul>
<li>Transferable to SOTA text model T5</li>
</ul>
</li>
</ul>
<h3 id="droptoken">DropToken</h3>
<ul>
<li>
<p>Simple and yet effective strategy</p>
</li>
<li>
<p>Reduce the computational complexity during training</p>
</li>
<li>
<p>Reduce the redundancy in high-resolution data</p>
<ul>
<li>
<p>reducing the resolution or dimension of the raw inputs</p>
<p>VS.</p>
</li>
<li>
<p>keep high-fidelity input and randomly sample the tokens</p>
</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201041513.png" alt="image-20220620104154469" style="zoom: 67%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201042984.png" alt="image-20220620104227945" style="zoom:60%;" />
<h3 id="transformer-backbone">Transformer-backbone</h3>
<ul>
<li>MHA: multi-head attention</li>
<li>MLP: GeLU</li>
<li>LN: Layer Normalization</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201043596.png" alt="image-20220620104319570" style="zoom: 67%;" />
<h3 id="common-space-projection">Common Space Projection</h3>
<ul>
<li>Different levels of semantic granularity</li>
<li>不同的模态具有不同级别的语义粒度，因此我们应该将其作为公共空间投影中的归纳偏置。</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201044577.png" alt="image-20220620104422556" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201044771.png" alt="image-20220620104437734" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201044699.png" alt="image-20220620104452676" style="zoom:50%;" />
<h3 id="multimodal-contrastive-learning">Multimodal Contrastive Learning</h3>
<ul>
<li>Noise Contrastive Estimation (NCE) to align video-audio pairs</li>
<li>Multiple Instance Learning NCE (MIL-NCE) to align video-text pairs.</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201045091.png" alt="image-20220620104533062" style="zoom: 67%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201045549.png" alt="image-20220620104549530" style="zoom: 67%;" />
<ul>
<li>Different temporal locations in the video-audio-text stream</li>
<li>Positive pairs (from two modalities): same location</li>
<li>Negative pairs: non-matching locations</li>
</ul>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201047771.png" alt="image-20220620104754728" style="zoom: 80%;" />
<h3 id="experiment">Experiment</h3>
<p>Dataset:  <img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201127588.png" alt="image-20220620112754567" style="zoom:50%;" /></p>
<ul>
<li>
<p>Pre-train: AudioSet and HowTo100M</p>
</li>
<li>
<p>Downstream</p>
<ul>
<li>
<p>video action recognition:<br>
UCF101 , HMDB51, Kinetics-400 ,  Kinetics-600, Moments in Time</p>
</li>
<li>
<p>audio event classification:</p>
<p>​	ESC50, AudioSet.</p>
</li>
<li>
<p>zero-shot text-to-video retrieval:</p>
<p>​	YouCook2  and MSR-VTT.</p>
</li>
<li>
<p>Classification:</p>
<p>​	ImageNet</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>HMDB51、UCF101 和 ESC50 与我们的网络规模相比是非常小的数据集，因此我们仅使用它们在冻结的预训练主干之上训练线性分类器。</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201130887.png" alt="image-20220620113005847" style="zoom:80%;" />
<p>表明了通过单个 Transformer 主干统一三种数据模式的潜力。</p>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201130092.png" alt="image-20220620113052055" style="zoom:80%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201131774.png" alt="image-20220620113120755" style="zoom: 67%;" />
<p>VATT is the <strong>first</strong> <strong>Transformer</strong> that outperforms <strong>CNN</strong>-<strong>based</strong> models in audio event recognition.</p>
<p>Even though the self-supervised pre-training happens in the video domain, we still achieve competitive results to the supervised pre-training using large-scale image data.</p>
<p><strong>Mixture-of-Experts</strong></p>
<p>Encourages further studies on the possibility of utilizing Mixture-of-Experts to increase the model’s capacity for simultaneous multimodal perception.</p>
<center>
    <img style="transform:scale(0.8)"
    src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206201132891.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
                padding: 2px;">the average activation of each node at the output of the MLP module
</div>
</center>
<blockquote>
<p>[<a href="https://arxiv.org/abs/2104.11178">2104.11178] VATT: Transformers for Multimodal Self-Supervised Learning from Raw Video, Audio and Text (arxiv.org)</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">视觉</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">Transformer (</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">三</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">) VATT: Transformers for Multimodal Self-Supervised Learning from Video, </a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">Audio,Text_fling_forever</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">的博客</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">-CSDN</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">博客</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">_</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">音频</a><a href="https://blog.csdn.net/BearLeer/article/details/118195162?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">transformer</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>transformer</tag>
        <tag>计算机视觉</tag>
        <tag>多模态</tag>
        <tag>自监督</tag>
      </tags>
  </entry>
  <entry>
    <title>VIT</title>
    <url>/2022/02/08/VIT/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206170944322.gif" style="zoom: 33%;" />
<span id="more"></span>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206170937881.png" alt="image-20220617093716829" style="zoom:80%;" />
<blockquote>
<p><a href="https://ai.googleblog.com/2020/12/transformers-for-image-recognition-at.html">Google AI Blog: Transformers for Image Recognition at Scale (googleblog.com)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>计算机视觉</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>transformer</tag>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<span id="more"></span>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>以太坊</title>
    <url>/2022/04/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A/</url>
    <content><![CDATA[<h1>以太坊概述</h1>
<p>区块链2.0</p>
<p>ETHsd</p>
<span id="more"></span>
<h1>ETH 账户</h1>
<h1>ETH 数据结构</h1>
<h2 id="eth-状态树">ETH　状态树</h2>
<blockquote>
<p>Modified MPT</p>
</blockquote>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181736698.png" alt="image-20220420164220341" style="zoom:67%;" />
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181737883.png" alt="image-20220420164523672" style="zoom:67%;" />
<blockquote>
<p>为什么要保存历史状态？为何不直接修改？</p>
<p>为了便于回滚 roll back。eth临时性的分叉是常态</p>
<p>如下1中产生分叉，而后上面节点胜出，变为2中状态。那么，下面节点中状态的修改便需要进行回滚。因此，需要维护这些历史记录。</p>
<img src="https://img-blog.csdnimg.cn/20200225193738472.png" alt="在这里插入图片描述" style="zoom: 67%;" />
<p>简单的转账交易能够直接简单回滚，但是以太坊种有智能合约。</p>
<p>ETH 的智能合约是图灵完备的。</p>
</blockquote>
<h3 id="eth-块头">ETH 块头</h3>
<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181737110.png" alt="在这里插入图片描述" style="zoom:100%;" />
<h3 id="区块结构">区块结构</h3>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181734553.png" alt="image-20220420203214173"></p>
<h3 id="区块在网上真正发布时的信息">区块在网上真正发布时的信息</h3>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181737793.png" alt="在这里插入图片描述"></p>
<h3 id="key-value对">Key-value对</h3>
<p>状态树中保存Key-value对，key就是地址，而value状态通过RLP(Recursive Length Prefix，一种进行序列化的方法)编码序列号之后再进行存储。</p>
<p><a href="https://blog.csdn.net/qq_40792869/article/details/89026738">什么是序列化</a></p>
<p><a href="https://www.cnblogs.com/zhizaixingzou/p/10122380.html">以太坊：底层序列化编码方式RLP </a></p>
<h2 id="eth-交易树">ETH 交易树</h2>
<h2 id="eth-收据树">ETH 收据树</h2>
<h1>GHOST 协议</h1>
<p>BTC系统中出块时间为10min，而以太坊中出块时间被降低到15s左右，虽然有效提高了系统反应时间和吞吐率，却也导致系统临时性分叉变成常态，且分叉数目更多。这对于共识协议来说，就存在很大挑战。在BTC系统中，不在最长合法链上的节点最后都是作废的，但如果在以太坊系统中，如果这样处理，由于系统中经常性会出现分叉，则矿工挖到矿很大可能会被废弃，这会大大降低矿工挖矿积极性。而对于个人矿工来说，和大型矿池相比更是存在天然劣势。<br>
对此，以太坊设计了新的公式协议——GHOST协议</p>
<blockquote>
<p>(该协议并非原创，而是对原本就有的Ghost协议进行了改进)。</p>
</blockquote>
<blockquote>
<p>动机：比特币共识机制的问题</p>
<p>大型矿池获得与其算力比例不匹配的收益</p>
<p>mining centralization</p>
<p>centralization bias</p>
</blockquote>
<h2 id="最初的ghost协议">最初的GHOST协议</h2>
<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206181737997.png" alt="在这里插入图片描述"></p>
<p>如图，假定以太坊系统存在以下情况，A、B、C、D在四个分支上，最后，随着时间推移B所在链成为最长合法链，因此A、C、D区块都作废，但为了补偿这些区块所属矿工所作的工作，给这些区块一些“补偿”，并称其为&quot;Uncle Block&quot;（叔父区块）。</p>
<ul>
<li>
<p>规定E区块在发布时可以将A、C、D叔父区块包含进来，A、C、D叔父区块可以得到出块奖励的7/8，</p>
</li>
<li>
<p>而为了激励E包含叔父区块，规定E每包含一个叔父区块可以额外得到1/32的出块奖励。</p>
</li>
<li>
<p>为了防止E大量包含叔父区块，规定一个区块只能最多包含两个叔父区块，</p>
</li>
<li>
<p>因此E在A、C、D中最多只能包含两个区块作为自己的出块奖励</p>
<blockquote>
<p>鼓励系统出现分叉后进行合并（招安）</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>不检查交易，只检测难度是否符合</p>
</blockquote>
<h1>ETH 挖矿</h1>
<blockquote>
<p>北大肖臻区块链网课</p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
        <category>ETH</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>ETH</tag>
        <tag>以太坊</tag>
      </tags>
  </entry>
  <entry>
    <title>图结构上机实验</title>
    <url>/2022/05/19/%E5%9B%BE%E7%BB%93%E6%9E%84%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>在n个人中，某些人的银行账号之间可以互相转账。这些人之间转账的手续费各不相同。给定这些人之间转账时需要从转账金额里扣除百分之几的手续费，请问A最少需要多少钱使得转账后B收到100元。</p>
<p><strong>输入</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一行输入两个正整数n,m，分别表示总人数和可以互相转账的人的对数。</span><br><span class="line">以下m行每行输入三个正整数x,y,z，表示标号为x的人和标号为y的人之间互相转账需要扣除z%的手续费(z&lt;100)。</span><br><span class="line">最后一行输入两个正整数A,B。数据保证A与B之间可以直接或间接地转账。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 2&lt;=N&lt;=20，1&lt;=M&lt;=20，1&lt;=Q&lt;=100</p>
</blockquote>
<p><strong>输出</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出A使得B到账100元最少需要的总费用。精确到小数点后8位。</span><br></pre></td></tr></table></figure>
<p><strong>样例分析</strong></p>
<p>【样例输入】</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>【样例输出】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">103.07153164</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="adt-实现">ADT 实现</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> graphm</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> graphm</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graphm</span>&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="type">int</span> numVertex, numEdge;</span><br><span class="line">		<span class="type">double</span> **matrix;</span><br><span class="line">		<span class="type">int</span> *mark;</span><br><span class="line">		VertexType vexs[MAX_VERTEX_NUM];</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Graphm</span>();</span><br><span class="line">		<span class="built_in">Graphm</span>(<span class="type">int</span> n);</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">e</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">first</span><span class="params">(<span class="type">int</span> )</span></span>;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">putVex</span><span class="params">(<span class="type">int</span> v,VertexType value)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">locateVex</span><span class="params">(VertexType u)</span></span>;</span><br><span class="line">		<span class="function">VertexType <span class="title">getVex</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2,<span class="type">double</span> value)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">deleteEdge</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">setMark</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> value)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">getMark</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">double</span> <span class="title">getEdge</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType int</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Graphm::<span class="built_in">Graphm</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Graphm::<span class="built_in">Graphm</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">	numVertex = n;</span><br><span class="line">	numEdge = <span class="number">0</span>;</span><br><span class="line">	matrix = <span class="keyword">new</span> <span class="type">double</span>*[numVertex];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line">		matrix[i] = <span class="keyword">new</span> <span class="type">double</span>[numVertex];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numVertex;i++)</span><br><span class="line">	    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;numVertex;j++)</span><br><span class="line">	        matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">	mark = <span class="keyword">new</span> <span class="type">int</span>[numVertex];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numVertex;i++)mark[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::n</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> numVertex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::e</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> numEdge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::first</span><span class="params">(<span class="type">int</span> v1)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(matrix[v1][i] != <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::next</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = v2 + <span class="number">1</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(matrix[v1][i] != <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::putVex</span><span class="params">(<span class="type">int</span> v,VertexType value)</span></span>&#123;</span><br><span class="line">	vexs[v] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::locateVex</span><span class="params">(VertexType u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==vexs[i])<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VertexType <span class="title">Graphm::getVex</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> vexs[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::setEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2,<span class="type">double</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(matrix[v1][v2]==<span class="number">0</span>)numEdge++;</span><br><span class="line">	matrix[v1][v2]=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::deleteEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(matrix[v1][v2]==<span class="number">0</span>)numEdge--;</span><br><span class="line">	matrix[v1][v2]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::setMark</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">	mark[v]=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::getMark</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v&gt;=numVertex)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> mark[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Graphm::getEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> matrix[v1][v2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Graphm &amp;g)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g.<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g.<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line">			cout &lt;&lt;  <span class="built_in">setiosflags</span>(ios::fixed) &lt;&lt;  <span class="built_in">setprecision</span>(<span class="number">8</span>)</span><br><span class="line">			 &lt;&lt; g.<span class="built_in">getEdge</span>(i,j)&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="算法实现">算法实现</h2>
<p>用Dijkstra，(O(n^2)) 实现。由于从一个账户转钱到另外一个账户的手续费不同，所以我们视它们为边的权值。先求出去掉手续费后所遗留下的钱，并在寻找路径时尽量去找能留下更多钱的路径（注意在起始点时要给它赋值为1），并将权值相乘，最后拿100除以权值相乘得到的最大值，输出答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(Graphm* g,<span class="type">double</span>* D,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">		D[i] = g-&gt;<span class="built_in">getEdge</span>(s,i);</span><br><span class="line">	&#125;</span><br><span class="line">	D[s] = <span class="number">1</span>;</span><br><span class="line">	g-&gt;<span class="built_in">setMark</span>(s,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">		minn = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++ )&#123;</span><br><span class="line">			<span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[j]&gt;minn)&#123;</span><br><span class="line">				k = j;</span><br><span class="line">				minn = D[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		g-&gt;<span class="built_in">setMark</span>(k,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(k == y) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[k]*g-&gt;<span class="built_in">getEdge</span>(k,j)&gt;D[j])</span><br><span class="line">			D[j] = D[k] * g-&gt;<span class="built_in">getEdge</span>(k,j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Dijkstra</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>激活函数</title>
    <url>/2022/02/16/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="relu-rectified-linear-unit-修正线性单元">ReLU(Rectified Linear Unit,修正线性单元)</h2>
<p>形式：</p>
<p>​																<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f\left ( x \right ) =\left\{\begin{matrix}0,&amp;x\le 0\\ x,	&amp;	x&gt;0
\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<span id="more"></span>
<h3 id="relu的稀疏性-2"><strong>ReLU的稀疏性</strong>[^2]</h3>
<blockquote>
<p>当前，深度学习一个明确的目标是从数据变量中解离出关键因子。原始数据（以自然数据为主）中通常缠绕着高度密集的特征。然而，如果能够解开特征间缠绕的复杂关系，转换为稀疏特征，那么特征就有了鲁棒性（去掉了无关的噪声）。稀疏特征并不需要网络具有很强的处理线性不可分机制。那么在深度网络中，对非线性的依赖程度就可以缩一缩。一旦神经元与神经元之间改为线性激活，网络的<em>非线性部分</em>仅仅来自于神经元部分选择性激活。<br>
对比大脑工作的95%稀疏性来看，现有的计算神经网络和生物神经网络还是有很大差距的。庆幸的是，ReLu只有负值才会被稀疏掉，即引入的稀疏性是可以训练调节的，是动态变化的。只要进行梯度训练，网络可以向误差减少的方向，自动调控稀疏比率，保证激活链上存在着合理数量的非零值。</p>
</blockquote>
<h3 id="relu-的缺点">ReLU 的缺点</h3>
<ul>
<li>
<p>坏死: ReLU 强制的稀疏处理会减少模型的有效容量（即特征屏蔽太多，导致模型无法学习到有效特征）。由于ReLU在x &lt; 0时梯度为0，这样就导致负的梯度在这个ReLU被置零，而且这个神经元有可能再也不会被任何数据激活，称为神经元“坏死”。</p>
</li>
<li>
<p>无负值: ReLU和sigmoid的一个相同点是结果是正值，没有负值.</p>
</li>
</ul>
<h2 id="relu变种">ReLU变种</h2>
<h3 id="leaky-relu">Leaky ReLU</h3>
<h3 id="指数线性单元elu">指数线性单元ELU</h3>
<h3 id="selu">SELU</h3>
<h2 id="swish">Swish</h2>
<h2 id="gelu">GELU</h2>
<h2 id="maxout">Maxout</h2>
<h2 id="sigmoid-与-tanh">sigmoid 与 tanh</h2>
<h4 id="为什么tanh相比sigmoid收敛更快">为什么tanh相比sigmoid收敛更快:</h4>
<ol>
<li>
<p>梯度消失问题</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mo><mi>tanh</mi><mo>⁡</mo></mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>tanh</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tanh&#x27;( x ) = 1-\tanh( x )^2 \in (0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0862319999999999em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">tanh</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.836232em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mop">tanh</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>sigmoid: </mtext><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{sigmoid: } s&#x27;(x)=s(x)\times(1-s(x))\in(0,1/4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">sigmoid: </span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span></span></span></span></p>
<p>可以看出tanh(x)的梯度消失问题比sigmoid要轻.梯度如果过早消失,收敛速度较慢.</p>
</li>
<li>
<p>以零为中心的影响<br>
如果当前参数(w0,w1)的最佳优化方向是(+d0, -d1),则根据反向传播计算公式,我们希望 x0 和 x1 符号相反。但是如果上一级神经元采用 Sigmoid 函数作为激活函数，sigmoid不以0为中心，输出值恒为正，那么我们无法进行最快的参数更新，而是走 Z 字形逼近最优解。<a href="http://mathforum.org/library/drmath/view/54179.html">^1</a></p>
</li>
</ol>
<h2 id="激活函数作用">激活函数作用</h2>
<h2 id="梯度消失与梯度爆炸">梯度消失与梯度爆炸</h2>
<h2 id="激活函数选择">激活函数选择</h2>
<ol>
<li>首先尝试ReLU,速度快,但要注意训练的状态.</li>
<li>如果ReLU效果欠佳,尝试Leaky ReLU或Maxout等变种。</li>
<li>尝试tanh正切函数(以零点为中心,零点处梯度为1)</li>
<li>sigmoid/tanh在RNN（LSTM、注意力机制等）结构中有所应用，作为门控或者概率值。</li>
<li>在浅层神经网络中，如不超过4层的，可选择使用多种激励函数，没有太大的影响。</li>
</ol>
<blockquote>
<p>主要参考：<a href="https://www.cnblogs.com/makefile/p/activation-function.html#fnref1">激活函数(ReLU, Swish, Maxout) - 康行天下 - 博客园 (cnblogs.com)</a></p>
</blockquote>
<p>[^2]:<a href="https://www.cnblogs.com/neopenx/p/4453161.html">ReLu(Rectified Linear Units)激活函数 - Physcal - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>激活函数</tag>
      </tags>
  </entry>
</search>
