<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今天学习了吗</title>
  
  
  <link href="https://overmind7.github.io/atom.xml" rel="self"/>
  
  <link href="https://overmind7.github.io/"/>
  <updated>2022-06-23T16:07:19.900Z</updated>
  <id>https://overmind7.github.io/</id>
  
  <author>
    <name>Overmind</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022-6-23</title>
    <link href="https://overmind7.github.io/2022/06/23/2022-6-23/"/>
    <id>https://overmind7.github.io/2022/06/23/2022-6-23/</id>
    <published>2022-06-23T11:45:52.000Z</published>
    <updated>2022-06-23T16:07:19.900Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="61850d48e6b77e85f1f75ec25433df286af74f5790de7de527db0dedb8e88269">3757591a001914bec15e16449f8d2836bc672ba4a2ce306e3103cef138eeb5bfab298a94fbfde701d147855a251a96c960fd1420158e63f5d98ee1cf34f122c7480ad5af5e466f238c4ca9d4ec071710c4e6e5355bc9aa74f8369016023b65ab1dde57aa961ee72e23a0f96a29e8d5864cfa9a402f74a0cc2cde04a92da5722e2907facedc1d8be1d6a2fb4391080107653b66f21cb4cbca2cf97d4e298e9f0216052b361fb5459e0ad895b9f7e5920197c0eefb1f5652ea3ffeb287e5afe72bb0ba833024a0762c844f4e24360ddcbd77207459888cf82bbf1427001604ed3718677ea325e16a20c4c037580afcd2718b2462395af74974e68fd2c2a8c0ecb9c6fa4e2f313c643c51b3743427dab76f0c99c60c3d565c7d4f373f1b09e69770861b3195dddb01fc7779702efedc162beac5771a8b63d8b39b7b25f6ee9287699394aa41d831f86617d5cb7bed589939a8e91aedf95d91b6f0eb59d04834e177705899e7f771e58dbb83de5160cba357650706d4a0aa0cba72a6962c16a96ee85997d3a82f957b58e2fa991a12858eba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-22</title>
    <link href="https://overmind7.github.io/2022/06/22/2022-6-22/"/>
    <id>https://overmind7.github.io/2022/06/22/2022-6-22/</id>
    <published>2022-06-21T16:00:00.000Z</published>
    <updated>2022-06-23T15:21:33.444Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="888ed2bd469db518c4a9249a1d01ac5e551b68a881d7530d4fafc57f530b8766">3757591a001914bec15e16449f8d283649c56c43696e803b0a1c64e83f25750babe297e6d06e871bde393871193049dfb5744570b128c6f9537ad4bc26c4770cb8bf3512b5c114023036b14076e4b8ecfc4849b172ffff69c4058b090d45e26ec07c489b04d6e1911ac7485aef3075bf154bd4b6123f73a6f5d4c70772d086afca8676905fbb86b04d7b3da290b225e2b106000fb2e9bcafce63a30ab36eeff53a7463c144b25416375df9eddf75fe6ec1e7d6494b9e9da4781ca6c8ad3400f64f735848a806dda3e1768df30c5adc7b86669faa8875bb2e233d32662339447128bcadefdd49255958cf8278ef440f94</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-21</title>
    <link href="https://overmind7.github.io/2022/06/21/2022-6-21/"/>
    <id>https://overmind7.github.io/2022/06/21/2022-6-21/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-23T11:29:08.894Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1a7f361dfa4d25ceb1c4875541e786bddbe1e101a00f2bc5c7779de3a0de721c">3757591a001914bec15e16449f8d2836f4f8cca929623f8898f8d4221d4854cd09b926bd3b89e348d3ad5e4fa75a0be4c533069e272c9f1f46a727cbbcc402f370c942b9913b52eebc6ff1f6e735f58047470b5f782dd0dfb827f11004b78b5ec19c5b3f6b03e5161463f6ea1b768fd23264b435a05b8b547d8fc6b6f8361f5eb82ac44e7cce85367b2f790ec6b9da9469a1a7a0e42683e6ba20e2e6330eb2aa7afe696d178564a384db074a65bb346c359b232a384f30bd74a8cc3863f85ba01877a804a88af4080cb48ef644ebdd3f191c328bc58fa1747f8c7d4cdfe23e91a7ca3dc5a5cbe1588f6e1e926dd66b92ce4976ee2ee422eaf4a9460b28dc32b9a14402c246e049343bb64ce74de641ff5a7e51e9b7b0911385787aeb08ed018242e6d725cc4bdeb714e92e510a7e1b0048d0552d93ebd8df69cbe4e780db1a40d1a30940b94162384288983330d88bbb0c0625d92585f3d1c21872058f498f21f86c4f2b0ddcae44a2f8cd58099df7eeecb4e2f2005715321f1c4c8a70cb91ae84a4c86e17ec4ad7d288c869cad9b8799c589adf3c188059e86d14bf8f9fce574dce7dbd6b36393f792a18faf966d77c7a2291a99fb0fae71cba83d1526526d4e2518c5be6ec2a95c77cfe8a8e0d2db51db685eacba045db7376edf06250616ce0b2cb3a5e99f7e7729afc45eedab6761b48ae08955d7b34099d7b412dd5f5bf432cfb339af22cccd678ec62da4eca96587544434ffc75bcef0ec9b374fcc34c40748632adf9f995e388217205bdd287059f519542a25de439f04b8ecde9e9cfeb763b8d428a7b5757c936984b49ecd24e7b676b576e3c5b6d0420c50b84df875d76a011882b418e53720e02e5fe95f5cad05fb874805407b3c5da8a6a740e94e8dc295a4dc5f4d1525e3e261653777e37a93d561c5954a0edff71e5ff6fd322e0fd4e4e22d0c6703ac26d8ed73dc52ab0a861d1dd97062e7a009776a5e69aee6fa7cf5c9d064a9659a5b58cee177deee9fda6fe9f7ede25444ec541d1ca4276309ea27a0c4768e53b1f4464a4fd5398b0ea2702bc35d4f6e358ea1e0d683e488875782a502f1574517c98e372a6130a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-20</title>
    <link href="https://overmind7.github.io/2022/06/20/2022-6-20/"/>
    <id>https://overmind7.github.io/2022/06/20/2022-6-20/</id>
    <published>2022-06-19T16:00:00.000Z</published>
    <updated>2022-06-23T11:30:20.790Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="55a05477a4f381c9ce9073bd38996142a2174cfa8e8753e8542a9245f5742bf2">3757591a001914bec15e16449f8d2836b139cfbe31de03e842b473892181012dd266ef9d1f439b578a90be8ef68b79c779b7ad3627180dde916948cc6bc785d3d15fdfb36182bd04c811cfac2094df3b664b8c737b9f4a12beb51584275268b0dd26552acf0d6bae1dec245886e6ec22e1463bce4b604bdba5269ed7b5a1379c0915ec08437ee82b3ac2b06963cabf058fca41833d5049feb24a6928fc8d68398cb609dc48b94dd95d875561de9f1f3f87c01e9efe156c4191eb29afe2522c74c41ce865447ea301b8e4bd9bc30b4eb681af7eb0d290e3f3f4ccd8c2de6b963a9b098698cfb3e4d0242e977ce25ee8340b03f1b3fafce1a4fab9cd560173007bdaa0f56e35c1d72a3a98ca8ff4f272d4bb7d262ba43a900222924093178c82965d57f755d3f87e15d20b17e1b9be60b0a87697044e0486613d195308a9508744896f7d2efd265ea61433324ed0580656126087c65e230862b222708b4a2dcbb2b884837a8d4cde9096be11965ce32e4a1486a32f43062d05cbe427fc9b1e5a3a3570ccbdc85d8de5738e7a59e6fbe4702de7772c1b37fbc076ece87d8737df46f17b49aeb2910528e9a5cf7b9e3e573bca9251ded2d4e9450cc1b8490d284c279403859feea7baa1026e82f0e87c5e8a6775a402c8f64709be9b4b220194c83be7bb91aeadbee4d852e27e10c94a9fcddcb3b1659d251077665e9dca2a98b2ca14ce2df271066f105e6878e9fdd4c0f3b8c2edd3cfa32e831fd6acd917109fff4c1f2f80573bbfd99e257587806ca608b81e2aadf69618f534de00f766572ba90a0face9749f0cac742de7d186e9c5b6fd7f3f42f1150a070d6e7a7838b7a7a8d6fb2ee046810519da2a88678ae741c12fd1618dd2bb655544272c0be7c7fe3b00819e4b54fb4eeeb26da34e41690636acd3531514b7908581276739a264073e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-19</title>
    <link href="https://overmind7.github.io/2022/06/19/2022-6-19/"/>
    <id>https://overmind7.github.io/2022/06/19/2022-6-19/</id>
    <published>2022-06-18T16:00:00.000Z</published>
    <updated>2022-06-20T13:27:21.707Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a5b9e7a8a71bfb211611c51097170366e6cbc67a6bfc8159da9e919d2f4a9ad">3757591a001914bec15e16449f8d2836dbd57249aa1415c58be070afc026a2d024620c187fcb60c000cf8b197f4ab4504ae8926ef5b17366ebdafaa9b0b33563d4a6484455137f2c5d0a1b9e34b365782a9b8944f609ff7e54aefa7e62fb8e2b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>NeRF</title>
    <link href="https://overmind7.github.io/2022/06/19/NeRF/"/>
    <id>https://overmind7.github.io/2022/06/19/NeRF/</id>
    <published>2022-06-18T16:00:00.000Z</published>
    <updated>2022-06-24T01:00:55.918Z</updated>
    
    <content type="html"><![CDATA[<p><strong>新视角合成任务</strong>：</p><ul><li>指的是对于某一场景给定某些视角下的观测（图片），通过算法合成新视角下的观测（图片）的任务，如下图所示：</li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206221708241.png" alt="image-20220622170817160" style="zoom:50%;" /><p><strong>隐式表达</strong>：</p><ul><li><p>指的是在渲染过程不对目标物体或者场景进行显示地建模</p><blockquote><p>一个很直观的想法就是通过SFM的方法对目标进行三维稠密重建，然后再通过相机模型反投影到新视角下，这种具备三维表达的方法就是典型的<strong>显示表达</strong>。</p></blockquote></li><li><p>而NeRF则是通过一个全连接网络替换<strong>三维稠密重建</strong>的过程，我们并不知道目标在三维空间中的长什么样子，但是可以通过在三维空间中进行采样和积分获得目标在新视角的观测。</p></li></ul><span id="more"></span><p><strong>SFM</strong>：</p><ul><li><p>SFM即Structure-from-motion运动结构重建，从大批量图像数据出发，通过相关处理，获取目标图像集3D几何（结构）和摄像机姿态（运动）信息，主要处理流程可分为如下几步：特征提取；特征匹配；姿态估计；束调整。具体处理流程参见下图：</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206222015010.png" alt="sfm处理流程图" style="zoom:50%;" /></li></ul><p><strong>SLAM</strong>：</p><ul><li>Simultaneous localization and mapping 缩写，意为“同步定位与建图”<ul><li>激光SLAM</li><li>视觉SLAM</li></ul></li></ul><p><strong>稀疏重建：</strong></p><ul><li>通常是重建一些图像特征点的深度，这个在基于特征的视觉SLAM里比较常见，得到的特征点的深度可以用来计算相机位姿。稀疏重建在实际应用，比如检测，避障，不能满足需求。</li></ul><p><strong>半稠密重建：</strong></p><ul><li>通常是重建图像纹理或梯度比较明显的区域，这些区域特征比较鲜明。半稠密重建在直接法视觉SLAM里比较常见。重建的三维点云相对稠密，可以满足部分应用需求。</li></ul><p><strong>稠密重建：</strong></p><ul><li>稠密重建是对整个图像或者图像中的绝大部分像素进行重建。与稀疏、半稠密相比，稠密重建对场景的三维信息理解更全面，更能符合应用需求。但是，由于要重建的点云数量太多，相对耗时。</li></ul><h1>经典体素辐射场渲染方法</h1><p>Volume Rendering with Radiance Fields</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206222028695.png" alt="image-20220622202823666" style="zoom: 67%;" /><p>在原始NeRF中，我们想要获得的是新视角下的图像，将经过相机光心和图像平面上像素的这样一条射线标记为:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">r(t) = o + td</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">d</span></span></span></span></span></p><ul><li>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span> 为射线原点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 为<strong>射线角度</strong></li></ul><blockquote><p>因为在有光照的条件下, 颜色输出是和看的视角有关的</p><p>nerf的物理理论支撑：BRDF，辐射度学</p><p><a href="https://zhuanlan.zhihu.com/p/21376124">基于物理着色：BRDF </a>：描述表面入射光和反射光关系。</p></blockquote><p>NeRF的任务主要是对颜色进行渲染，而不是对亮度进行渲染，因此我们 Volume Rendering 的对象不再是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L ( t )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 而是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C ( t )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 。</p><p>颜色主要是由光线的波长决定，而光线通过半透明物体时波长会发生变化，也即颜色会发生变化。</p><blockquote><p>不透明材料具有从内部反射（忽略表面反射）产生的漫反射，它们的外观在很大程度上独立于照明和观察几何结构。这种材料通常被称为各向同性（isotropic）和朗伯材料（Lambertian materials）。<strong>完全漫反射体</strong>是典型<strong>朗伯材料</strong>。</p><ul><li><strong>朗伯表面</strong>（Lambertian surface）：一理想的漫射面,它所有方向的反射能量都相等，是指在一个固定的照明分布下从所有的视场方向上观测都具有相同亮度的表面，朗伯表面不吸收任何入射光</li><li><strong>非朗伯（non-lambertian 散射)</strong>：需要有散射，但不能是朗伯散射，一来视为了能量守恒，二来是为了实现各向异性。</li><li><strong>朗伯反射</strong>（Lambertian reflectance）：也叫理想散射或朗伯散射，不管照明分布如何，朗伯表面在所有的表面方向上接收并发散所有的入射照明，结果是每一个方向上都能看到相同数量的能量。</li></ul></blockquote><p>这种变化的规则采用Alpha Blending方法：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mi>C</mi><mi>b</mi></msub><mo>+</mo><mi>α</mi><msub><mi>C</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">C_a = (1-α)C_b + αC_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li>α 为不透明度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">C_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为混合后的颜色，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">C_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为混合前的颜色，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">C_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为半透明物体的颜色。</li></ul><blockquote><p>Alpha 混合（Alpha Blending）方法。这个方法比较常见，其实就是按照 Alpha 混合向量的值来混合源 像素和目标像素。当在屏幕上绘制某个物体时，与每个像素相关联的值有 RGB 颜色和 Z 缓冲深度 值，以及另外一个成分 alpha 分量，这个 alpha 值也可以根据需要生成并存储，它描述的是给定像素 的对象片段的不透明度的值。 alpha 为 1.0 表示对象不透明，完全覆盖像素所在区域; 0.0 表示像素完 全透明。为了使对象透明，在现有场景的上方，以小于 1 的透明度进行绘制即可。每个像素将从渲染 管线接收到一个 RGBA 结果，并将这个值和原始像素颜色相混合。</p><p>——《Real-Time Rendering 3rd》</p></blockquote><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mi>σ</mi><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">α=σdt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span>，其中 σ 为<strong>单位不透明度</strong>，对上式进行变换：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>a</mi></msub><mo>−</mo><msub><mi>C</mi><mi>b</mi></msub><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>o</mi></msub><mo>−</mo><msub><mi>C</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C_a-C_b = σ(C_o-C_b)dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span></span></p><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">σ=σ(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>o</mi></msub><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_o=c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，均为随射线位置 <em>t</em> 变化，上式微分形式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>C</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mo>−</mo><mi>σ</mi><mrow><mo fence="true">(</mo><mi>t</mi><mo fence="true">)</mo></mrow><mi>C</mi><mo>+</mo><mi>σ</mi><mrow><mo fence="true">(</mo><mi>t</mi><mo fence="true">)</mo></mrow><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\mathrm{d} C}{\mathrm{d} t} = -\sigma \left ( t \right )C + \sigma \left ( t \right )c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></span></p><p>非齐次线性微分方程通解为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup><mo>+</mo><mi>C</mi><msup><mi>e</mi><mrow><mo>−</mo><mo>∫</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">C=e^{-\int \sigma (t)dt}\int \sigma (t)c(t)e^{\int \sigma (t)dt} +Ce^{-\int \sigma (t)dt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9765em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9765em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>在 NeRF 问题中规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">t_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为积分的最近端和最远端：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲C =&amp; e^{-\int_…'>\begin{align}C =&amp; e^{-\int_{t_n}^{t_f}  \sigma (t)dt}\int_{t_n}^{t_f} \sigma (t)c(t)e^{\int_{t_f}^t \sigma (s)ds} +Ce^{-\int \sigma (t)dt}\\=&amp;\int_{t_n}^{t_f}\sigma (t)c(t)e^{\int_{t}^{t_f}\sigma (s)ds }e^{-\int_{t_n}^{t_f}\sigma (t)dt }dt+Ce^{-\int_{t_n}^{t_f}\sigma (t)dt }\\=&amp;\int_{t_n}^{t_f}\sigma (t)c(t)e^{-\int_{t_n}^{t}\sigma (s)ds }dt+Ce^{-\int_{t_n}^{t_f}\sigma (t)dt }\end{align}</p><p>在这里，认为射线初值为0，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">C=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，那么经过这条射线积分在图像平面上获得的颜色为：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲C(r)=&amp;\int_{t_…'>\begin{align}C(r)=&amp;\int_{t_n}^{t_f}T(t)\sigma(r(t))c(r(t),d)dt,\quad其中\ T(t) = e^{-\int_{t_n}^{t}\sigma(r(s))ds}\end{align}</p><ul><li>体积密度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">σ(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 可以解释为射线在位置 x 处的微分概率。</li><li>摄像机光线$ r(t) = o + td$ ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span> 为射线原点</li><li>预期颜色 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> 具有近边界和远边界 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 $t_f $</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>在这里可以理解为射线从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 这一路段上的累积透明度，在这一路上没有击中任何粒子的概率</li></ul><h1>基于分段随机采样的离散近似体渲染方式</h1><p><strong>对该连续积分进行数值估计</strong></p><p>确定性求积（Deterministic quadrature）通常用于渲染离散体素网格，但是这将有效地限制我们表示的分辨率，<strong><u>因为MLP只会在固定的离散位置集上查询</u></strong>。</p><blockquote><p>一个直观且很常用的思路是，在需要求积的区域均匀地采样N个点进行近似计算。但作者提出，这样的方式会导致MLP只需要学习一系列离散点的信息，最终会限制NeRF的分辨率，使得最终生成的结果不够清晰。</p></blockquote><p>相反，我们使用分层抽样方法。</p><blockquote><p>这样的方式能够在只采样离散点的前提下，保证采样位置的连续性。</p></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231658901.png" alt="image-20220623165814855" style="zoom:67%;" /><p>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>t</mi><mi>n</mi></msub><mtext>，</mtext><msub><mi>t</mi><mi>f</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[t_n，t_f]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>分成N个均匀分布的容器，然后从每个容器内随机均匀地抽取一个样本：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>∼</mo><mi>U</mi><mrow><mo fence="true">[</mo><msub><mi>t</mi><mi>n</mi></msub><mo>+</mo><mfrac><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi>N</mi></mfrac><mo stretchy="false">(</mo><msub><mi>t</mi><mi>f</mi></msub><mo>−</mo><msub><mi>t</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>t</mi><mi>n</mi></msub><mo>+</mo><mfrac><mi>i</mi><mi>N</mi></mfrac><mo stretchy="false">(</mo><msub><mi>t</mi><mi>f</mi></msub><mo>−</mo><msub><mi>t</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">t_i\sim U\left [ t_n+\frac{i-1}{N}(t_f-t_n),t_n+\frac{i}{N}(t_f-t_n)   \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>虽然我们使用离散的样本集来估计积分，但<strong>分层采样</strong>使我们能够表示<strong>连续的</strong>场景表示，因为它会使得在优化过程中在连续位置评估MLP。我们用这些样本来估计 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>，采用 Max[^1]方法。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub></mrow></msup><mo stretchy="false">)</mo><msub><mi>c</mi><mi>i</mi></msub><mo separator="true">,</mo><mspace width="1em"/><mtext>其中 </mtext><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{C}(r) =  \sum_{i=1}^{N}T_i(1-e^{-\sigma _i\delta _i})c_i, \quad其中\ T_i = exp(-\sum_{j=1}^{i-1}\sigma _i\delta _i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03785em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>i</mi><mo>=</mo><mo stretchy="false">(</mo><mi>t</mi><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>t</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">δi = (ti+1) - ti</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span></span></span></span>  是相邻样本之间的距离。</li></ul><h1>优化神经辐射场模型</h1><p>NeRF中的两个重要Trick</p><h2 id="位置编码">位置编码</h2><blockquote><p>positional encoding</p></blockquote><p>NeRF函数的输入为位置和角度信息，作者发现<strong>直接将位置和角度作为网络的输入得到的结果是相对模糊的</strong>（见实验部分）。</p><blockquote><p>导致渲染在表示颜色和几何形状的高频变化方面表现不佳。</p><p>这与 Rahaman 等人最近的工作一致 [^2]。这表明==<strong>深度网络偏向于学习低频函数</strong>==。他们还表明，在将输入传递到网络之前，使用高频函数将输入映射到更高维空间可以更好地拟合包含高频变化的数据。</p></blockquote><p>而用positon encoding 的方式将<strong>位置信息映射到高频</strong>则能有效提升清晰度效果。(例如傅里叶变换)</p><ul><li><p>具体而言，这里采用的是与Transformer 中类似的正余弦周期函数的形式。</p><blockquote><p>一种解释：采用position encoding 能够使得网络更容易的理解并建模位置信息。</p></blockquote></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(p)=(sin(2^0\pi p),cos(2^0\pi p),...,sin(2^{L-1}\pi p),cos(2^{L-1}\pi p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.141331em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span> 分别作用在输入的每个坐标的值上（归一化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>后）</li><li>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>，</mtext><mi>L</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">γ(x)，L = 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo><mtext>，</mtext><mi>L</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">γ(d)，L = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>。</li></ul><p><strong>消融实验</strong></p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231735664.png" alt="image-20220623173529107" style="zoom: 50%;" /><ul><li>No View Dependence：模型仅有 x 输入，无视角 d 输入<ul><li>导致失去镜面反射</li></ul></li><li>No Positional Encoding：失去高频细节，模型 over smooth</li></ul><blockquote><p>在流行的 Transformer 架构中使用了类似的映射，它被称为位置编码。</p><p>然而，Transformers 使用它来实现不同的目标，即在序列中提供令牌的离散位置作为不包含任何顺序概念的架构的输入。</p><p>相比之下，我们使用这些函数将连续输入坐标映射到更高维空间，以使我们的 MLP 更容易逼近更高频率的函数。从投影中建模 3D 蛋白质结构的相关问题的并行工作(原文[51]) 也利用了类似的输入坐标映射。</p></blockquote><h2 id="分层体素采样">分层体素采样</h2><blockquote><p>Hierarchical Volume Sampling 多层级体素采样</p></blockquote><p>NeRF最终的效果还和采样点的分布以及采样点频率相关，在没有采样点分布的先验的情况下，如果想要达到较高的精度就需要较高的采样点频率，这样势必会造成更大的计算量。</p><blockquote><p>对渲染图像没有贡献的自由空间和遮挡区域仍然被重复采样。</p><p>通过按其对最终渲染的预期效果按比例分配样本来提高渲染效率。</p></blockquote><p>为了解决这个问题，作者提出了Hierarchical Volume Sampling方法，即先按照均匀随机采样进行一次<strong>粗采样</strong>，将粗采样的输出的不透明度结果转化为分布，再根据分布进行一次<strong>精采样</strong>，最后NeRF训练的损失也是<strong>粗采样和精采样结果相加</strong>的结果，这样就实现了一个自动化Coarse-To-Fine的训练过程。</p><blockquote><p>由粗到细(<em>Coarse</em>-<em>to</em>-<em>fine</em>)</p></blockquote><p><strong>具体做法</strong></p><p>本文<strong>同时优化两个网络</strong>：一个“粗”和一个“精细”。</p><ul><li>首先使用分层抽样对一组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">N_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位置进行抽样，并评估这些位置的“粗略”网络，产生概率分布</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>C</mi><mo>^</mo></mover><mi>c</mi></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>w</mi><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mo separator="true">,</mo><mspace width="1em"/><mtext>其中 </mtext><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><msub><mi>T</mi><mi>i</mi></msub><mo>⋅</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>δ</mi><mi>i</mi></msub></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat C_c(r)= \sum_{i=1}^Nw_ic_i, \quad 其中\ w_i=T_i \cdot(1-e^{-\sigma_i\cdot\delta_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03785em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><p>对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>归一化，可以看作是沿着射线的概率密度函数（PDF）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>w</mi><mo>^</mo></mover><mi>i</mi></msub><mo>=</mo><mfrac><msub><mi>w</mi><mi>i</mi></msub><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>N</mi><mi>c</mi></msub></munderover><msub><mi>w</mi><mi>j</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat w_i=\frac{w_i}{\sum_{j=1}^{N_c}w_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.414609em;vertical-align:-1.3070490000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3070490000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>然后我们沿着每条射线产生更明智的点采样 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">N_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>（逆变换采样），其中样本偏向<strong>体积的相关部分</strong>。用着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub><mo>+</mo><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">N_f+N_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个点，用  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>等式</mtext><mo stretchy="false">(</mo><mn>11</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">等式(11)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">式</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>  共同渲染 fine 网络结果。</p></li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206232221444.png" alt="image-20220623222108396" style="zoom:50%;" /><blockquote><p>逆变换采样(Inverse transform sampling)</p><p>是伪随机数采样的一种基本方法。在已知任意概率分布的<strong>累积分布函数</strong>时，可用于从该分布中<strong>生成随机样本</strong>。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206232213131.png" alt="image-20220623221303081" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206232214949.png" alt="逆变换采样_随机数_04" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206232211087.png" alt="逆变换采样_参考文献_05" style="zoom: 67%;" /></blockquote><h1>损失函数</h1><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow></munder><mrow><mo fence="true">[</mo><mrow><mo fence="true">∥</mo><msub><mover accent="true"><mi>C</mi><mo>^</mo></mover><mi>c</mi></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo fence="true">∥</mo></mrow><mo>−</mo><mrow><mo fence="true">∥</mo><msub><mover accent="true"><mi>C</mi><mo>^</mo></mover><mi>f</mi></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo fence="true">∥</mo></mrow><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\mathcal{L} = \sum_{r\in R}\left [ \left \| \hat C_c(r)-C(r) \right \| - \left \| \hat C_f(r)-C(r) \right \| \right ] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4956810000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.173975em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.556985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.572975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.173975em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.556985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.572975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.173975em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.556985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.572975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.173975em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.556985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-2.572975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span><span style="top:-3.173975em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span></span></span></span></span></p><p>同时优化粗网和细网，R 为光线集</p><h1>5D 神经辐射场模型</h1><p>体模型由3D grid中的每个格点(体素voxel)构成, 每个体素有颜色(RGB值)+透明度(α值)属性,</p><p>NeRF的想法就是用一个全连接神经网络来拟合出一个连续的体素表示.</p><ul><li>这个全连接网络输入想要的位置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>, 以及看的角度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>φ</mi><mo separator="true">,</mo><mi>ψ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(φ, ψ)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">φ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mclose">)</span></span></span></span>, 输出该位置的颜色<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r, g, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>和该点的透明度  $\sigma $.</li><li>在理想状态下, 要是这个神经网络能和真实场景有一样的输入和输出, 我们就能用这个神经网络来表示这个模型了</li></ul><blockquote><p>简化了的辐射场模型</p></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231130676.png" alt="image-20220623113017615" style="zoom: 50%;" /><ul><li>（a）通过沿相机光线采样 5D 坐标（位置和观察方向）来合成图像</li><li>（b）将这些位置输入 MLP 以产生颜色和体积密度，</li><li>（c）使用体积渲染技术将这些值合成到图像中。</li><li>（d）这个渲染函数是可微的，所以我们可以通过最小化<strong>合成</strong>和 G-T实 况观察图像之间的<strong>残差</strong>来优化我们的场景表示 。</li></ul><p><strong>与视角相关的发射辐射的可视化</strong></p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231602801.png" alt="image-20220623160233688" style="zoom: 50%;" /><p>神经辐射场将 RGB 颜色表示为为空间位置 x 和观察方向 d 的五维函数。在这里，我们在船舶场景的神经表示中可视化两个空间位置的示例方向颜色分布。在 (a) 和 (b) 中，展示了来自两个不同相机位置的两个固定 3D 点的外观：一个位于船侧（橙色插图），一个位于水面（蓝色插图）。本文方法预测了这两个 3D 点不断变化的镜面外观，在 © 中，展示了这种行为如何在整个观察方向的半球上连续泛化。</p><h1>全连接网络架构的可视化</h1><ul><li><p>输入向量显示为绿色</p></li><li><p>中间隐藏层显示为蓝色</p></li><li><p>输出向量显示为红色</p></li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206231116699.png" alt="image-20220623111611662" style="zoom: 60%;" /><p>每个块内的数字表示向量的维度。<strong>所有层都是标准的全连接层</strong>，</p><p><strong>黑色箭头</strong>表示具有 ReLU 激活的层，<strong>橙色箭头</strong>表示没有激活的层，<strong>黑色虚线箭头</strong>表示具有 sigmoid 激活层，</p><p>**“+” **表示向量连接。</p><p>输入位置  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的位置编码通过 8 个全连接 ReLU 层，每个层有 256 个通道。</p><p>遵循 <strong>DeepSDF</strong>  架构并包含一个 skip-connection，该连接将此输入连接到<strong>第五层</strong>。</p><p>一个附加层输出体积密度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">σ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>（使用 ReLU 校正以确保输出体积密度为非负）和 256 维特征向量。</p><p>该特征向量与输入观看方向的位置编码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ(d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span> 相连接，并由具有 128 个通道的附加全连接 ReLU 层处理。</p><p>最后一层（具有 sigmoid 激活）输出位置 x 处的，由方向 d 的射线所见的，发射的 RGB 辐射。</p><blockquote><p><a href="https://www.matthewtancik.com/nerf">NeRF：神经辐射场 (matthewtancik.com)</a></p><p>[<a href="https://arxiv.org/abs/2003.08934">2003.08934] NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis (arxiv.org)</a></p><p><a href="https://blog.csdn.net/weixin_44580210/article/details/122284120?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16-122284120-blog-118959540.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-16-122284120-blog-118959540.pc_relevant_default">辐射神经场算法——NeRF算法详解_Leo-Peng的博客-CSDN博客_nerf神经辐射场</a></p><p><a href="https://blog.csdn.net/qq_40553011/article/details/120788440"> 主流SFM处理方式的梳理_LuMan__的博客-CSDN博客_sfm方法</a></p><p><a href="https://blog.csdn.net/zhubaohua_bupt/article/details/74172831">图像三维重建方法综述_zhubaohua_bupt的博客-CSDN博客_三维图像重建</a></p><p><a href="https://zhuanlan.zhihu.com/p/360365941">【NeRF论文笔记】用于视图合成的神经辐射场技术 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/367133111">Direct Volume Rendering - 知乎 (zhihu.com)</a></p><p><a href="https://blog.51cto.com/u_15127626/4592353">逆变换采样_mob604756fb13b1的技术博客_51CTO博客</a></p><p>[^1]:Max, N.: Optical models for direct volume rendering. IEEE Transactions on Visualization and Computer Graphics (1995)</p><p>[^2]:Rahaman, N., Baratin, A., Arpit, D., Dr¨ axler, F., Lin, M., Hamprecht, F.A., Bengio, Y., Courville, A.C.: On the spectral bias of neural networks. In: ICML (2018)</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;新视角合成任务&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指的是对于某一场景给定某些视角下的观测（图片），通过算法合成新视角下的观测（图片）的任务，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Overmind7/images/main/img/202206221708241.png&quot; alt=&quot;image-20220622170817160&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;&lt;strong&gt;隐式表达&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指的是在渲染过程不对目标物体或者场景进行显示地建模&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个很直观的想法就是通过SFM的方法对目标进行三维稠密重建，然后再通过相机模型反投影到新视角下，这种具备三维表达的方法就是典型的&lt;strong&gt;显示表达&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而NeRF则是通过一个全连接网络替换&lt;strong&gt;三维稠密重建&lt;/strong&gt;的过程，我们并不知道目标在三维空间中的长什么样子，但是可以通过在三维空间中进行采样和积分获得目标在新视角的观测。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://overmind7.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机视觉" scheme="https://overmind7.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="隐式渲染" scheme="https://overmind7.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E9%9A%90%E5%BC%8F%E6%B8%B2%E6%9F%93/"/>
    
    
    <category term="cv" scheme="https://overmind7.github.io/tags/cv/"/>
    
    <category term="3d渲染" scheme="https://overmind7.github.io/tags/3d%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-18</title>
    <link href="https://overmind7.github.io/2022/06/18/2022-6-18/"/>
    <id>https://overmind7.github.io/2022/06/18/2022-6-18/</id>
    <published>2022-06-17T16:00:00.000Z</published>
    <updated>2022-06-20T13:27:06.697Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d6cba9c4b0bbd2452d99c97c10088ef90cad5f8ecedc55d5512a7feb026a70fa">3757591a001914bec15e16449f8d2836c687a36cd39cf55eecf3b42f673d850ea138cab143d86a964d9ae270448f18feff0d08f0ff04e701b8337aac686a59279129e0e126782c72e2b4b167e6c50f1f334803e04a4300d7a2e213389d1902c53cb411d85459a4891fc39f3fff08cc981bad4b5dc28b04bd5e0ff8e0908bea709e66998ca83be2c7942ecef05d139be6aad5ea23c43334aa70b39144484400683dd8316d2d026dc8e111ed687d9ced1e28c86f934acc37d813422ea350ca50008e8a771a5d934bc7a8b44bf062c8c0c003f9473db2945c2847a48220c3306ffd18c68346bfae336d22600cd434f6ca4b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-17</title>
    <link href="https://overmind7.github.io/2022/06/17/2022-6-17/"/>
    <id>https://overmind7.github.io/2022/06/17/2022-6-17/</id>
    <published>2022-06-16T16:00:00.000Z</published>
    <updated>2022-06-20T13:28:15.585Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-16</title>
    <link href="https://overmind7.github.io/2022/06/16/2022-6-16/"/>
    <id>https://overmind7.github.io/2022/06/16/2022-6-16/</id>
    <published>2022-06-15T16:00:00.000Z</published>
    <updated>2022-06-20T13:28:05.128Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-15</title>
    <link href="https://overmind7.github.io/2022/06/15/2022-6-15/"/>
    <id>https://overmind7.github.io/2022/06/15/2022-6-15/</id>
    <published>2022-06-14T16:00:00.000Z</published>
    <updated>2022-06-20T13:35:26.326Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a47ce9062bb020c2539c9f131d6828d89394f92dd08cb6628f0885826ea3ae73">3757591a001914bec15e16449f8d2836ba957d3eb2caad346bc0416dc7dac3d1edc669cce801aade90be1fce0275c4d687bb47d29e59f2b5a80f08f3f9d6ba0d7c50b7d7c2fe48cc8eadb82a855f75270ee814c304b4a58c7236576b8696a7a45d36b5e65408b10798cd1e345be67660d4799823c7de407745d0bd2f9a962dd9fa44a5c38a255891d600b29acc9d9456b9a8494706b4442bf47f53d5cc64727e7ed9f261cd3aa03a474c7473992003ecc2966c2e7ec54f52c48700c0392c09aad7f3212ca790fb0c0d1fc7b9310a94b69554764d98cf01ebc165191048d84b71fb9b28f142632ace40e4fe46712ff4db0b6fe99fd1300c48d08c185812c5a400e5bdf1f4fa7607169fd52a65d58e3b4644fe71d7e9ee0362e231f95cdd735bd0ecff612f04879f3f8cec9d11aded37dce38a6d62c7e972e923cd181ad5f53cc8ad18220e5d4f733a9ec1edc85b08be636ab7abb3cf600f6a4c593aceda150b49aa2752f12bcbb117ea58c81ab6cb624d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-14</title>
    <link href="https://overmind7.github.io/2022/06/14/2022-6-14/"/>
    <id>https://overmind7.github.io/2022/06/14/2022-6-14/</id>
    <published>2022-06-13T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:38.074Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-13</title>
    <link href="https://overmind7.github.io/2022/06/13/2022-6-13/"/>
    <id>https://overmind7.github.io/2022/06/13/2022-6-13/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:30.905Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022数据结构与算法春复习</title>
    <link href="https://overmind7.github.io/2022/06/13/2022%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%98%A5%E5%A4%8D%E4%B9%A0/"/>
    <id>https://overmind7.github.io/2022/06/13/2022%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%98%A5%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-16T09:13:59.697Z</updated>
    
    <content type="html"><![CDATA[<h1>算法分析</h1><p>渐进符号</p><p>算法效率的主要指标是基本操作次数的增长次数</p><p>==<em><strong>O</strong></em>（读“O”）：上界==</p><p><em><strong>Ω</strong></em>（读”omega”）：下界</p><p>==<em><strong>Θ</strong></em>（读”theta”）：近似==</p><blockquote><p>主要：最差和平均</p></blockquote><span id="more"></span><p>递归函数：递推公式</p><p>例：二分检索可用递归算法实现，其时间代价的计算可 以写出递推公式</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mtext>（</mtext><mi>n</mi><mtext>）</mtext><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mo>…</mo><mo>…</mo><mo>=</mo><mi>T</mi><mtext>（</mtext><mn>1</mn><mtext>）</mtext><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">T（n）=T(n/2)+1 =T(n/4)+1+1 =…… =T（1）+logn=logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span></p><h1>数据结构</h1><h2 id="线性结构">线性结构</h2><h3 id="线性表">线性表</h3><p>略</p><h3 id="栈和队列">栈和队列</h3><h4 id="栈">栈</h4><p>后进先出</p><p>主要操作</p><ul><li>入栈(push) 、</li><li>出栈(pop)</li><li>取栈顶元素(topValue)</li><li>判栈空(isEmpty)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> <span class="title class_">AStack</span> :<span class="keyword">public</span> Stack&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> maxsize; </span><br><span class="line"><span class="type">int</span> top; </span><br><span class="line">E *listarray; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AStack</span>(<span class="type">int</span> size =DefaultListSize) &#123;</span><br><span class="line">            maxsize =size; top =<span class="number">0</span>; listarray =<span class="keyword">new</span> E [size]; </span><br><span class="line">        &#125;</span><br><span class="line">~<span class="built_in">AStack</span>() &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] listarray; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            top = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> top;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> E&amp; it)</span></span>&#123; <span class="comment">//压栈 </span></span><br><span class="line">            <span class="built_in">Assert</span> (top!=maxsize, “Stack is full”);<span class="comment">//判断是否栈满</span></span><br><span class="line">listarray[top++] =it;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="comment">//弹栈</span></span><br><span class="line"><span class="built_in">Assert</span> (top!=<span class="number">0</span>, “Stack is empty”);<span class="comment">//判断是否栈空</span></span><br><span class="line"><span class="keyword">return</span> listarray[--top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Const E&amp; <span class="title">topValue</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="comment">//取栈顶元素</span></span><br><span class="line">            <span class="built_in">Assert</span> (top!=<span class="number">0</span>, “Stack is empty”);</span><br><span class="line"><span class="keyword">return</span> listarray[top<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>顺序栈和链式栈的比较:</p><ul><li>操作时间都是常数时间</li><li>空间开销类似一般线性表<ul><li>顺序栈<ul><li>初始化时分配了一个固定长度的空间</li><li>当栈不够满时，有空间浪费</li></ul></li><li>链式栈<ul><li>长度可变，空间按需分配</li><li>每个元素的链接域带来结构性开销</li></ul></li></ul></li></ul><p>应用：</p><ul><li>数制转换</li></ul><p>例如：（1348)<sub>10</sub> = (2504)<sub>8</sub> ，其运算过 程如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">conversion</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,N);</span><br><span class="line"><span class="keyword">while</span> (N) &#123;</span><br><span class="line"><span class="built_in">Push</span>(S, N % <span class="number">8</span>);</span><br><span class="line">N = N/<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line"><span class="built_in">Pop</span>(S,e);</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">&quot;%d&quot;</span>, e );</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// conversion</span></span><br></pre></td></tr></table></figure><ul><li>括号匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）凡出现左括弧，则进栈； </span><br><span class="line">2）凡出现右括弧，首先检查栈是否空 </span><br><span class="line">若栈空，则表明该“右括弧”多余， </span><br><span class="line">否则和栈顶元素比较， </span><br><span class="line">若相匹配，则“左括弧出栈” ， </span><br><span class="line">否则表明不匹配。 </span><br><span class="line">3）表达式检验结束时， </span><br><span class="line">若栈空，则表明表达式中匹配正确， </span><br><span class="line">否则表明“左括弧”有余。</span><br></pre></td></tr></table></figure><h4 id="队列">队列</h4><p>只允许在一端插入，在另一端删除的线性表</p><p>允许插入一端称为队尾(rear)，另一端称为队首 (front)</p><p>先进先出 (FIFO)</p><p>主要操作</p><ul><li>入队(enqueue) 、</li><li>出队(dequeue)</li><li>取队首元素(frontValue)</li></ul><p>队列实现：</p><ol><li><p>顺序队列</p><p>front：指向队头</p><p>rear：指向队尾</p><blockquote><p>初值：front = rear = -1</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">front==rear#空队列条件 </span><br><span class="line"></span><br><span class="line">sq[++rear]=x; #入队列</span><br><span class="line"></span><br><span class="line">x=sq[++front];#出队列</span><br></pre></td></tr></table></figure><p>问题：</p><p>设数组维数为M，则：</p><ul><li>当 <code>front=-1,rear=M-1 </code>时，再有元素入队发生溢出——<strong>真溢出</strong></li><li>当 <code>front≠-1,rear=M-1</code> 时，再有元素入队发生溢出——<strong>假溢出</strong></li></ul></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604222.png" alt="image-20220613104141676" style="zoom:67%;" /><ol start="2"><li><p>顺序循环队列</p><p>基本思想：</p><p>把队列设想成环形，让sq[0]接在sq[M-1]之后，若 rear+1==M,则令rear=0;</p><ul><li>实现：利用“模”运算</li><li>入队： rear=(rear+1)%M; sq[rear]=x;</li><li>出队： front=(front+1)%M; x=sq[front];</li><li>队满、队空判定条件<ul><li>队空：<code>front==rear</code></li><li>队满：<code>front==rear</code></li></ul></li></ul><blockquote><p>新问题：二义性，无法判断；</p></blockquote><p>​解决方法：少用一个元素空间：</p><ul><li>队空：<code>front == rear</code></li><li>队满：<code>(rear+1)%M == front</code></li></ul></li><li><p>链式队列</p><p>链表：设队首、队尾指针<code>front</code> 和 <code>rear</code>, <code>front</code> 指向头结点，<code>rear</code>  指向队尾</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> <span class="title class_">LQueue</span>:<span class="keyword">public</span> Queue&lt;E&gt; &#123; </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">Link&lt;E&gt; *front; </span><br><span class="line">Link&lt;E&gt; *rear;</span><br><span class="line"><span class="type">int</span> size; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line"><span class="built_in">LQueue</span>(<span class="type">int</span> sz=DefaultListSize) &#123; </span><br><span class="line">            front = rear = <span class="keyword">new</span> <span class="built_in">Link</span>&lt;E&gt;(), size=<span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">~<span class="built_in">LQueue</span>() &#123; </span><br><span class="line">            <span class="built_in">clear</span>(); <span class="keyword">delete</span> front;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="comment">//清空队列</span></span><br><span class="line"><span class="keyword">while</span> (front -&gt;next!= <span class="literal">NULL</span>) &#123; </span><br><span class="line">rear = front;front = front-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> rear; </span><br><span class="line">            &#125;</span><br><span class="line">rear = front;size=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">const</span> E&amp; it)</span> </span>&#123; <span class="comment">//入队列</span></span><br><span class="line">rear-&gt;next=<span class="keyword">new</span> <span class="built_in">Link</span>&lt;E&gt;(it, <span class="literal">NULL</span>); </span><br><span class="line">rear = rear-&gt;next; </span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">E <span class="title">dequeue</span><span class="params">()</span> </span>&#123; <span class="comment">//带头结点的链队列的删除操作</span></span><br><span class="line"><span class="built_in">Assert</span> (size!=<span class="number">0</span>, “Queue is empty”);</span><br><span class="line">E it=front-&gt;next-&gt;element;</span><br><span class="line">Link&lt;E&gt; *ltemp=front-&gt;next;<span class="comment">//记录删除结点位置</span></span><br><span class="line">front -&gt;next= ltemp-&gt;next; </span><br><span class="line"><span class="keyword">if</span> (rear == ltemp) rear = front;<span class="comment">//删除队尾结点</span></span><br><span class="line"><span class="keyword">delete</span> ltemp; </span><br><span class="line">size--; </span><br><span class="line"><span class="keyword">return</span> it; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> E&amp; <span class="title">frontValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="built_in">Assert</span> (size!=<span class="number">0</span>, “Queue is empty”);</span><br><span class="line"><span class="keyword">return</span> front-&gt;next-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>应用：例题——识别图元</p><h2 id="树">树</h2><h3 id="二叉树">二叉树</h3><p>二叉树定义：</p><ul><li>递归定义:<ul><li>二叉树由结点的有限集合组成，这个集合或者为空，或 者由一个根结点及两棵不相交的，分别称作这个根的<u>左子树</u>和<u>右子树</u>的二叉树组成。</li></ul></li><li>特点：<ul><li>每个结点至多有二棵子树。</li><li>二叉树的子树有左、右之分，且其次序不能任意颠倒。</li></ul></li></ul><p>树的定义：</p><p>数据对象 D： D是具有相同特性的数据元素的集合。</p><p>数据关系 R：</p><ul><li>若D为空集，则称为空树 。 否则:<ol><li>在D中存在唯一的称为根的数据元素root；</li><li>当n&gt;1时，其余结点可分为m (m&gt;0)个互==不相交==的有限集T1 , T2 , …, Tm，其中每一棵子集本身又是一棵符合本定义的树， 称为根root的子树。</li></ol></li></ul><blockquote><p>森林——一棵或者更多棵树的集合</p></blockquote><p>术语：</p><ul><li>结点:数据元素+若干指向子树的分支<ul><li>没有非空子树的结点称为<strong>叶结点</strong>(leaf)或终端结 点。</li><li>至少有一个非空子树的结点称为 <strong>分支结点</strong> 或 <strong>内部结点</strong>(internal node)。</li></ul></li><li>结点的<strong>度</strong>：树结点的子结点数。<ul><li>叶节点的度等于0，内部节点的度&gt;0.</li><li>树的度：树中所有结点的度的最大值</li></ul></li><li>从一个结点到它的结点都有边(edge)相连，这个结点称为它的子结点的父结点(parent)。</li><li><strong>路径</strong>：如果一棵树的一串结点n1 , n2 , … , nk有如下关系: 结点ni是 ni+1的父结点(1≤i&lt;k), 就把n1, n2, … , nk称为一条由n1至nk的<strong>路径</strong>(path)。<ul><li><strong>路径长度</strong>(length)是路径上边的数目。</li></ul></li><li><strong>子孙</strong>：如果有一条路径从结点R至结点M, 那么R就称为M的祖先 (ancestor), 而M称为R的子孙(descendant)。</li><li><strong>深度</strong>：结点M的深度(depth)就是从根结点到M的路径的长度。<ul><li>树的深度：树中叶子结点所在的最大层次</li></ul></li><li><strong>高度</strong>：树的高度(height)等于最深的结点的深度+1。任何 深度为d的结点的层数(level)都为d。根结点深度 为0，层数也为0。（严版根结点深度和层次为1）</li><li><strong>结点的层次</strong>：假设根结点的层次为0，第 <code>l</code> 层的 结点的子树根结点的层次为 <code>l+1</code></li></ul><p>二叉树分类：</p><ul><li><p>满二叉树：</p><p>​如果一棵二叉树的任何结点，或者是树叶，或者恰有 两个非空子女的分支结点，则此二叉树称为满二叉树。</p></li><li><p>完全二叉树</p><ul><li>若一棵二叉树最多只有最下面的两层结点度数可以小 于2，并且最下面一层的结点都集中在该层最左边的若干 位置上，则称此二叉树为完全二叉树。</li><li>形状要求：<ul><li>自根结点起每一层从左至右地填充。</li><li>一棵完全二叉树（高度为d）除了最后一层（d-1层）外，每 一层都是满的。</li><li>底层叶结点集中在左边的若干位置上。</li></ul></li></ul></li></ul><p>二叉树性质：</p><ol><li>二叉树的第i层（根为第0层）最多有2<sup>i</sup>个结点。</li><li>高度为k的二叉树至多有2<sup>k-1</sup>个结点。</li><li>具有 n 个结点的完全二叉树的高度为 是∟log2n┘ +1 ​。</li><li>任何一棵二叉树，度为0的结点比度为2的结点多一个。</li><li>若对含 n 个结点的完全二叉树从上到下、从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：<ol><li>若 i=1，则该结点是二叉树的根，无双亲， 否则，编号为 i/2(向下取整) 的结点为其双亲结点；</li><li>若 2i&gt;n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；</li><li>若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。</li></ol></li><li><strong>满二叉树定理</strong>：非空满二叉树树叶数等于其分支结点数加1。<ul><li><strong>满二叉树定理的推论</strong>: 一棵非空二叉树 空子树的数目等于其结点数目加1。</li></ul></li></ol><h4 id="遍历">遍历</h4><ul><li>前序遍历(preorder traversal)：<ul><li>访问根结点；前序 遍历左子树;前序遍历右子树。（DLR)</li></ul></li><li>中序遍历(inorder traversal)：<ul><li>中序遍历左子树;访 问根结点;中序遍历右子树。(LDR)</li></ul></li><li>后序遍历(postorder traversal)：<ul><li>后序遍历左子树; 后序遍历右子树;访问根结点。(LRD)</li></ul></li><li>层次遍历：<ul><li>对二叉树自上而下逐层遍历，同层结点 按照从左向右循序遍历</li></ul></li></ul><p>前序遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(BinNode&lt;E&gt;* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">// Empty subtree, do nothing</span></span><br><span class="line"><span class="built_in">visit</span>(root); <span class="comment">// Perform desired action</span></span><br><span class="line"><span class="built_in">preorder</span>(root-&gt;<span class="built_in">left</span>());</span><br><span class="line"><span class="built_in">preorder</span>(root-&gt;<span class="built_in">right</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现">实现</h4><p>二叉树ADT</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Elem</span>&gt; <span class="keyword">class</span> <span class="title class_">BinNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">BinNode</span>() &#123;&#125; <span class="comment">// Base destructor</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Elem&amp; <span class="title">val</span><span class="params">( )</span> </span>= <span class="number">0</span> ;<span class="comment">//取元素值</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setVal</span> <span class="params">(<span class="type">const</span> Elem&amp;)</span> </span>= <span class="number">0</span>;<span class="comment">//设置元素值</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BinNode* <span class="title">left</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>; <span class="comment">//返回左孩子指针</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BinNode* <span class="title">right</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">//返回右孩子指针</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setLeft</span><span class="params">(BinNode* ）= <span class="number">0</span>;<span class="comment">//设置左孩子指针</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> setRight(BinNode* ) = <span class="number">0</span>;<span class="comment">//设置右孩子指针</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> isLeaf() = <span class="number">0</span>;<span class="comment">//叶节点标识</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;;</span></span></span><br></pre></td></tr></table></figure><p>使用指针实现二叉树： 二叉链表(最常用)（BSTNode.h二叉查找树结点的头文件)</p><blockquote><p>好处：运算方便;问题：空指针太多</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BinNode.h&quot;</span></span></span><br><span class="line"><span class="comment">// Simple binary tree node implementation</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTNode</span> : <span class="keyword">public</span> BinNode&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Key k; <span class="comment">// The node&#x27;s key</span></span><br><span class="line">E it; <span class="comment">// The node&#x27;s value</span></span><br><span class="line">BSTNode* lc;<span class="comment">// Pointer to left child</span></span><br><span class="line">BSTNode* rc; <span class="comment">// Pointer to right child</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Two constructors -- with and without initial values</span></span><br><span class="line"><span class="built_in">BSTNode</span>() &#123; lc = rc = <span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="built_in">BSTNode</span>(Key K, E e, BSTNode* l =<span class="literal">NULL</span>, BSTNode* r =<span class="literal">NULL</span>)&#123; </span><br><span class="line">            k = K; it = e; lc = l; rc = r; </span><br><span class="line">        &#125;</span><br><span class="line">~<span class="built_in">BSTNode</span>() &#123;&#125; <span class="comment">// Destructor</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Functions to set and return the value and key</span></span><br><span class="line"><span class="function">E&amp; <span class="title">element</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> it; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setElement</span><span class="params">(<span class="type">const</span> E&amp; e)</span> </span>&#123; it = e; &#125;</span><br><span class="line"><span class="function">Key&amp; <span class="title">key</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> k; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setKey</span><span class="params">(<span class="type">const</span> Key&amp; K)</span> </span>&#123; k = K; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Functions to set and return the children</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> BSTNode* <span class="title">left</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> lc; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setLeft</span><span class="params">(BinNode&lt;E&gt;* b)</span> </span>&#123; lc = (BSTNode*)b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> BSTNode* <span class="title">right</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> rc; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setRight</span><span class="params">(BinNode&lt;E&gt;* b)</span> </span>&#123; rc = (BSTNode*)b; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Return true if it is a leaf, false otherwise</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (lc == <span class="literal">NULL</span>) &amp;&amp; (rc == <span class="literal">NULL</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>三重链表的变化：加了父指针 • 在某些经常要回溯到父结点的应用中很有效。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTNode</span>:<span class="keyword">public</span> BinNode&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Key k;</span><br><span class="line">E it;</span><br><span class="line">BSTNode* lc;</span><br><span class="line">BSTNode* rc;</span><br><span class="line">BSTNode* father;<span class="comment">//父指针</span></span><br><span class="line">…&#125;;</span><br></pre></td></tr></table></figure><p>使用数组实现完全二叉树</p><ul><li>在完全二叉树中，父子之间的关系可以通过索引的数学关系计算出来（参见二叉树的性质5）</li><li>完全二叉树的顺序存储，按照二叉树的层次遍历次序存储在一个数组中： ABCDEFGHIJKL</li><li>简单，省空间</li></ul><p>非完全二叉树可通过将空指针置空值后转换为完全 二叉树存储 （补全法）</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604293.png" alt="image-20220613194657772" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604851.png" alt="image-20220613194724509" style="zoom:50%;" /><p>公式中r表示结点的索引， n表示二叉树结点总数。</p><p>Parent® =  <img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220613194851326.png" alt="image-20220613194851326" style="zoom: 33%;" />，当r!=0时。</p><p>Leftchild® =2r +1，当2r+1&lt;n时。</p><p>Rightchild® = 2r+ 2 ，当2r+2 &lt; n 时。</p><p>Leftsibling® =r-1，当r为偶数且0&lt;=r&lt;=n-1。</p><p>Rightsibling® =r+1，当r为奇数且r+1&lt;n。</p><h3 id="bst">BST</h3><p><strong>定义</strong>：二叉检索树或者为空, 或者是满足下列条件的非空二叉 树:</p><ul><li>若它的左子树非空, 则左子树上所有结点的值均小于根结点的值;</li><li>若它的右子树非空, 则右子树上所有结点的值均大于或等于根结点 的值;</li><li>左右子树本身又各是一棵二叉检索树。</li></ul><p><strong>性质</strong>: 按照<strong>中序遍历</strong>将各结点打印出来，将得到按照<strong>由小到大</strong>的排列。</p><blockquote><p>提示：有序性是BST的显著特征，对它的插入或删除等操作均 需维持其有序性。（完全有序）</p></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604039.png" alt="image-20220613195324252" style="zoom: 50%;" /><p><strong>二叉检索树的效率就在于只需检索二个子树之一。</strong></p><ul><li>从根结点开始，在二叉检索树中检索值K。如果根结点储 存的值为K，则检索结束。</li><li>如果K小于根结点的值，则只需检索左子树</li><li>如果K大于根结点的值,就只检索右子树</li><li>这个过程一直持续到K被找到或者我们遇上了一个树叶。</li><li>如果遇上树叶仍没有发现K，那么K就不在该二叉检索树 中。</li></ul><p><strong>分析：检索效率与二叉检索树的高度有关</strong></p><p><strong>插入</strong></p><p><strong>删除</strong></p><p>从二叉检索树中删除一个任意的结点R，首先必须找到R， 接着将它从二叉树中删除掉。</p><p>分情况考虑：</p><ol><li><p>如果R是一个叶结点(没有儿子), 那么只要将R的父结点指 向它的指针改为NULL就可以了。</p></li><li><p>如果R是一个分支结点, 我们就不能简单地删除这个结点,  因为这样做会破坏树的连通性。</p><ul><li>如果R只有一个儿子, 就将R的父结点指向它的指针改为指向R 的子结点就可以了。</li><li>如果R有两个儿子, 为了保持二叉检索树的性质, 可以用R的中序后继结点来<strong>代替它</strong>。该结点应该是其右子树中值最小的结 点（<strong>在BST中是其右子树中最左的结点</strong>）。</li></ul><blockquote><p>删除 37</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604070.png" alt="image-20220613200724241" style="zoom:50%;" /></blockquote></li></ol><p><strong>查找二叉检索树中最小值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the minimum value from the BST, 返回指向 BST最小值结点的指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line">BSTNode&lt;Key, E&gt;* BST&lt;Key, E&gt;::</span><br><span class="line"><span class="built_in">getmin</span>(BSTNode&lt;Key, E&gt;* rt) &#123;</span><br><span class="line"><span class="keyword">if</span> (rt-&gt;<span class="built_in">left</span>() == <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">//左子树为空时，BST中最小值在根结点</span></span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getmin</span>(rt-&gt;<span class="built_in">left</span>());</span><br><span class="line"><span class="comment">//分析：左子树不为空时，BST中最小值在左子树的最左的结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除子树中最小值图示</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete the minimum value from the BST, returning the revised BST</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> E&gt;</span><br><span class="line">BSTNode&lt;Key, E&gt;* BST&lt;Key, E&gt;::</span><br><span class="line"><span class="built_in">deletemin</span>(BSTNode&lt;Key, E&gt;* rt) &#123;</span><br><span class="line"><span class="keyword">if</span> (rt-&gt;<span class="built_in">left</span>() == <span class="literal">NULL</span>) <span class="comment">// Found min</span></span><br><span class="line"><span class="keyword">return</span> rt-&gt;<span class="built_in">right</span>();<span class="comment">//最小值在根结点</span></span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// Continue left</span></span><br><span class="line">rt-&gt;<span class="built_in">setLeft</span>(<span class="built_in">deletemin</span>(rt-&gt;<span class="built_in">left</span>()));</span><br><span class="line"><span class="comment">//左子树不为空时，BST中最小值在左子树的最左的结点</span></span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604757.png" alt="image-20220613201132829" style="zoom:50%;" /><h4 id="avl">AVL</h4><h3 id="堆树">堆树</h3><ul><li>堆的特性<ol><li>堆是一棵完全二叉树，因此可用数组表示完全二叉树的 方法来表示堆；</li><li>堆是局部有序的（不同于BST），结点的值与其子结点 的值之间存在某种关系，分为最小堆和最大堆两种。</li></ol></li><li>最大堆：根结点存储着该树所有结点中的 最大值。（对每棵子树也如此）</li><li>最小堆：根结点存储 了该树所有结点的最小值。（对每棵子树也如此）</li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161604089.png" alt="image-20220613204957315" style="zoom:50%;" /><p>建堆：不断跟左右孩子中值最大的那个交换位置，直至找到合适的位置或 者已经下推到叶 子为止</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Heap class</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Comp&gt; <span class="keyword">class</span> <span class="title class_">heap</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">E* Heap; <span class="comment">// Pointer to the heap array</span></span><br><span class="line"><span class="type">int</span> maxsize; <span class="comment">// Maximum size of the heap</span></span><br><span class="line"><span class="type">int</span> n; <span class="comment">// Number of elements now in the heap</span></span><br><span class="line"><span class="comment">// Helper function to put element in its correct place</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">siftdown</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;<span class="comment">//下推</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isLeaf</span>(pos)) &#123; <span class="comment">// Stop if pos is a leaf</span></span><br><span class="line"><span class="type">int</span> j = <span class="built_in">leftchild</span>(pos); </span><br><span class="line">                <span class="type">int</span> rc = <span class="built_in">rightchild</span>(pos);</span><br><span class="line"><span class="keyword">if</span> ((rc &lt; n) &amp;&amp; Comp::<span class="built_in">prior</span>(Heap[rc], Heap[j]))</span><br><span class="line">j = rc; <span class="comment">// Set j to greater child&#x27;s value</span></span><br><span class="line"><span class="keyword">if</span> (Comp::<span class="built_in">prior</span>(Heap[pos], Heap[j])) <span class="keyword">return</span>; <span class="comment">// 找到合适位置</span></span><br><span class="line"><span class="built_in">swap</span>(Heap, pos, j);</span><br><span class="line">pos = j; <span class="comment">// 下移下推元素的位置</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>downadjust 算法效率：$$O(n)$$</p><p>堆有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span> 层深，插入、删除普通元素、删除最大元素的平均算法代价均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h3 id="huffman编码">Huffman编码</h3><p>构建：根据权值，每次选取最小的两个，合并后重新排序</p><h2 id="图">图</h2><h3 id="图的储存遍历">图的储存遍历</h3><h5 id="邻接矩阵">邻接矩阵</h5><h5 id="邻接链表">邻接链表</h5><h5 id="深度优先遍历：">深度优先遍历：</h5><blockquote><p>非递归：用栈，回溯思想。</p><p>递归方法其实用的也是栈。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Depth first search</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph* G, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="built_in">PreVisit</span>(G, v); <span class="comment">//执行适当动作</span></span><br><span class="line">G-&gt;<span class="built_in">setMark</span>(v, VISITED);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line"><span class="keyword">if</span> (G-&gt;<span class="built_in">getMark</span>(w) == UNVISITED) </span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line"><span class="built_in">PostVisit</span>(G, v); <span class="comment">//执行适当动作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DFS的算法分析</p><ul><li>因为每个顶点要访问一次，每条边在有向图中最多访问一次， 在无向图中最多访问两次；</li><li>Cost: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">Θ(|V| + |E|).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></li></ul><h5 id="广度优先遍历：">广度优先遍历：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph* G, <span class="type">int</span> start,Queue&lt;<span class="type">int</span>&gt;*Q)</span> </span>&#123;<span class="comment">//start为出发的顶点</span></span><br><span class="line"><span class="type">int</span> v, w;</span><br><span class="line">Q-&gt;<span class="built_in">enqueue</span>(start); <span class="comment">// Initialize Q</span></span><br><span class="line">G-&gt;<span class="built_in">setMark</span>(start, VISITED);</span><br><span class="line"><span class="keyword">while</span> (Q-&gt;<span class="built_in">length</span>() != <span class="number">0</span>) &#123; <span class="comment">// Process Q</span></span><br><span class="line">v=Q-&gt;<span class="built_in">dequeue</span>(); <span class="built_in">PreVisit</span>(G, v); <span class="comment">// Take action</span></span><br><span class="line"><span class="keyword">for</span>(w=G-&gt;<span class="built_in">first</span>(v);w&lt;G-&gt;<span class="built_in">n</span>();w=G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line"><span class="keyword">if</span> (G-&gt;<span class="built_in">getMark</span>(w) == UNVISITED) &#123;</span><br><span class="line">                G-&gt;<span class="built_in">setMark</span>(w, VISITED); </span><br><span class="line">                Q-&gt;<span class="built_in">enqueue</span>(w); </span><br><span class="line">            &#125;</span><br><span class="line">PostVisit（G，v）; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS的算法分析</p><p>Cost: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">Θ(|V| + |E|).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></p><h3 id="拓扑排序">拓扑排序</h3><blockquote><p>有向无环图：</p><p>如果一个有向图的任意顶点都无法通过一些有向边回到自身，那么称这个有向图为有向无环图</p></blockquote><p>拓扑排序：</p><ol><li><p>定义一个队列Q，找到<strong>一个</strong>入度为0的结点加入队列：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>)</span><br><span class="line">    q.<span class="built_in">push</span>(i);</span><br></pre></td></tr></table></figure></li><li><p>取队首节点，输出。然后删去所有从它出发的边，并令这些边到达的顶点的入度减1，如果某个顶点的入度减为0，则将其加入队列</p></li><li><p>反复进行 <code>2</code> 的操作，直到队列为空。如果队列为空时，入过队的节点数目恰好为N，说明拓扑排序成功，图G为有向无环图；否则失败，图G中有环。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">(Graph* G, Queue&lt;<span class="type">int</span>&gt;* Q)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> Count[G-&gt;<span class="built_in">n</span>()];<span class="comment">//顶点的入度数组</span></span><br><span class="line"><span class="type">int</span> v, w;</span><br><span class="line"><span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) Count[v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) <span class="comment">// Process edges</span></span><br><span class="line"><span class="keyword">for</span> (w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w))</span><br><span class="line">Count[w]++; <span class="comment">// Add to v2&#x27;s count</span></span><br><span class="line"><span class="keyword">for</span> (v=<span class="number">0</span>; v&lt;G-&gt;<span class="built_in">n</span>(); v++) <span class="comment">// Initialize Q</span></span><br><span class="line"><span class="keyword">if</span> (Count[v] == <span class="number">0</span>) <span class="comment">// 入度为0，No prereqs</span></span><br><span class="line">Q-&gt;<span class="built_in">enqueue</span>(v);</span><br><span class="line"><span class="keyword">while</span> (Q-&gt;<span class="built_in">length</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">Q-&gt;<span class="built_in">dequeue</span>(v);</span><br><span class="line"><span class="built_in">printout</span>(v); <span class="comment">// PreVisit for V</span></span><br><span class="line"><span class="keyword">for</span> (w=G-&gt;<span class="built_in">first</span>(v); w&lt;G-&gt;<span class="built_in">n</span>();w = G-&gt;<span class="built_in">next</span>(v,w)) &#123;</span><br><span class="line">Count[w]--; <span class="comment">// One less prereq</span></span><br><span class="line"><span class="keyword">if</span> (Count[w] == <span class="number">0</span>) <span class="comment">// Now free</span></span><br><span class="line">Q-&gt;<span class="built_in">enqueue</span>(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路径问题">最短路径问题</h3><h5 id="dijkstra算法">Dijkstra算法</h5><p>Dijkstra算法用来解决<strong>单源最短路问题</strong>，即给定图 G 和起点 s，通过算法得到S 到达其他每个顶点的最短距离。</p><blockquote><p>边上权值非负情形的单源最短路径问题</p><img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220614021342331.png" alt="image-20220614021342331" style="zoom:33%;" /></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161606119.png" alt="image-20220614021038805" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161606679.png" alt="image-20220614021054153" style="zoom:80%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(Graphm* g,<span class="type">double</span>* D,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">D[i] = g-&gt;<span class="built_in">getEdge</span>(s,i);</span><br><span class="line">&#125;</span><br><span class="line">D[s] = <span class="number">1</span>;</span><br><span class="line">g-&gt;<span class="built_in">setMark</span>(s,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">minn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++ )&#123;</span><br><span class="line"><span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[j]&gt;minn)&#123;</span><br><span class="line">k = j;</span><br><span class="line">minn = D[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">g-&gt;<span class="built_in">setMark</span>(k,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(k == y) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[k]*g-&gt;<span class="built_in">getEdge</span>(k,j)&gt;D[j])</span><br><span class="line">D[j] = D[k] * g-&gt;<span class="built_in">getEdge</span>(k,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="floyd算法">Floyd算法</h5><blockquote><p><strong>完全最短路径问题</strong>：每个顶点到其他所有顶点之间的的距离（最短路径的的长度）</p><p>Floyd算法只用于不含长度为负的回路的有向和无向加权图。</p><p>时间效率 n^3^</p></blockquote><p>Floyd算法基于这样一个事实：</p><ul><li>如果存在顶点k，使得以k作为中介点时顶点i和顶点j的当前最短距离缩短，则使用顶点k 作为顶点i和顶点j的中介点。<ul><li>即当<code>dis[i][k] + dis[k][j] &lt; dis[i][j]</code>时，</li><li>令<code>dis[i][j] = dis[i][k] + dis[k][j]</code> (其中<code>dis[i][j]</code>表示从顶点<code>i</code>到顶点<code>j</code>的最短距离)。</li></ul></li></ul><p>如图所示，从 V1 到 V4 的距离为3，而以 V2 为中介点时可以使 V1 到 V4 的距离缩短为2，那么就把 V1 到V4的距离从3优化为2，</p><p>即当<code>dis[1][2] + dis[2][4] &lt; dis[1][4]</code>时，<br>令<code>dis[1][4] = dis[1][2] + dis[2][4]</code>。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607595.png" alt="image-20220613203350241" style="zoom:50%;" /><p>由权重矩阵算出距离矩阵。</p><p>用中介点k时，i和j点之间的间接距离来优化直接距离。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607399.png" alt="image-20220613202251620" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">School</span><span class="params">(AdjMatrix w,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在以邻接带权矩阵表示的n个村庄中，求学校建在何处，使离学校最远的村庄到学校的路径最短。    </span></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=n;k++)   <span class="comment">//求任意两顶点间的最短路径       </span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">           <span class="keyword">if</span> (w[i][k]+w[k][j]&lt;w[i][j])  </span><br><span class="line">w[i][j]=w[i][k]+w[k][j];</span><br><span class="line">    m=MAXINT;             <span class="comment">//设定m为机器内最大整数。     </span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//求最长路径中最短的一条。       </span></span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++) <span class="comment">//求从某村庄i（1&lt;=i&lt;=n）到其它村庄的最长路径。          </span></span><br><span class="line">            <span class="keyword">if</span> (w[i][j]&gt;s) s=w[i][j];</span><br><span class="line">        <span class="keyword">if</span> (s&lt;=m) &#123;m=s; k=i;&#125;<span class="comment">//在最长路径中，取最短的一条。m记最长路径，k记出发顶点的下标。</span></span><br><span class="line">     <span class="built_in">Printf</span>(“学校应建在%d村庄，到学校距离为%d\n”,i,m);        </span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//算法结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最小生成树">最小生成树</h3><p>MST最小生成树是在一个给定的<strong>无向图</strong> G(V,E) 中求一棵树 T，使得这棵树拥有图 G中的所有顶点，且所有边都是来自图 G中的边，并且满足整棵树的边权之和最小。</p><p>性质：</p><ol><li>最小生成树是树，边数等于顶点数减1，而且树内一定不会有环。</li><li>对于给定的图 G(V,E)，其最小生成树不唯一，但是边权之和一定唯一</li><li>最小生成树是在无向图上生成的，因此其根节点可以是这棵树上的任意一个结点。</li></ol><h5 id="prim-算法-加点法">Prim 算法（加点法）</h5><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607540.png" alt="image-20220613201859197" style="zoom:80%;" /><h5 id="kruskal-算法-加边法">Kruskal 算法（加边法）</h5><p>把加权连通图 G*&lt;V,E&gt;* 的最小生成树看出一个具有 |V|-1 条边的无环子图，并且边的权重和是最小的</p><ol><li><p>按权重对所有边进行排序</p></li><li><p>按权重大小测试所有边</p><ol><li>如果当前测试边与当前子图不形成回路（不在同一个连通块）则加入当前子图中。</li><li>如果产生回路则抛弃当前边。</li></ol></li><li><p>直到最小生成树的边的总数等于总顶点数 减一，或者测试完所有边：</p><p>​结束时最小生成树的边数小于总顶点数减一，说明该图不连通。</p></li></ol><h1>算法</h1><h2 id="查找">查找</h2><h3 id="二分查找">二分查找</h3><blockquote><p>最好 1 ； 最差 log~2~ n；平均 log n</p></blockquote><p>整数二分法<br>有单调性一定可以二分，没有单调性也可以用二分<br>总之每次更新区间的时候，答案必定落在区间内<br>根据 check() （即自己想要什么）来确定用哪个模板（往左缩还是往右缩）<br>二分算法一定是有解的（一定有边界）</p><p>模板：使用——左移取左，右移取右</p><blockquote><p>更新：r = mid，则 mid = ( l + r ) / 2       （右边界边往左移）</p></blockquote><blockquote><p>更新：l = mid，则 mid = ( l + r + 1) / 2</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bst-avl">BST AVL</h3><h4 id="asl-平均查找长度">ASL 平均查找长度</h4><p>查找算法的平均查找长度 (Average Search Length) 为确定记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607239.png" alt="image-20220614000003743" style="zoom:30%;" /><p>二分查找：𝐴SL<sub>bs</sub> =log<sub>2</sub>(n+1)-1</p><h3 id="散列">散列</h3><p>哈希函数：以  f(key)  作为 关键字为 key 的记录在表中的位置。</p><p>性质：</p><ul><li>哈希函数是一个映象，即：将关键字的集合映射 到某个地址集合上，它的设置很灵活，只要这个地 址集合的大小不超出允许范围即可；</li><li>由于哈希函数是一个压缩映象，因此，在一般情 况下，很容易产生“<strong>冲突</strong>”现象，即： key1≠ key2， 而f(key1) = f(key2)。</li><li>很难找到一个不产生冲突的哈希函数。一般情况 下，<strong>只能选择恰当的哈希函数，使冲突尽可能少地 产生。</strong></li></ul><p>构造哈希函数：</p><ol><li><p>直接定址法</p><p>哈希函数为关键字的线性函数：</p><p>H(key) = a  * key + b</p><p>此法仅适合于： 地址集合的大小 = = 关键字集合的大小</p></li><li><p>数字分析法</p><p>提取分布均匀 的若干位或它们的组合作为地址。</p><p>此方法仅适合于： 能预先估计出全体关键字的每一位上各种数字出现的频度。</p></li><li><p>平方取中法</p><p>以关键字的平方值的中间几位作为存 储地址。求“关键字的平方值” 的目的 是“扩大差别” ，同时平方值的中间各 位又能受到整个关键字中各位的影响。</p><p>此方法适合于: 关键字中的每一位都有某些数字重复 出现频度很高的现象。</p></li><li><p>折叠法</p><p>将关键字分割成若干部分，然后取它 们的叠加和为哈希地址。有两种叠加处理的方法：移位叠加和间界叠加。</p><p>此方法适合于: 关键字的数字位数特别多。</p></li><li><p>除留余数法</p><p>H(key) = key MOD p</p><ul><li><p>p≤m (表长)</p></li><li><p>并且 p 应为不大于 m 的素数 或是 不含 20 以下的质因子。</p></li></ul></li><li><p>随机数法</p><p>H(key) = Random(key）</p><ul><li>其中，Random 为伪随机函数</li></ul></li></ol><p>冲突处理方法：</p><ol><li><p>闭散列法：开地址方法</p><p>使用探查序列：</p><p>为产生冲突的地址 H(key) 求得一个地址序列：</p><p>​<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607258.png" alt="image-20220614002419450" style="zoom:50%;" /></p></li></ol><img src="C:/Users/a1036/Desktop/数据结构/复习.assets/image-20220614005729355.png" alt="image-20220614005729355" style="zoom:30%;" /><blockquote><p>如果 di 是其他函数</p></blockquote><ol start="2"><li>开散列法：单链方法</li></ol><h2 id="排序">排序</h2><h3 id="稳定排序">稳定排序</h3><h4 id="冒泡">冒泡</h4><p><em><strong>Θ</strong></em>(n^2^)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//第一轮比较的次数：数组的总长度-1</span></span><br><span class="line"><span class="comment">//下一轮比上一轮的比较次数少一次</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">32</span>,<span class="number">3</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">14</span>&#125;;</span><br><span class="line"><span class="type">int</span> count = <span class="built_in">sizeof</span>(nums)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//外层循环控制比较轮数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; count<span class="number">-1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//内层循环控制每一轮多比较和交换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; count - i <span class="number">-1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line">temp = nums[j];</span><br><span class="line">nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">cout &lt;&lt; nums[i]&lt;&lt; <span class="string">&#x27;\t&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="插入">插入</h4><p><em><strong>Θ</strong></em>(n^2^)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序（升序排列）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line"><span class="type">int</span> temp2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">22</span>,<span class="number">43</span>,<span class="number">8</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">89</span>&#125;;</span><br><span class="line"><span class="type">int</span> count = <span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//1.将待排序的序列的第一个元素看作一个有序的序列，把第二个元素到最后一个当成未排序的序列；</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;<span class="comment">//从第二个开始比较</span></span><br><span class="line"><span class="comment">//2.取出下一个元素，在已经排序的元素序列中从后向前比较</span></span><br><span class="line">temp = a[i]; <span class="comment">//temp为要比较的元素</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; temp; j--) &#123;</span><br><span class="line"><span class="comment">//3.如果在已经排列的元素有大于该元素的，将该元素移到下一位；（从后向前交换位置）</span></span><br><span class="line">temp2 = a[j];</span><br><span class="line">a[j] = temp;</span><br><span class="line">a[j + <span class="number">1</span>] = temp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将新元素插入该位置？？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i &lt; count;i++)&#123;</span><br><span class="line">    cout &lt;&lt; a[i]&lt;&lt;<span class="string">&#x27;\t&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.重复3，直到在已排序的序列中元素小于或者等于新元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.将新元素插入该位置</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="归并">归并</h4><p>归并排序——分治 nlogn</p><p>步骤</p><p>a. 确定分界点</p><p>mid = （l+r）/2</p><p>|<em><strong><strong><strong><strong>|</strong></strong></strong></strong></em>__|</p><p>从中间分成两段</p><p>b. 先递归排序左边和右边</p><p>​c. 归并——把两个有序的数组合并成一个  ★难点</p><p>​双指针算法</p><p>​分别比较两个序列的最小值，直到输出到一个序列的终点，另一个后面的添加上去就行了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;  <span class="comment">//如果区间里的元素个数是一个或者没有</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l+r &gt;&gt; <span class="number">1</span>; <span class="comment">//确定中点</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q,l,mid),<span class="built_in">merge_sort</span>(q,mid + <span class="number">1</span>,r); <span class="comment">//递归左右两边</span></span><br><span class="line">    <span class="comment">//归并,需要一个辅助数组</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>,i = l,j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//i指向左半边的有序数列起点，j指向右半边有序数列起点</span></span><br><span class="line">    <span class="keyword">while</span>( i &lt;= mid &amp;&amp; j &lt;= r)&#123; <span class="comment">//当左右两边还没有循环到空的时候</span></span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++]; <span class="comment">//把小的那个放到当前的位置上去</span></span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这两个while循环表示如果还有没循环完的，直接接入到辅助数组后面去</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再把临时数组的数字存回去</span></span><br><span class="line">    <span class="keyword">for</span>(i = l,j = <span class="number">0</span>; i &lt;=r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; n ; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; n ; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="希尔-shell">希尔（shell）</h4><p>shell排序是一种插入排序算法，它出自D.L.Shell，因此而得名。Shell排序又称作缩小增量排序。Shell排序的执行时间依赖于增量序列。</p><p>设初始序列有n个元素，选定一个小于n大于或等于1的整数gap作为间隔，将全部元素分成gap个子序列，所有距离为gap的元素放在同一个子序列中，在每个子序列中分别采用直接插入算法进行排序；然后缩小间隔gap，如令gap=gap/2，重复上面的子序列划分和子序列排序动作；直到最后去gap=1，将所有的元素放到一个序列中为止。</p><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607555.png" alt="img"></p><h3 id="不稳定排序">不稳定排序</h3><h4 id="选择">选择</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序（擂台）</span></span><br><span class="line"><span class="comment">//假设第一个元素是最小值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line"><span class="type">int</span> nums[]&#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">344</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> count = <span class="built_in">sizeof</span>(nums)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//通过计算得到的数组长度，不能用于string数组</span></span><br><span class="line"><span class="comment">//擂台变量</span></span><br><span class="line"><span class="type">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123; <span class="comment">//比较了count-1轮</span></span><br><span class="line">min = nums[i];</span><br><span class="line">minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="comment">//打擂台</span></span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; min) &#123;</span><br><span class="line">min = nums[j];</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="keyword">if</span> (minIndex &gt; i) &#123;<span class="comment">//可以不写</span></span><br><span class="line">temp = nums[minIndex];</span><br><span class="line">nums[minIndex] = nums[i];</span><br><span class="line">nums[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后&quot;</span>&lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">cout&lt;&lt;nums[i]&lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="快排">快排</h4><blockquote><p>不稳定的</p><p>最坏 n^2^ ，最好 nlog n</p></blockquote><ol><li>快速排序——分治思想<br>步骤<br>L——————R</li></ol><p>i. 确定分界点 x<br>常用方法: 左边界q[l] 中间点q[(l+r)/2]  随机 q[r]<br>ii. 调整区间 难点☆如何确定区间<br>L————|——————R<br>&lt;=x     &gt;=x<br>左边的都小于等于x</p><ol><li>暴力解法<br>用两个数组储存大于x的和小于x的</li><li>用两个指针<br>移动两个指针i，j<br>如果 i 指向的数大于 x，j 指向的数小于 x<br>交换 i ，j 指向的数<br>继续移动i j 直到相遇</li></ol><p>iii. 递归处理左右两端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;  <span class="comment">//科学计数法</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;  <span class="comment">//从l 排序到 r</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;   <span class="comment">//没有意义的情况（没有或者只有一个数）</span></span><br><span class="line"><span class="comment">//！！必须要有等于，是递归的中止条件！！</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>,j = r + <span class="number">1</span>,x = q[ l+r &gt;&gt; <span class="number">1</span>]; <span class="comment">//i j 要往外扩展一个，因为下面是do while</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++ ; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j-- ; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i],q[j]);   <span class="comment">//当 i j 停下不动，说明找到了不符合左右两区间的数，交换他们</span></span><br><span class="line">                <span class="comment">//而且还要满足 i &lt; j（这两个指针还没有相遇）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q,l,j);     <span class="comment">//递归</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q,j + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span> ,n - <span class="number">1</span>);   <span class="comment">//注意这里从0开始，排序到n-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="堆排">堆排</h4><ul><li>堆</li></ul><p>定义：堆可以定义为一颗二叉树，树的节点中包含键，并且满足</p><ol><li>树的形状是完全二叉树</li><li>每一个节点的键大于等于它子女的键（父母优势）</li></ol><blockquote><p>同一节点的左右子树没有关系</p></blockquote><ul><li>堆排序</li></ul><p>过程：</p><ol><li>构造堆：为一个给定的数组构造一个堆</li><li>删除最大键：对剩下的堆应用 <code>n-1</code> 次根删除操作</li></ol><blockquote><p>构造 n，删除 log n；堆排序 n log n</p><p>结果：输出升序排列数组</p></blockquote><h3 id="基数排序">基数排序</h3><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161607837.png" alt="image-20220614020329686" style="zoom: 67%;" /><h2 id="分治">分治</h2><p>见归并排序</p><h2 id="动态规划">动态规划</h2><h2 id="贪心">贪心</h2><p>现有如下8个活动，每个活动均希望使用同一个会议室举办活动，表中列出了每个活动的起始时间Si和结束时间fi。现在希望能最大化利用这一间会议室，使之能不冲突地举办更多活动。请用贪心算法针对如下活动进行安排，即给出最大相容活动子集。（只需写出或画出计算过程及结果，无需编写算法伪代码）。<br>说明：每个活动 i 都有一个要求使用会议室的起始时间si和一个结束时间fi,且si &lt;fi 。如果选择了活动i，则它在半开时间区间[si, fi)内占用会议室。若区间[si, fi)与区间[sj, fj)不相交，则称活动i与活动j是相容的。也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。</p><table><thead><tr><th>活动序号</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>开始时间</td><td>1</td><td>12</td><td>25</td><td>27</td><td>36</td><td>46</td><td>38</td><td>50</td></tr><tr><td>结束时间</td><td>23</td><td>28</td><td>35</td><td>43</td><td>50</td><td>57</td><td>60</td><td>65</td></tr></tbody></table><p>也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s[]为开始时间列表，f[]为结束时间列表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GreedySelect</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> s[],<span class="type">int</span> f[],<span class="type">bool</span> A[])</span></span>&#123;</span><br><span class="line">    A[<span class="number">1</span>]=<span class="literal">true</span>;<span class="comment">//将第一个活动先安排</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>,count=<span class="number">1</span>; <span class="comment">//count为被安排的节目个数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=f[j])&#123;</span><br><span class="line">A[i]=<span class="number">1</span>;</span><br><span class="line">j=i;</span><br><span class="line">count++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> A[i]=<span class="number">0</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯">回溯</h2><h2 id="分支界限">分支界限</h2>]]></content>
    
    
    <summary type="html">&lt;h1&gt;算法分析&lt;/h1&gt;
&lt;p&gt;渐进符号&lt;/p&gt;
&lt;p&gt;算法效率的主要指标是基本操作次数的增长次数&lt;/p&gt;
&lt;p&gt;==&lt;em&gt;&lt;strong&gt;O&lt;/strong&gt;&lt;/em&gt;（读“O”）：上界==&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ω&lt;/strong&gt;&lt;/em&gt;（读”omega”）：下界&lt;/p&gt;
&lt;p&gt;==&lt;em&gt;&lt;strong&gt;Θ&lt;/strong&gt;&lt;/em&gt;（读”theta”）：近似==&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要：最差和平均&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="https://overmind7.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="考试复习" scheme="https://overmind7.github.io/categories/%E7%AE%97%E6%B3%95/%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://overmind7.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-12</title>
    <link href="https://overmind7.github.io/2022/06/12/2022-6-12/"/>
    <id>https://overmind7.github.io/2022/06/12/2022-6-12/</id>
    <published>2022-06-11T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:23.906Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022春计算机系统复习</title>
    <link href="https://overmind7.github.io/2022/06/11/2022%E6%98%A5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>https://overmind7.github.io/2022/06/11/2022%E6%98%A5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-06-11T08:55:11.000Z</published>
    <updated>2022-06-16T09:13:11.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2><span id="more"></span><p>ASCII：</p><p>0：48</p><p>9：57</p><p>A：65</p><p>Z：90</p><p>a：97</p><p>z：122</p><p>位：bit</p><p>字节：byte</p><p>字：</p><blockquote><p>单位换算：</p></blockquote><h3 id="编译过程">编译过程</h3><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656832.png" alt="image-20220610215408779" style="zoom: 50%;" /><h2 id="汇编">汇编</h2><h3 id="寄存器">寄存器</h3><p>16位：AX、BX、CX、DX；SI、DI；SP、DP</p><p>8位：AH, AL ; BH, BL； CH, CL； DH, DL</p><p>32位：EAX, EBX, ECX, EDX；ESI, EDI； ESP, EBP</p><p>段寄存器：DS，ES，SS ……</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656753.png" alt="image-20220610203943865" style="zoom:50%;" /><p>汇编语言格式：（AT&amp;T格式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl $8,%eax</span><br><span class="line">;指令 源操作数，目的操作数</span><br></pre></td></tr></table></figure><p>操作数：</p><ul><li>立即数</li><li>寄存器</li><li>储存器</li></ul><blockquote><p>CPU计算==仅从==寄存器直接存/取数据。</p></blockquote><hr><h3 id="数据传送">数据传送</h3><ul><li><code>movl</code>: 用于传送32位的长字值</li><li><code>movw</code>： 用于传送16位的字值</li><li><code>movb</code>： 用于传送8位的字值</li></ul><h5 id="传送数据到内存">传送数据到内存</h5><h5 id="获取变量在内存的地址">获取变量在内存的地址</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movl $value1,%edi</span><br><span class="line">leal value1,%edi;lea—Load Effective Address</span><br><span class="line">;加 L 表示 32 位</span><br></pre></td></tr></table></figure><p>计算 <code>3x+5</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leal 5(%edx, edx, 2),%eax</span><br></pre></td></tr></table></figure><blockquote><p>比用专用 ALU 算数逻辑单元更快</p><p>而且能够与 ALU 并行</p></blockquote><hr><h4 id="寻址方式">寻址方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">movl $1,%eax;立即数寻址</span><br><span class="line">;立即数寻址方式主要用来给寄存器或存储单元赋值，因此这种寻址方式不能用于单操作数指令；</span><br><span class="line">;若用于双操作数指令，也只能用于源操作数字段，不能用于目标操作数字段。</span><br><span class="line"></span><br><span class="line">movl %ebx,%eax;寄存器寻址</span><br><span class="line">;指令所要的操作数已存储在某寄存器中，或把目标操作数存入寄存器。</span><br><span class="line">;把在指令中指出所使用寄存器(即：寄存器的助忆符)的寻址方式称为寄存器寻址方式。</span><br></pre></td></tr></table></figure><h5 id="基址比例变址寻址">基址比例变址寻址</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Memory references have the following syntax:segment:offset(base, index, scale).</span><br></pre></td></tr></table></figure><ul><li><p>segment是x86架构的任意一个段地址寄存器。segment参数是可选的（可以不指定）：如果指定了段寄存器，必须和偏移量之间有一个冒号。如果segment参数被省略，默认的段地址寄存器ds 就会被用于计算最终的地址。</p></li><li><p>offset是指从段起始地址到目标变量地址之间的偏移量。offset同样也是可选</p></li><li><p>base 和 index 参数可以是任意的32位通用寄存器</p></li><li><p>Scale参数是表示index寄存器内容需要乘的值，==只能是1，2，4，8……==默认是1.</p></li><li><p>例1</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl base(%ebx, %esi, 4), %eax</span><br></pre></td></tr></table></figure><p>表示 <code>%eax = [ base + %ebx + %esi*4 ]</code><br>将 <code>base + %ebx + %esi*4</code> 指向的内存位置的值赋值给eax寄存器。</p><ul><li>例2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leal 32(, %edx, 8), %eax</span><br></pre></td></tr></table></figure><p><code>%eax = 32 + ( %edx * 8 ) = 8 * (4 + %edx)</code><br>通常可以用<code>lea</code>指令表示一些乘法运算。</p><h5 id="绝对寻址">绝对寻址</h5><p>在指令格式的地址的字段中直接指出操作数在内存的地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl 0x08048054,%eax</span><br></pre></td></tr></table></figure><h5 id="间接寻址">间接寻址</h5><p>相对于寄存器寻址多了个括号：表示这个值不是来自 <code>%ebx</code>，而是来自一个内存地址，这个内存地址保存在 <code>%ebx</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl (%ebx),%eax </span><br></pre></td></tr></table></figure><h5 id="变址寻址">变址寻址</h5><p>作用：访问数组、循环语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl (%ebx,%edx),%eax</span><br></pre></td></tr></table></figure><hr><h3 id="栈">栈</h3><p>在每个程序所分配的内存中，划分出一段连续的区域，作为栈空间。</p><p>栈：先进后出</p><p>栈顶指针：保存在%esp寄存器中</p><p>压栈：push</p><p>出栈：pop</p><blockquote><p><strong>栈顶是朝着低地址方向 （栈是向着零地址方向增长）</strong></p></blockquote><hr><h3 id="算术逻辑运算指令">算术逻辑运算指令</h3><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656134.png" alt="image-20220611143910209" style="zoom:80%;" /><hr><h3 id="跳转指令">跳转指令</h3><p><code>%eip</code> 寄存器：存放下一条要执行指令的地址。</p><p>跳转指令：修改 <code>%eip</code> 的值</p><h5 id="直接跳转指令">直接跳转指令</h5><p>jmp：四种格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jmp lable;跳转到标号</span><br><span class="line">jmp 0x0804909a ;跳转到地址</span><br><span class="line">jmp *%eax ;跳转到寄存器里面保存的地址</span><br><span class="line">jmp *lable;？</span><br></pre></td></tr></table></figure><blockquote><p>指令的某一行加个冒号 <code>:</code> 作为标记</p></blockquote><h5 id="条件跳转指令">条件跳转指令</h5><p>条件在 <code>%eflags </code>寄存器中</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657630.png" alt="image-20220611150041285" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657079.png" alt="image-20220611150113553" style="zoom: 50%;" /><hr><h3 id="循环指令">循环指令</h3><p>循环可以通过跳转指令来实现 也可以利用loop指令来实现</p><h2 id="信息存储">信息存储</h2><h3 id="位-字节">位、字节</h3><h4 id="位">位</h4><h4 id="字节">字节</h4><h4 id="机器字长">机器字长</h4><h4 id="字节顺序">字节顺序</h4><ul><li><p>大端法：MAC，Internet</p><ul><li>最高有效字节在最前面</li></ul></li><li><p>小端法：X86</p><ul><li>最低有效字节在最前面</li></ul><blockquote><p>最低有效位：最低有效位（the least significant bit，lsb）是指一个二进制数字中的第0位 （即最低位）</p><p>最高有效位：msb</p></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657516.png" alt="image-20220611093703094" style="zoom:80%;" /></li></ul><h4 id="位运算">位运算</h4><ol><li>与 <code>&amp;</code> 、或 <code>|</code>、非 <code>~</code>、异或 <code>^</code></li></ol><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657287.png" alt="image-20220611103319274"></p><blockquote><p>直接作用于整数类型：long, int, short, char, unsigned</p><p>将整数看成字节向量，按每个位来运算</p></blockquote><ol start="2"><li><code>&amp;&amp;</code>、<code>||</code>、<code>!</code>：看成整体，返回 <code>0</code>或者是 <code>1</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!<span class="number">0x41</span> → <span class="number">0x00</span></span><br><span class="line">!<span class="number">0x00</span> → <span class="number">0x01</span></span><br><span class="line">!!<span class="number">0x41</span> → <span class="number">0x01</span></span><br><span class="line"><span class="number">0x69</span> &amp;&amp; <span class="number">0x55</span> → <span class="number">0x01</span></span><br><span class="line"><span class="number">0x69</span> || <span class="number">0x55</span> → <span class="number">0x01</span></span><br></pre></td></tr></table></figure><ol start="3"><li>位移操作<ul><li>左移: x &lt;&lt; y<ul><li>将 x 左移 y 位 左边的位全都丢弃 在右边填0</li></ul></li><li>右移: x &gt;&gt; y<ul><li>将 x 右移 y 位 右边的位全都丢弃</li><li>逻辑移位：左边填0</li><li>算术移位：填充符号位</li></ul></li><li>未定义行为 移位数字小于0 或大于字长</li></ul></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657062.png" alt="image-20220611104254011" style="zoom:50%;" /><h3 id="整数">整数</h3><h4 id="有符号数与无符号数表示">有符号数与无符号数表示</h4><h5 id="整数编码">整数编码</h5><p>无符号整数补码表示：</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657068.png" alt="image-20220611104956200" style="zoom:60%;" /><p>Sign Bit</p><ul><li>在补码表示中，最高位为符号位<ul><li>0表示非负数</li><li>1 表示负数</li></ul></li></ul><p>补码与十进制转换</p><p>例：8位二进制补码转换</p><table><thead><tr><th style="text-align:center">-128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>125</mn><mo>=</mo><mo>−</mo><mn>128</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-125=-128+2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h4 id="转换">转换</h4><blockquote><p>正数：原码与补码相同，符号位为0</p><p>负数：将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1</p><blockquote><p>例：求-5的补码。</p><p>-5对应带符号位负数5（10000101）→除符号位外所有位取反（11111010）→加 00000001为 (11111011)</p></blockquote></blockquote><h4 id="扩展与截断">扩展与截断</h4><h4 id="加法-乘法-移位">加法、乘法、移位</h4><h4 id="总结">总结</h4><ul><li>加法:<ul><li>无符号/有符号: 正常加法+截位</li><li>在位级表示上无区分</li></ul></li><li>乘法:<ul><li>无符号/有符号: 正常乘法法+截位</li><li>在位级表示上无区分</li></ul></li><li>除法:<ul><li>讨论了除数为2的整数幂的情况</li><li>无符号/有符号: 移位的区别</li></ul></li></ul><blockquote><p>为什么要用无符号整数</p><ul><li>当进行整数模运算时</li><li>当使用 Bit位来表示集合时</li><li>需要节省内存空间时——例如表示0~255的像素分量</li><li>…………</li></ul></blockquote><h3 id="浮点数">浮点数</h3><h4 id="二进制小数">二进制小数</h4><p>小数点右边，每移动一位，基数乘以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span></span></span></span></p><p>5.75 = 101.11<sub>2</sub> = 2<sup>2</sup> + 2<sup>0</sup> + 2<sup>-1</sup> + 2<sup>-2</sup></p><blockquote><p>限制</p><ul><li>只能精确表示诸如 x/2<sup>k</sup>的数</li><li>其他的值只能近似表示</li></ul></blockquote><h4 id="ieeee-浮点数标准">IEEEE 浮点数标准</h4><ul><li><p>数学形式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>s</mi></msup><mi>M</mi><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">(-1)^sM ×2^E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>符号位s 确定了这个数是负数还是正数，数值0的符号位特殊处理</li><li>尾数M（Significand） 是一个二进制小数，通常规定在 范围中[1.0,2.0).</li><li>阶码 E （Exponent）表示2的幂</li></ul></li></ul><blockquote><ul><li>IEEE浮点数采用 M x 2E的形式表示（近似表示）</li><li>提供了表示一些特殊值（正负无穷，NaN）的方法</li><li>只有有限的范围和精度</li><li>不遵守普遍的算术属性（例如结合性）</li></ul></blockquote><p>规格化</p><h4 id="性质">性质</h4><h4 id="舍入与运算">舍入与运算</h4><h5 id="舍入">舍入</h5><h5 id="加法">加法</h5><h5 id="乘法">乘法</h5><h4 id="c语言中的浮点数">C语言中的浮点数</h4><ul><li><p>C 提供了两种浮点数表示方式</p><ul><li>float single precision</li><li>double double precision</li></ul></li><li><p>转换</p><ul><li>在 int, float, and double 的转换过程中位级表示会改 变</li><li>double/float → int<ul><li>值向零舍入</li><li>对于无法表示或超出范围的值没有进行定义</li></ul></li><li>int → double<ul><li>能够保留精确值</li></ul></li><li>int → float<ul><li>数字不会溢出，但可能被舍入</li></ul></li></ul></li></ul><h2 id="程序的机器级表示">程序的机器级表示</h2><h3 id="基本">基本</h3><h4 id="从-c-代码到目标文件">从 c 代码到目标文件</h4><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657684.png" alt="image-20220610215408779" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657459.png" alt="image-20220611152605788" style="zoom:40%;" /><p>区别在于可执行目标文件已经分配了实际内存地址。</p><h4 id="数据传送与寻址">数据传送与寻址</h4><h5 id="基本数据类型">基本数据类型</h5><ul><li>“整数” 1，2，4，8 bytes<ul><li>数据值</li><li>地址 (untyped pointers) （地址长度与机器字长相等）</li></ul></li><li>浮点数 4, 8, or 10 bytes<ul><li>单精度（float: 4 bytes）</li><li>双精度（double: 8 bytes）</li><li>长双精度（long double or extended: 10 bytes）</li></ul></li><li>数组与结构<ul><li>内存中一组连续分配的字节</li></ul></li></ul><h5 id="基本操作">基本操作</h5><ul><li><p>对寄存器或内存数据进行操作的运算类指令</p></li><li><p>在内存与寄存器中之间传送数据的传送类指令</p><ul><li>将数据从内存加载到寄存器中</li><li>将寄存器数据保存到内存中</li></ul></li><li><p>决定程序走向的 决定程序走向的控制类指令</p><ul><li>无条件/有条件跳转</li><li>分支/循环</li></ul></li></ul><h5 id="寄存器">寄存器</h5><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657533.png" alt="image-20220611153355835" style="zoom:40%;" /><h5 id="传送数据">传送数据</h5><ol><li>MOV 指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl Source, Dest </span><br></pre></td></tr></table></figure><p>操作数类型</p><ul><li>Immediate:立即数<ul><li>例: $0x400, $-533</li><li>占用 1, 2, or 4 字节</li></ul></li><li>Register: 8个整数寄存器之一 个整数寄存器之一<ul><li>例: %eax, %edx</li><li>%esp与%ebp保留作为特殊用途</li><li>其他通用寄存器可能会在某些操作时有特定用途</li></ul></li><li>Memory: 内存地址<ul><li>简单例子: (%eax)</li><li>有非常多的寻址模式</li></ul></li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657207.png" alt="image-20220611153814868" style="zoom:40%;" /><ol start="2"><li>push 与 pop</li></ol><p>注意栈是向下生长，地址向下递减</p><ol start="3"><li><p>内存寻址</p><p>如果操作数不在寄存器，就需要到内存中去找到数据存放的地址，然后将数据取到寄存器。</p><ul><li>寄存器间接寻址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl (%ecx),%eax</span><br></pre></td></tr></table></figure><p>寄存器中存放的是内存地址</p><ul><li>基址变址寻址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl 8(%ebp),%edx</span><br></pre></td></tr></table></figure><p>寄存器存放内存的起始地址，常数给出偏移量</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657106.png" alt="image-20220611155058518" style="zoom:50%;" /></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161657785.png" alt="image-20220611155141174" style="zoom:50%;" /><ol start="4"><li>lea 寻址<ul><li>格式：leal Src, Dest<ul><li>Src: 地址计算表达式</li><li>Src 结果保存在 Dest 中</li></ul></li><li>用途：<ul><li>计算内存地址本身（不取内存里的值）</li><li>计算诸如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>k</mi><mo>∗</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x + k*y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 表达式的值（k - 1，2，4，8）</li></ul></li></ul></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658676.png" alt="image-20220611155759325" style="zoom: 50%;" /><h5 id="算术操作">算术操作</h5><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658200.png" alt="image-20220611160025669" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161656735.png" alt="image-20220611160042885"></p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658884.png" alt="image-20220611160143661" style="zoom:40%;" /><blockquote><p>注意：加一减一操作，例如对有符号数，对补码运算，对补码的+7+1，变成1000，是补码的-8了。</p></blockquote><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658450.png" alt="image-20220611161326163" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658907.png" alt="image-20220611161958820" style="zoom:50%;" /><h3 id="控制">控制</h3><h4 id="条件码">条件码</h4><ul><li>每个条件码占一个bit<ul><li>CF 最高位产生了进位，无符号操作数的溢出</li><li>SF 符号标志，操作结果为负数</li><li>ZF 零标志</li><li>OF 溢出标志 (有符号数 signed)</li></ul></li><li>例如: addl/addq Src, Dest ↔ t = a+b<ul><li>CF set ，如果t溢出</li><li>ZF set ，如果 t == 0 SF</li><li>set ，如果 t &lt; 0 (as signed)</li><li>OF set，如果有符号数溢出</li><li>lea/mov 指令不设置条件码</li></ul></li></ul><p>条件码设置</p><ol><li><p>CMP指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmpl Src, Dest;Dest – Src, 影响标志位</span><br></pre></td></tr></table></figure><p>cmpl b,a 等价于计算 a-b，但不改变a与b的值。</p><p>CF set 无符号数运算时有进位</p><p>ZF set 如果 a == b</p><p>SF set 如果 有符号数(a-b)&lt; 0</p><p>OF set 如果有符号数运算溢出</p></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658953.png" alt="image-20220611165832271" style="zoom:50%;" /><ol start="2"><li><p>TEST 指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testl Src, Dest;Dest &amp; Src，影响标志位</span><br><span class="line">testq</span><br></pre></td></tr></table></figure><p><code>testl b,a</code> 等价于计算a&amp;b（但不改变a或b的值）</p><p>ZF set 如果a&amp;b== 0</p><p>SF set 如果a&amp;b&lt;0</p></li><li><p>SetX 指令</p><p>根据条件码的组合将一个字节设置为0或1。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658612.png" alt="image-20220611170144525" style="zoom:50%;" /></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gt</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Body</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movl 12(%ebp),%eax # eax = y</span><br><span class="line">cmpl %eax,8(%ebp) # Compare x : y</span><br><span class="line">setg %al # al = x &gt; y</span><br><span class="line">movzbl %al,%eax # Zero rest of %eax</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658415.png" alt="image-20220611170257518" style="zoom:50%;" /><h4 id="条件分支">条件分支</h4><ol><li><p>跳转指令</p><p>jx 指令：根据不同的条件跳转到某条指令处执行</p></li></ol><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658850.png" alt="image-20220611170527892" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658555.png" alt="image-20220611185652894" style="zoom:50%;" /><ol start="2"><li><p>分支跳转：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val = x&gt;y ? x-y : y-x;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nt = !Test;</span><br><span class="line"><span class="keyword">if</span> (nt) <span class="keyword">goto</span> Else;</span><br><span class="line">val = Then_Expr;</span><br><span class="line"><span class="keyword">goto</span> Done;</span><br><span class="line">Else:</span><br><span class="line">val = Else_Expr;</span><br><span class="line">Done;</span><br></pre></td></tr></table></figure><ul><li>为每一个分支都产生一段代码</li><li>根据条件执行合适的代码段</li></ul></li><li><p>条件传送：</p><ul><li>满足条件才传送</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Test) Dest&lt;-Src</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tval = Then_Expr;</span><br><span class="line">result = Else_Expr;</span><br><span class="line">t = Test;</span><br><span class="line"><span class="keyword">if</span>(t) result = tval;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><ul><li>先计算一个条件操作的两种结果，然后根据条件 选择某一个</li><li>优势：能够更好的匹配现代处理器的特性<ul><li>流水线</li><li>分支预测</li></ul></li></ul></li></ol><blockquote><p>避免了跳转指令</p><ul><li>CPU无需做分支预测， 避免预测错误的代价</li><li>流水线效率更高</li></ul></blockquote><h4 id="循环">循环</h4><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161658060.png" alt="image-20220611193809310" style="zoom: 67%;" /><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659358.png" alt="image-20220611193821579" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659456.png" alt="image-20220611193837878"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659032.png" alt="image-20220611193821579" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878"></p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161659159.png" alt="image-20220611193837878" style="zoom:67%;" /><h4 id="switch">switch</h4><p>跳转表：各个代码段的起始地址</p><h3 id="过程-函数">过程（函数）</h3><p>为什么用栈？</p><p>机器用栈来传递<strong>过程参数</strong>、<strong>存储返回信息</strong>、<strong>保存寄存器</strong>用于以后恢复，以 及<strong>本地存储</strong>。而为单个过程分配的那部分栈称为栈帧（stack frame）。</p><h4 id="栈帧">栈帧</h4><p>每一个函数或过程在执行时，都需要在内存 中分配一个空间来保存运行时数据，这个空间由 于是采用栈的方式进行操作，所以也称为<strong>栈帧</strong>。</p><ul><li>当前函数或过程的栈顶地址保存在%esp中， 栈底地址保存在<code>%ebp</code>中；</li><li>栈是向**“下”**增长的，或者说是向地址<code>0x0</code>处 增加的，因此 <code>%esp</code> 中的值小于或等于%ebp 中的值；</li><li>栈帧是内存中一段<strong>连续的</strong>内存空间；</li><li>被调用者的栈帧紧挨着调用者的栈帧；</li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161702787.png" alt="image-20220611200816982" style="zoom:80%;" /><p>构造玩传递参数之后准备调用 sum，首先保存一个返回地址</p><p>sum栈帧的初始化</p><p>保存老的ebp</p><blockquote><p>调用：从传递参数区取出参数，而不是局部参数区，这样可以有效利用 %ebp + n</p></blockquote><img src="C:\Users\a1036\Desktop\计算机系统\计算机系统复习.assets\image-20220611203202241.png" alt="image-20220611203202241" style="zoom:50%;" /><p>ebp上面保存的是调用sum函数的函数的老的 %ebp，和上一个函数的返回地址。</p><p>sum栈帧的返回</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703118.png" alt="image-20220611203838637" style="zoom:50%;" /><ol><li>leave ： 把 old ebp 弹回给 ebp，使其恢复到主函数栈帧栈底的位置</li><li>return：把返回地址弹给 <code>%eip</code> ，使得主函数能够继续执行调用sum函数之后的指令。</li></ol><h4 id="嵌套与递归">嵌套与递归</h4><p>嵌套</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703485.png" alt="image-20220611204452223" style="zoom:50%;" /><p>递归</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703288.png" alt="image-20220611204531754" style="zoom:50%;" /><h4 id="swap-函数">swap 函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *xp,<span class="type">int</span> *yp)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t0 = *xp;</span><br><span class="line"><span class="type">int</span> t1 = *yp;</span><br><span class="line">*xp = t1;</span><br><span class="line">*yp = t0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movl 8(%ebp), %edx # edx = xp</span><br><span class="line">movl 12(%ebp),%ecx # ecx = yp</span><br><span class="line">movl (%edx), %ebx # ebx = *xp(t0)</span><br><span class="line">movl (%ecx), %eax # eax = *yp(t1)</span><br><span class="line">movl %eax, (%edx) # *xp = t1</span><br><span class="line">movl %ebx, (%ecx) # *yp = t0</span><br></pre></td></tr></table></figure><h4 id="小结">小结</h4><ul><li>过程及函数调用， 都是通过 栈来实现</li><li>每次调用时的参数按照 固定顺序存放在栈中； 过程/函数内部的变量 存放顺序 与编译器有关</li><li>过程/函数执行完毕后， 会释放其所占用的栈空间 。</li><li>对返回地址 及保存的 ebp的修改会导致程序 错误和崩溃，常被用来 作为黑客攻击手段。</li></ul><h3 id="数据">数据</h3><h4 id="数组">数组</h4><p>基本原则：在内存中连续分配</p><p>连续声明的数组内存地址一般也是连续分配</p><p>访问：</p><blockquote><p>声明 “zip_dig cmu” 等价于“int cmu[5]”</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_digit</span></span><br><span class="line"><span class="params">(zip_dig z, <span class="type">int</span> dig)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> z[dig];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># %edx = z</span><br><span class="line"># %eax = dig</span><br><span class="line">movl (%edx,%eax,4),%eax # z[dig]</span><br></pre></td></tr></table></figure><ul><li>寄存器 %edx 中存储 数组的起始地址</li><li>寄存器 %eax中保存了 数组元素下标值</li><li>需要访问的数据地址为 4*%eax + %edx</li><li>内存寻址方式： (%edx,%eax,4)</li></ul><hr><h5 id="循环访问数组：">循环访问数组：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">zincr</span><span class="params">(zip_dig z)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ZLEN; i++)#数组长度是<span class="number">5</span></span><br><span class="line">z[i]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># edx = z</span><br><span class="line">movl $0, %eax # %eax = i</span><br><span class="line">.L4: # loop:</span><br><span class="line">addl $1, (%edx,%eax,4) # z[i]++</span><br><span class="line">addl $1, %eax # i++</span><br><span class="line">cmpl $5, %eax # i:5 数组长度为5</span><br><span class="line">jne .L4 # if !=, goto loop</span><br></pre></td></tr></table></figure><hr><p>二维数组</p><blockquote><p>“zip_dig pgh[4]” 等价于 “<code>int pgh [4][5]</code>”</p></blockquote><p>变量 pgh: 含有四个元素的数组，每个元素都是一个包含五 个整数的数组——值得注意的是，这些元素在内存中是连 续分配的</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703553.png" alt="image-20220611210941321" style="zoom:50%;" /><h4 id="结构">结构</h4><p>C语言中的结构</p><ul><li>内存连续分配</li><li>通过结构的名称与成员名称来访问数据</li><li>结构中可能包括不同数据类型的成员</li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703693.png" alt="image-20220611211044595" style="zoom: 67%;" /><hr><p>访问：</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703957.png" alt="image-20220611211139892" style="zoom:50%;" /><hr><p>结构与对齐</p><p>数据对齐 ：要求数据地址必须是 K的整数倍（K一般为4或8）</p><p>空字节填充</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703428.png" alt="image-20220611211634037" style="zoom:50%;" /><h4 id="联合">联合</h4><p>根据最大的元素来分配内存空间</p><h2 id="存储器层次结构">存储器层次结构</h2><h3 id="存储技术">存储技术</h3><h4 id="随机存储器ram">随机存储器RAM</h4><p>SRAM</p><p>DRAM</p><h4 id="磁盘">磁盘</h4><h4 id="固态硬盘ssd">固态硬盘SSD</h4><h3 id="局部性">局部性</h3><blockquote><p>缓解了CPU-主存执行速度差异</p></blockquote><p>局部性原理: 一个编写良好的程序倾向于引用最近引用过的数据本身，或 者引用的数据项邻近于其最近引用过的数据项</p><ul><li>时间局部性(Temporal locality):<ul><li>最近被引用过的数据很可能很快会被多次引用</li></ul></li><li>空间局部性(Spatial locality):<ul><li>一个存储位置被引用了一次，很可能很快其 附近存储位置也会被引用</li></ul></li></ul><h3 id="存储器的层次结构">存储器的层次结构</h3><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/202206161703157.png" alt="image-20220611213500557" style="zoom:50%;" /><h4 id="高速缓存">高速缓存</h4><ul><li><strong>高速缓存Cache</strong>: 一个小而快的存储设备，它作为存储在更大、更慢的设备中的 数据对象的缓冲区域</li></ul><p>小结：</p><ul><li>CPU与主存及大容量 存储设备之间的速度 差异持续扩大</li><li>编写良好的程序应 具有良好的局部性</li><li>存储层次正是应用 局部性原理，基于缓 存，以缩小前述差异</li></ul><h3 id="高速缓存">高速缓存</h3><h4 id="什么是高速缓冲器">什么是高速缓冲器</h4><h4 id="高速缓存的结构与读写">高速缓存的结构与读写</h4><h4 id="高速缓存与性能">高速缓存与性能</h4><p>………………</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;基础知识&lt;/h2&gt;</summary>
    
    
    
    
    <category term="计算机系统" scheme="https://overmind7.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="汇编" scheme="https://overmind7.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-11</title>
    <link href="https://overmind7.github.io/2022/06/11/2022-6-11/"/>
    <id>https://overmind7.github.io/2022/06/11/2022-6-11/</id>
    <published>2022-06-10T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:14.154Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-10</title>
    <link href="https://overmind7.github.io/2022/06/10/2022-6-10/"/>
    <id>https://overmind7.github.io/2022/06/10/2022-6-10/</id>
    <published>2022-06-09T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:06.578Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-9</title>
    <link href="https://overmind7.github.io/2022/06/09/2022-6-9/"/>
    <id>https://overmind7.github.io/2022/06/09/2022-6-9/</id>
    <published>2022-06-08T16:00:00.000Z</published>
    <updated>2022-06-20T13:31:00.800Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-8</title>
    <link href="https://overmind7.github.io/2022/06/08/2022-6-8/"/>
    <id>https://overmind7.github.io/2022/06/08/2022-6-8/</id>
    <published>2022-06-07T16:00:00.000Z</published>
    <updated>2022-06-20T13:30:46.314Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022-6-7</title>
    <link href="https://overmind7.github.io/2022/06/07/2022-6-7/"/>
    <id>https://overmind7.github.io/2022/06/07/2022-6-7/</id>
    <published>2022-06-06T16:00:00.000Z</published>
    <updated>2022-06-20T13:30:41.047Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a1d7d3831e58c9c2c87559771cf20a5c2cbc1a88ea6afcec29ddd0ffaadc92c">3757591a001914bec15e16449f8d28368fc88423040fa9c0bdf246601b75dcca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="日记" scheme="https://overmind7.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://overmind7.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
