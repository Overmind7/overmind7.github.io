<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今天学习了吗</title>
  
  
  <link href="https://overmind7.github.io/atom.xml" rel="self"/>
  
  <link href="https://overmind7.github.io/"/>
  <updated>2022-06-16T02:32:52.998Z</updated>
  <id>https://overmind7.github.io/</id>
  
  <author>
    <name>Overmind</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dijkstra举例</title>
    <link href="https://overmind7.github.io/2022/06/16/Dijkstra%E4%B8%BE%E4%BE%8B/"/>
    <id>https://overmind7.github.io/2022/06/16/Dijkstra%E4%B8%BE%E4%BE%8B/</id>
    <published>2022-06-16T02:21:05.000Z</published>
    <updated>2022-06-16T02:32:52.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在n个人中，某些人的银行账号之间可以互相转账。这些人之间转账的手续费各不相同。给定这些人之间转账时需要从转账金额里扣除百分之几的手续费，请问A最少需要多少钱使得转账后B收到100元。</p><p><strong>输入</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行输入两个正整数n,m，分别表示总人数和可以互相转账的人的对数。</span><br><span class="line">以下m行每行输入三个正整数x,y,z，表示标号为x的人和标号为y的人之间互相转账需要扣除z%的手续费(z&lt;100)。</span><br><span class="line">最后一行输入两个正整数A,B。数据保证A与B之间可以直接或间接地转账。</span><br></pre></td></tr></table></figure><blockquote><p>注意： 2&lt;&#x3D;N&lt;&#x3D;20，1&lt;&#x3D;M&lt;&#x3D;20，1&lt;&#x3D;Q&lt;&#x3D;100</p></blockquote><p><strong>输出</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出A使得B到账100元最少需要的总费用。精确到小数点后8位。</span><br></pre></td></tr></table></figure><p><strong>样例分析</strong></p><p>【样例输入】  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>【样例输出】 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">103.07153164</span><br></pre></td></tr></table></figure><h2 id="ADT-实现"><a href="#ADT-实现" class="headerlink" title="ADT 实现"></a>ADT 实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> graphm</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> graphm</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graphm</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> numVertex, numEdge;</span><br><span class="line"><span class="type">double</span> **matrix;</span><br><span class="line"><span class="type">int</span> *mark;</span><br><span class="line">VertexType vexs[MAX_VERTEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Graphm</span>();</span><br><span class="line"><span class="built_in">Graphm</span>(<span class="type">int</span> n);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">e</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">first</span><span class="params">(<span class="type">int</span> )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putVex</span><span class="params">(<span class="type">int</span> v,VertexType value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locateVex</span><span class="params">(VertexType u)</span></span>;</span><br><span class="line"><span class="function">VertexType <span class="title">getVex</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2,<span class="type">double</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteEdge</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMark</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMark</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getEdge</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType int</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Graphm::<span class="built_in">Graphm</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Graphm::<span class="built_in">Graphm</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">numVertex = n;</span><br><span class="line">numEdge = <span class="number">0</span>;</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="type">double</span>*[numVertex];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line">matrix[i] = <span class="keyword">new</span> <span class="type">double</span>[numVertex];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numVertex;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;numVertex;j++)</span><br><span class="line">        matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">mark = <span class="keyword">new</span> <span class="type">int</span>[numVertex];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numVertex;i++)mark[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::n</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> numVertex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::e</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> numEdge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::first</span><span class="params">(<span class="type">int</span> v1)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[v1][i] != <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::next</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = v2 + <span class="number">1</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[v1][i] != <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::putVex</span><span class="params">(<span class="type">int</span> v,VertexType value)</span></span>&#123;</span><br><span class="line">vexs[v] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::locateVex</span><span class="params">(VertexType u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertex; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(u==vexs[i])<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VertexType <span class="title">Graphm::getVex</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> vexs[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::setEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2,<span class="type">double</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[v1][v2]==<span class="number">0</span>)numEdge++;</span><br><span class="line">matrix[v1][v2]=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::deleteEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[v1][v2]==<span class="number">0</span>)numEdge--;</span><br><span class="line">matrix[v1][v2]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graphm::setMark</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">mark[v]=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Graphm::getMark</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=numVertex)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> mark[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Graphm::getEdge</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> matrix[v1][v2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Graphm &amp;g)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g.<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g.<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line">cout &lt;&lt;  <span class="built_in">setiosflags</span>(ios::fixed) &lt;&lt;  <span class="built_in">setprecision</span>(<span class="number">8</span>)</span><br><span class="line"> &lt;&lt; g.<span class="built_in">getEdge</span>(i,j)&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>用Dijkstra，(O(n^2)) 实现。由于从一个账户转钱到另外一个账户的手续费不同，所以我们视它们为边的权值。先求出去掉手续费后所遗留下的钱，并在寻找路径时尽量去找能留下更多钱的路径（注意在起始点时要给它赋值为1），并将权值相乘，最后拿100除以权值相乘得到的最大值，输出答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(Graphm* g,<span class="type">double</span>* D,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">D[i] = g-&gt;<span class="built_in">getEdge</span>(s,i);</span><br><span class="line">&#125;</span><br><span class="line">D[s] = <span class="number">1</span>;</span><br><span class="line">g-&gt;<span class="built_in">setMark</span>(s,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;<span class="built_in">n</span>(); i++)&#123;</span><br><span class="line">minn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++ )&#123;</span><br><span class="line"><span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[j]&gt;minn)&#123;</span><br><span class="line">k = j;</span><br><span class="line">minn = D[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">g-&gt;<span class="built_in">setMark</span>(k,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(k == y) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;<span class="built_in">n</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g-&gt;<span class="built_in">getMark</span>(j)==<span class="number">0</span>&amp;&amp;D[k]*g-&gt;<span class="built_in">getEdge</span>(k,j)&gt;D[j])</span><br><span class="line">D[j] = D[k] * g-&gt;<span class="built_in">getEdge</span>(k,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在n个人中，某些人的银行账号之间可以互相转账。这些人之间转账的手续费各不相同。给定这些人之间转账时需要从转账金额里扣除百分之几的手续费，请问</summary>
      
    
    
    
    <category term="算法" scheme="https://overmind7.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Dijkstra" scheme="https://overmind7.github.io/tags/Dijkstra/"/>
    
    <category term="图" scheme="https://overmind7.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>cls test</title>
    <link href="https://overmind7.github.io/2022/06/16/cls-test/"/>
    <id>https://overmind7.github.io/2022/06/16/cls-test/</id>
    <published>2022-06-15T17:40:29.000Z</published>
    <updated>2022-06-15T18:01:46.263Z</updated>
    
    <content type="html"><![CDATA[<p>aaa</p><p>s</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;aaa&lt;/p&gt;
&lt;p&gt;s&lt;/p&gt;
</summary>
      
    
    
    
    <category term="ab" scheme="https://overmind7.github.io/categories/ab/"/>
    
    
    <category term="b" scheme="https://overmind7.github.io/tags/b/"/>
    
  </entry>
  
  <entry>
    <title>tag test</title>
    <link href="https://overmind7.github.io/2022/06/16/tag-test/"/>
    <id>https://overmind7.github.io/2022/06/16/tag-test/</id>
    <published>2022-06-15T17:36:18.000Z</published>
    <updated>2022-06-15T17:38:14.533Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="测试" scheme="https://overmind7.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="https://overmind7.github.io/2022/06/15/test-my-site/"/>
    <id>https://overmind7.github.io/2022/06/15/test-my-site/</id>
    <published>2022-06-15T01:55:49.000Z</published>
    <updated>2022-06-15T01:55:49.365Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://overmind7.github.io/2022/06/15/hello-world/"/>
    <id>https://overmind7.github.io/2022/06/15/hello-world/</id>
    <published>2022-06-15T01:53:48.588Z</published>
    <updated>2022-06-15T01:53:48.588Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
